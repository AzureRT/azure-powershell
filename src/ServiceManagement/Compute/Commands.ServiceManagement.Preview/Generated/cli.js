/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

function beautify(jsonText) {
    var obj = JSON.parse(jsonText);
    return JSON.stringify(obj, null, 2);
}

exports.init = function (cli) {

/*
  Deployment ChangeConfigurationByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "mode":null,
  "treatWarningsAsError":null
}
*/
  var deploymentChangeConfigurationByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentChangeConfigurationByName.command('change-configuration-by-name')
  .description($('change-configuration-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.changeConfigurationByName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2 = deploymentChangeConfigurationByName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentChangeConfigurationByNamechangeConfigurationByNameGenerate2 = deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentChangeConfigurationByNamechangeConfigurationByNameGenerate2.command('change-configuration-by-name')
  .description($('Generate deploymentChangeConfigurationByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"mode\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentChangeConfigurationByName_changeConfigurationByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"mode\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2.command('patch')
  .description($('Command to patch deploymentChangeConfigurationByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-change-configuration-parameters
  var catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0 = catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0 = parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0.command('deployment-change-configuration-parameters')
  .description($('Set catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-change-configuration-parameters
  var catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1 = catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1 = parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--treat-warnings-as-error', $('Remove the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.mode || options.treatWarningsAsError;
    if (anySubItem) {
      if (options.configuration) {
        var subItemPath = options.path + "/configuration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        var subItemPath = options.path + "/extendedProperties";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        var subItemPath = options.path + "/extensionConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        var subItemPath = options.path + "/mode";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.treatWarningsAsError) {
        var subItemPath = options.path + "/treatWarningsAsError";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-change-configuration-parameters
  var catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2 = catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2 = parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersChangeConfigurationByNameDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensionConfiguration0 = catparametersChangeConfigurationByNameDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationByNameDeploymentExtensionConfiguration0 = parametersChangeConfigurationByNameDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationByNameDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersChangeConfigurationByNameDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersChangeConfigurationByNameDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensionConfiguration1 = catparametersChangeConfigurationByNameDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationByNameDeploymentExtensionConfiguration1 = parametersChangeConfigurationByNameDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationByNameDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      if (options.allRoles) {
        var subItemPath = options.path + "/allRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        var subItemPath = options.path + "/namedRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersChangeConfigurationByNameDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensionConfiguration2 = catparametersChangeConfigurationByNameDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationByNameDeploymentExtensionConfiguration2 = parametersChangeConfigurationByNameDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationByNameDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersChangeConfigurationByNameDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentAllRoles0 = catparametersChangeConfigurationByNameDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationByNameDeploymentAllRoles0 = parametersChangeConfigurationByNameDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationByNameDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersChangeConfigurationByNameDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersChangeConfigurationByNameDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentAllRoles1 = catparametersChangeConfigurationByNameDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationByNameDeploymentAllRoles1 = parametersChangeConfigurationByNameDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationByNameDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersChangeConfigurationByNameDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentAllRoles2 = catparametersChangeConfigurationByNameDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationByNameDeploymentAllRoles2 = parametersChangeConfigurationByNameDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationByNameDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersChangeConfigurationByNameDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentNamedRoles0 = catparametersChangeConfigurationByNameDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationByNameDeploymentNamedRoles0 = parametersChangeConfigurationByNameDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationByNameDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersChangeConfigurationByNameDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersChangeConfigurationByNameDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentNamedRoles1 = catparametersChangeConfigurationByNameDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationByNameDeploymentNamedRoles1 = parametersChangeConfigurationByNameDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationByNameDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      if (options.extensions) {
        var subItemPath = options.path + "/extensions";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersChangeConfigurationByNameDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentNamedRoles2 = catparametersChangeConfigurationByNameDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationByNameDeploymentNamedRoles2 = parametersChangeConfigurationByNameDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationByNameDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersChangeConfigurationByNameDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensions0 = catparametersChangeConfigurationByNameDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationByNameDeploymentExtensions0 = parametersChangeConfigurationByNameDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationByNameDeploymentExtensions0.command('extensions')
  .description($('Set catparametersChangeConfigurationByNameDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersChangeConfigurationByNameDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensions1 = catparametersChangeConfigurationByNameDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationByNameDeploymentExtensions1 = parametersChangeConfigurationByNameDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationByNameDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersChangeConfigurationByNameDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensions2 = catparametersChangeConfigurationByNameDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationByNameDeploymentExtensions2 = parametersChangeConfigurationByNameDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationByNameDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersChangeConfigurationByNameDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment ChangeConfigurationBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "mode":null,
  "treatWarningsAsError":null
}
*/
  var deploymentChangeConfigurationBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentChangeConfigurationBySlot.command('change-configuration-by-slot')
  .description($('change-configuration-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.changeConfigurationBySlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2 = deploymentChangeConfigurationBySlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentChangeConfigurationBySlotchangeConfigurationBySlotGenerate2 = deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentChangeConfigurationBySlotchangeConfigurationBySlotGenerate2.command('change-configuration-by-slot')
  .description($('Generate deploymentChangeConfigurationBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"mode\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentChangeConfigurationBySlot_changeConfigurationBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"mode\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2.command('patch')
  .description($('Command to patch deploymentChangeConfigurationBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-change-configuration-parameters
  var catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0 = catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0 = parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0.command('deployment-change-configuration-parameters')
  .description($('Set catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-change-configuration-parameters
  var catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1 = catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1 = parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--treat-warnings-as-error', $('Remove the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.mode || options.treatWarningsAsError;
    if (anySubItem) {
      if (options.configuration) {
        var subItemPath = options.path + "/configuration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        var subItemPath = options.path + "/extendedProperties";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        var subItemPath = options.path + "/extensionConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        var subItemPath = options.path + "/mode";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.treatWarningsAsError) {
        var subItemPath = options.path + "/treatWarningsAsError";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-change-configuration-parameters
  var catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2 = catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2 = parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensionConfiguration0 = catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationBySlotDeploymentExtensionConfiguration0 = parametersChangeConfigurationBySlotDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationBySlotDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensionConfiguration1 = catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1 = parametersChangeConfigurationBySlotDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      if (options.allRoles) {
        var subItemPath = options.path + "/allRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        var subItemPath = options.path + "/namedRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensionConfiguration2 = catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2 = parametersChangeConfigurationBySlotDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersChangeConfigurationBySlotDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentAllRoles0 = catparametersChangeConfigurationBySlotDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationBySlotDeploymentAllRoles0 = parametersChangeConfigurationBySlotDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationBySlotDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersChangeConfigurationBySlotDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersChangeConfigurationBySlotDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentAllRoles1 = catparametersChangeConfigurationBySlotDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationBySlotDeploymentAllRoles1 = parametersChangeConfigurationBySlotDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationBySlotDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersChangeConfigurationBySlotDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentAllRoles2 = catparametersChangeConfigurationBySlotDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationBySlotDeploymentAllRoles2 = parametersChangeConfigurationBySlotDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationBySlotDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersChangeConfigurationBySlotDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentNamedRoles0 = catparametersChangeConfigurationBySlotDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationBySlotDeploymentNamedRoles0 = parametersChangeConfigurationBySlotDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationBySlotDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersChangeConfigurationBySlotDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersChangeConfigurationBySlotDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentNamedRoles1 = catparametersChangeConfigurationBySlotDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationBySlotDeploymentNamedRoles1 = parametersChangeConfigurationBySlotDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationBySlotDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      if (options.extensions) {
        var subItemPath = options.path + "/extensions";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersChangeConfigurationBySlotDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentNamedRoles2 = catparametersChangeConfigurationBySlotDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationBySlotDeploymentNamedRoles2 = parametersChangeConfigurationBySlotDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationBySlotDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersChangeConfigurationBySlotDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensions0 = catparametersChangeConfigurationBySlotDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersChangeConfigurationBySlotDeploymentExtensions0 = parametersChangeConfigurationBySlotDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersChangeConfigurationBySlotDeploymentExtensions0.command('extensions')
  .description($('Set catparametersChangeConfigurationBySlotDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersChangeConfigurationBySlotDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensions1 = catparametersChangeConfigurationBySlotDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersChangeConfigurationBySlotDeploymentExtensions1 = parametersChangeConfigurationBySlotDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersChangeConfigurationBySlotDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersChangeConfigurationBySlotDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensions2 = catparametersChangeConfigurationBySlotDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersChangeConfigurationBySlotDeploymentExtensions2 = parametersChangeConfigurationBySlotDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersChangeConfigurationBySlotDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersChangeConfigurationBySlotDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment Create
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "label":"",
  "name":"",
  "packageUri":"",
  "startDeployment":null,
  "treatWarningsAsError":null
}
*/
  var deploymentCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentCreate.command('create')
  .description($('create method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.create(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentCreatecreateParameters2 = deploymentCreate.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentCreatecreateGenerate2 = deploymentCreatecreateParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentCreatecreateGenerate2.command('create')
  .description($('Generate deploymentCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"label\":\"\",\"name\":\"\",\"packageUri\":\"\",\"startDeployment\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"label\":\"\",\r\n\"name\":\"\",\r\n\"packageUri\":\"\",\r\n\"startDeployment\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentCreatecreateParameters2.command('patch')
  .description($('Command to patch deploymentCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-create-parameters
  var catparametersCreateDeploymentDeploymentCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentDeploymentCreateParameters0 = catparametersCreateDeploymentDeploymentCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersCreateDeploymentDeploymentCreateParameters0 = parametersCreateDeploymentDeploymentCreateParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersCreateDeploymentDeploymentCreateParameters0.command('deployment-create-parameters')
  .description($('Set catparametersCreateDeploymentDeploymentCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--start-deployment <startDeployment>', $('Set the start-deployment value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'startDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.startDeployment) {
      if (options.parse && options.startDeployment) {
        options.startDeployment = JSON.parse(options.startDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.startDeployment}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-create-parameters
  var catparametersCreateDeploymentDeploymentCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentDeploymentCreateParameters1 = catparametersCreateDeploymentDeploymentCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersCreateDeploymentDeploymentCreateParameters1 = parametersCreateDeploymentDeploymentCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersCreateDeploymentDeploymentCreateParameters1.command('deployment-create-parameters')
  .description($('Remove catparametersCreateDeploymentDeploymentCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--label', $('Remove the label value.'))
  .option('--name', $('Remove the name value.'))
  .option('--package-uri', $('Remove the package-uri value.'))
  .option('--start-deployment', $('Remove the start-deployment value.'))
  .option('--treat-warnings-as-error', $('Remove the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.label || options.name || options.packageUri || options.startDeployment || options.treatWarningsAsError;
    if (anySubItem) {
      if (options.configuration) {
        var subItemPath = options.path + "/configuration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        var subItemPath = options.path + "/extendedProperties";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        var subItemPath = options.path + "/extensionConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.packageUri) {
        var subItemPath = options.path + "/packageUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.startDeployment) {
        var subItemPath = options.path + "/startDeployment";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.treatWarningsAsError) {
        var subItemPath = options.path + "/treatWarningsAsError";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-create-parameters
  var catparametersCreateDeploymentDeploymentCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentDeploymentCreateParameters2 = catparametersCreateDeploymentDeploymentCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersCreateDeploymentDeploymentCreateParameters2 = parametersCreateDeploymentDeploymentCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersCreateDeploymentDeploymentCreateParameters2.command('deployment-create-parameters')
  .description($('Remove catparametersCreateDeploymentDeploymentCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--start-deployment <startDeployment>', $('Add the start-deployment value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'startDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.startDeployment) {
      if (options.parse && options.startDeployment) {
        options.startDeployment = JSON.parse(options.startDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.startDeployment}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersCreateDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensionConfiguration0 = catparametersCreateDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersCreateDeploymentExtensionConfiguration0 = parametersCreateDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersCreateDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersCreateDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersCreateDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensionConfiguration1 = catparametersCreateDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersCreateDeploymentExtensionConfiguration1 = parametersCreateDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersCreateDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersCreateDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      if (options.allRoles) {
        var subItemPath = options.path + "/allRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        var subItemPath = options.path + "/namedRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersCreateDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensionConfiguration2 = catparametersCreateDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersCreateDeploymentExtensionConfiguration2 = parametersCreateDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersCreateDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersCreateDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersCreateDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentAllRoles0 = catparametersCreateDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersCreateDeploymentAllRoles0 = parametersCreateDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersCreateDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersCreateDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersCreateDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentAllRoles1 = catparametersCreateDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersCreateDeploymentAllRoles1 = parametersCreateDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersCreateDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersCreateDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersCreateDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentAllRoles2 = catparametersCreateDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersCreateDeploymentAllRoles2 = parametersCreateDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersCreateDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersCreateDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersCreateDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentNamedRoles0 = catparametersCreateDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersCreateDeploymentNamedRoles0 = parametersCreateDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersCreateDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersCreateDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersCreateDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentNamedRoles1 = catparametersCreateDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersCreateDeploymentNamedRoles1 = parametersCreateDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersCreateDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersCreateDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      if (options.extensions) {
        var subItemPath = options.path + "/extensions";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersCreateDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentNamedRoles2 = catparametersCreateDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersCreateDeploymentNamedRoles2 = parametersCreateDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersCreateDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersCreateDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersCreateDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensions0 = catparametersCreateDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersCreateDeploymentExtensions0 = parametersCreateDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersCreateDeploymentExtensions0.command('extensions')
  .description($('Set catparametersCreateDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersCreateDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensions1 = catparametersCreateDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersCreateDeploymentExtensions1 = parametersCreateDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersCreateDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersCreateDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersCreateDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensions2 = catparametersCreateDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersCreateDeploymentExtensions2 = parametersCreateDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersCreateDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersCreateDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment DeleteByName
  --service-name
  --deployment-name
  --delete-from-storage
*/
  var deploymentDeleteByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteByName.command('delete-by-name')
  .description($('delete-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteByName(options.serviceName, options.deploymentName, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  Deployment DeleteBySlot
  --service-name
  --deployment-slot
=============================================
0
*/
  var deploymentDeleteBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteBySlot.command('delete-by-slot')
  .description($('delete-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteBySlot(options.serviceName, options.deploymentSlot, _);
    cli.output.json(result);
  });
/*
  Deployment DeleteRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
=============================================
{
  "name":[
    ""
  ]
}
*/
  var deploymentDeleteRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteRoleInstanceByDeploymentName.command('delete-role-instance-by-deployment-name')
  .description($('delete-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, _);
    cli.output.json(result);
  });
/*
  Deployment DeleteRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "name":[
    ""
  ]
}
*/
  var deploymentDeleteRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteRoleInstanceByDeploymentSlot.command('delete-role-instance-by-deployment-slot')
  .description($('delete-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      var parametersValArr = options.parameters.split(',');
      cli.output.info('parametersValArr : ' + parametersValArr);
      parametersObj = {};
      parametersObj.instanceIDs = parametersValArr;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2 = deploymentDeleteRoleInstanceByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotGenerate2 = deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotGenerate2.command('delete-role-instance-by-deployment-slot')
  .description($('Generate deploymentDeleteRoleInstanceByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"name\":[\"\"]}', _);
    var filePath = 'deploymentDeleteRoleInstanceByDeploymentSlot_deleteRoleInstanceByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"name\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentDeleteRoleInstanceByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-delete-role-instance-parameters
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0.command('deployment-delete-role-instance-parameters')
  .description($('Set catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-delete-role-instance-parameters
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1.command('deployment-delete-role-instance-parameters')
  .description($('Remove catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.name;
    if (anySubItem) {
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-delete-role-instance-parameters
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2.command('deployment-delete-role-instance-parameters')
  .description($('Remove catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set name
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentName0 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentName0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0.command('name')
  .description($('Set catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/name' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove name
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentName1 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentName1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1.command('name')
  .description($('Remove catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/name' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add name
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentName2 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentName2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2.command('name')
  .description($('Remove catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/name' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment GetByName
  --service-name
  --deployment-name
*/
  var deploymentGetByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetByName.command('get-by-name')
  .description($('get-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getByName(options.serviceName, options.deploymentName, _);
    cli.output.json(result);
  });
/*
  Deployment GetBySlot
  --service-name
  --deployment-slot
=============================================
0
*/
  var deploymentGetBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetBySlot.command('get-by-slot')
  .description($('get-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getBySlot(options.serviceName, options.deploymentSlot, _);
    cli.output.json(result);
  });
/*
  Deployment GetPackageByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "containerUri":"",
  "overwriteExisting":null
}
*/
  var deploymentGetPackageByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetPackageByName.command('get-package-by-name')
  .description($('get-package-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getPackageByName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentGetPackageByNamegetPackageByNameParameters2 = deploymentGetPackageByName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentGetPackageByNamegetPackageByNameGenerate2 = deploymentGetPackageByNamegetPackageByNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentGetPackageByNamegetPackageByNameGenerate2.command('get-package-by-name')
  .description($('Generate deploymentGetPackageByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"containerUri\":\"\",\"overwriteExisting\":null}', _);
    var filePath = 'deploymentGetPackageByName_getPackageByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"containerUri\":\"\",\r\n\"overwriteExisting\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentGetPackageByNamegetPackageByNameParameters2.command('patch')
  .description($('Command to patch deploymentGetPackageByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-get-package-parameters
  var catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageByNameDeploymentDeploymentGetPackageParameters0 = catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0 = parametersGetPackageByNameDeploymentDeploymentGetPackageParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0.command('deployment-get-package-parameters')
  .description($('Set catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Set the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Set the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = options.path + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-get-package-parameters
  var catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageByNameDeploymentDeploymentGetPackageParameters1 = catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1 = parametersGetPackageByNameDeploymentDeploymentGetPackageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1.command('deployment-get-package-parameters')
  .description($('Remove catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--container-uri', $('Remove the container-uri value.'))
  .option('--overwrite-existing', $('Remove the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.containerUri || options.overwriteExisting;
    if (anySubItem) {
      if (options.containerUri) {
        var subItemPath = options.path + "/containerUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.overwriteExisting) {
        var subItemPath = options.path + "/overwriteExisting";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-get-package-parameters
  var catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageByNameDeploymentDeploymentGetPackageParameters2 = catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2 = parametersGetPackageByNameDeploymentDeploymentGetPackageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2.command('deployment-get-package-parameters')
  .description($('Remove catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Add the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Add the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = '' + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment GetPackageBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "containerUri":"",
  "overwriteExisting":null
}
*/
  var deploymentGetPackageBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetPackageBySlot.command('get-package-by-slot')
  .description($('get-package-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getPackageBySlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentGetPackageBySlotgetPackageBySlotParameters2 = deploymentGetPackageBySlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentGetPackageBySlotgetPackageBySlotGenerate2 = deploymentGetPackageBySlotgetPackageBySlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentGetPackageBySlotgetPackageBySlotGenerate2.command('get-package-by-slot')
  .description($('Generate deploymentGetPackageBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"containerUri\":\"\",\"overwriteExisting\":null}', _);
    var filePath = 'deploymentGetPackageBySlot_getPackageBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"containerUri\":\"\",\r\n\"overwriteExisting\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentGetPackageBySlotgetPackageBySlotParameters2.command('patch')
  .description($('Command to patch deploymentGetPackageBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-get-package-parameters
  var catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0 = catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0 = parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0.command('deployment-get-package-parameters')
  .description($('Set catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Set the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Set the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = options.path + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-get-package-parameters
  var catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1 = catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1 = parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1.command('deployment-get-package-parameters')
  .description($('Remove catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--container-uri', $('Remove the container-uri value.'))
  .option('--overwrite-existing', $('Remove the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.containerUri || options.overwriteExisting;
    if (anySubItem) {
      if (options.containerUri) {
        var subItemPath = options.path + "/containerUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.overwriteExisting) {
        var subItemPath = options.path + "/overwriteExisting";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-get-package-parameters
  var catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2 = catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2 = parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2.command('deployment-get-package-parameters')
  .description($('Remove catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Add the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Add the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = '' + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment ListEvents
  --service-name
  --deployment-name
  --start-time
  --end-time
*/
  var deploymentListEvents = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentListEvents.command('list-events')
  .description($('list-events method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--start-time <start-time>', $('start-time'))
  .option('--end-time <end-time>', $('end-time'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('startTime = ' + options.startTime);
    cli.output.info('endTime = ' + options.endTime);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.listEvents(options.serviceName, options.deploymentName, options.startTime, options.endTime, _);
    cli.output.json(result);
  });
/*
  Deployment ListEventsBySlot
  --service-name
  --deployment-slot
  --start-time
  --end-time
=============================================
0
*/
  var deploymentListEventsBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentListEventsBySlot.command('list-events-by-slot')
  .description($('list-events-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--start-time <start-time>', $('start-time'))
  .option('--end-time <end-time>', $('end-time'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('startTime = ' + options.startTime);
    cli.output.info('endTime = ' + options.endTime);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.listEventsBySlot(options.serviceName, options.deploymentSlot, options.startTime, options.endTime, _);
    cli.output.json(result);
  });
/*
  Deployment RebootRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
*/
  var deploymentRebootRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebootRoleInstanceByDeploymentName.command('reboot-role-instance-by-deployment-name')
  .description($('reboot-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebootRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, _);
    cli.output.json(result);
  });
/*
  Deployment RebootRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
=============================================
0
*/
  var deploymentRebootRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebootRoleInstanceByDeploymentSlot.command('reboot-role-instance-by-deployment-slot')
  .description($('reboot-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebootRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, options.roleInstanceName, _);
    cli.output.json(result);
  });
/*
  Deployment RebuildRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
  --resources
*/
  var deploymentRebuildRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebuildRoleInstanceByDeploymentName.command('rebuild-role-instance-by-deployment-name')
  .description($('rebuild-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--resources <resources>', $('resources'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    cli.output.info('resources = ' + options.resources);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebuildRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, options.resources, _);
    cli.output.json(result);
  });
/*
  Deployment RebuildRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
  --resources
*/
  var deploymentRebuildRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebuildRoleInstanceByDeploymentSlot.command('rebuild-role-instance-by-deployment-slot')
  .description($('rebuild-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--resources <resources>', $('resources'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    cli.output.info('resources = ' + options.resources);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebuildRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, options.roleInstanceName, options.resources, _);
    cli.output.json(result);
  });
/*
  Deployment ReimageRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
*/
  var deploymentReimageRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentReimageRoleInstanceByDeploymentName.command('reimage-role-instance-by-deployment-name')
  .description($('reimage-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.reimageRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, _);
    cli.output.json(result);
  });
/*
  Deployment ReimageRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
=============================================
0
*/
  var deploymentReimageRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentReimageRoleInstanceByDeploymentSlot.command('reimage-role-instance-by-deployment-slot')
  .description($('reimage-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.reimageRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, options.roleInstanceName, _);
    cli.output.json(result);
  });
/*
  Deployment RollbackUpdateOrUpgradeByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "force":false,
  "mode":0
}
*/
  var deploymentRollbackUpdateOrUpgradeByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentName.command('rollback-update-or-upgrade-by-deployment-name')
  .description($('rollback-update-or-upgrade-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rollbackUpdateOrUpgradeByDeploymentName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2 = deploymentRollbackUpdateOrUpgradeByDeploymentName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameGenerate2 = deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameGenerate2.command('rollback-update-or-upgrade-by-deployment-name')
  .description($('Generate deploymentRollbackUpdateOrUpgradeByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"force\":false,\"mode\":0}', _);
    var filePath = 'deploymentRollbackUpdateOrUpgradeByDeploymentName_rollbackUpdateOrUpgradeByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"force\":false,\r\n\"mode\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentRollbackUpdateOrUpgradeByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Set catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--force', $('Remove the force value.'))
  .option('--mode', $('Remove the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.force || options.mode;
    if (anySubItem) {
      if (options.force) {
        var subItemPath = options.path + "/force";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        var subItemPath = options.path + "/mode";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1.command('mode')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2.command('mode')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment RollbackUpdateOrUpgradeByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "force":false,
  "mode":0
}
*/
  var deploymentRollbackUpdateOrUpgradeByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentSlot.command('rollback-update-or-upgrade-by-deployment-slot')
  .description($('rollback-update-or-upgrade-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rollbackUpdateOrUpgradeByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2 = deploymentRollbackUpdateOrUpgradeByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotGenerate2 = deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotGenerate2.command('rollback-update-or-upgrade-by-deployment-slot')
  .description($('Generate deploymentRollbackUpdateOrUpgradeByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"force\":false,\"mode\":0}', _);
    var filePath = 'deploymentRollbackUpdateOrUpgradeByDeploymentSlot_rollbackUpdateOrUpgradeByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"force\":false,\r\n\"mode\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentRollbackUpdateOrUpgradeByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Set catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--force', $('Remove the force value.'))
  .option('--mode', $('Remove the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.force || options.mode;
    if (anySubItem) {
      if (options.force) {
        var subItemPath = options.path + "/force";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        var subItemPath = options.path + "/mode";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1.command('mode')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2.command('mode')
  .description($('Remove catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment Swap
  --service-name
  --parameters
=============================================
{
  "productionDeployment":"",
  "sourceDeployment":""
}
*/
  var deploymentSwap = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentSwap.command('swap')
  .description($('swap method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--production-deployment <production-deployment>', $('production-deployment'))
  .option('--source-deployment <source-deployment>', $('source-deployment'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('productionDeployment = ' + options.productionDeployment);
      parametersObj.productionDeployment = options.productionDeployment;
      cli.output.info('sourceDeployment = ' + options.sourceDeployment);
      parametersObj.sourceDeployment = options.sourceDeployment;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.swap(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentSwapswapParameters1 = deploymentSwap.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentSwapswapGenerate1 = deploymentSwapswapParameters1.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentSwapswapGenerate1.command('swap')
  .description($('Generate deploymentSwap parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"productionDeployment\":\"\",\"sourceDeployment\":\"\"}', _);
    var filePath = 'deploymentSwap_swap.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"productionDeployment\":\"\",\r\n\"sourceDeployment\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentSwapswapParameters1.command('patch')
  .description($('Command to patch deploymentSwap parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-swap-parameters
  var catparametersSwapDeploymentDeploymentSwapParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersSwapDeploymentDeploymentSwapParameters0 = catparametersSwapDeploymentDeploymentSwapParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersSwapDeploymentDeploymentSwapParameters0 = parametersSwapDeploymentDeploymentSwapParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersSwapDeploymentDeploymentSwapParameters0.command('deployment-swap-parameters')
  .description($('Set catparametersSwapDeploymentDeploymentSwapParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--production-deployment <productionDeployment>', $('Set the production-deployment value.'))
  .option('--source-deployment <sourceDeployment>', $('Set the source-deployment value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'productionDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.productionDeployment) {
      if (options.parse && options.productionDeployment) {
        options.productionDeployment = JSON.parse(options.productionDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.productionDeployment}]);
    }
    paramPath = options.path + '/' + 'sourceDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceDeployment) {
      if (options.parse && options.sourceDeployment) {
        options.sourceDeployment = JSON.parse(options.sourceDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceDeployment}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-swap-parameters
  var catparametersSwapDeploymentDeploymentSwapParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersSwapDeploymentDeploymentSwapParameters1 = catparametersSwapDeploymentDeploymentSwapParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersSwapDeploymentDeploymentSwapParameters1 = parametersSwapDeploymentDeploymentSwapParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersSwapDeploymentDeploymentSwapParameters1.command('deployment-swap-parameters')
  .description($('Remove catparametersSwapDeploymentDeploymentSwapParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--production-deployment', $('Remove the production-deployment value.'))
  .option('--source-deployment', $('Remove the source-deployment value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.productionDeployment || options.sourceDeployment;
    if (anySubItem) {
      if (options.productionDeployment) {
        var subItemPath = options.path + "/productionDeployment";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceDeployment) {
        var subItemPath = options.path + "/sourceDeployment";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-swap-parameters
  var catparametersSwapDeploymentDeploymentSwapParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersSwapDeploymentDeploymentSwapParameters2 = catparametersSwapDeploymentDeploymentSwapParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersSwapDeploymentDeploymentSwapParameters2 = parametersSwapDeploymentDeploymentSwapParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersSwapDeploymentDeploymentSwapParameters2.command('deployment-swap-parameters')
  .description($('Remove catparametersSwapDeploymentDeploymentSwapParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--production-deployment <productionDeployment>', $('Add the production-deployment value.'))
  .option('--source-deployment <sourceDeployment>', $('Add the source-deployment value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'productionDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.productionDeployment) {
      if (options.parse && options.productionDeployment) {
        options.productionDeployment = JSON.parse(options.productionDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.productionDeployment}]);
    }
    paramPath = '' + '/' + 'sourceDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceDeployment) {
      if (options.parse && options.sourceDeployment) {
        options.sourceDeployment = JSON.parse(options.sourceDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceDeployment}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment UpdateStatusByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "status":0
}
*/
  var deploymentUpdateStatusByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpdateStatusByDeploymentName.command('update-status-by-deployment-name')
  .description($('update-status-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.updateStatusByDeploymentName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2 = deploymentUpdateStatusByDeploymentName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameGenerate2 = deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameGenerate2.command('update-status-by-deployment-name')
  .description($('Generate deploymentUpdateStatusByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"status\":0}', _);
    var filePath = 'deploymentUpdateStatusByDeploymentName_updateStatusByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"status\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentUpdateStatusByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters0 = catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters0 = parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters0.command('deployment-update-status-parameters')
  .description($('Set catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Set the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1 = catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1 = parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1.command('deployment-update-status-parameters')
  .description($('Remove catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--status', $('Remove the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.status;
    if (anySubItem) {
      if (options.status) {
        var subItemPath = options.path + "/status";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2 = catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2 = parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2.command('deployment-update-status-parameters')
  .description($('Remove catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Add the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove status
  var catparametersUpdateStatusByDeploymentNameDeploymentStatus1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentStatus1 = catparametersUpdateStatusByDeploymentNameDeploymentStatus1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpdateStatusByDeploymentNameDeploymentStatus1 = parametersUpdateStatusByDeploymentNameDeploymentStatus1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpdateStatusByDeploymentNameDeploymentStatus1.command('status')
  .description($('Remove catparametersUpdateStatusByDeploymentNameDeploymentStatus1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/status';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add status
  var catparametersUpdateStatusByDeploymentNameDeploymentStatus2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentStatus2 = catparametersUpdateStatusByDeploymentNameDeploymentStatus2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpdateStatusByDeploymentNameDeploymentStatus2 = parametersUpdateStatusByDeploymentNameDeploymentStatus2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpdateStatusByDeploymentNameDeploymentStatus2.command('status')
  .description($('Remove catparametersUpdateStatusByDeploymentNameDeploymentStatus2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/status' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment UpdateStatusByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "status":0
}
*/
  var deploymentUpdateStatusByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpdateStatusByDeploymentSlot.command('update-status-by-deployment-slot')
  .description($('update-status-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.updateStatusByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2 = deploymentUpdateStatusByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotGenerate2 = deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotGenerate2.command('update-status-by-deployment-slot')
  .description($('Generate deploymentUpdateStatusByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"status\":0}', _);
    var filePath = 'deploymentUpdateStatusByDeploymentSlot_updateStatusByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"status\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentUpdateStatusByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters0 = catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters0 = parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters0.command('deployment-update-status-parameters')
  .description($('Set catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Set the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1 = catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1 = parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1.command('deployment-update-status-parameters')
  .description($('Remove catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--status', $('Remove the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.status;
    if (anySubItem) {
      if (options.status) {
        var subItemPath = options.path + "/status";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2 = catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2 = parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2.command('deployment-update-status-parameters')
  .description($('Remove catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Add the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove status
  var catparametersUpdateStatusByDeploymentSlotDeploymentStatus1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentStatus1 = catparametersUpdateStatusByDeploymentSlotDeploymentStatus1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpdateStatusByDeploymentSlotDeploymentStatus1 = parametersUpdateStatusByDeploymentSlotDeploymentStatus1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpdateStatusByDeploymentSlotDeploymentStatus1.command('status')
  .description($('Remove catparametersUpdateStatusByDeploymentSlotDeploymentStatus1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/status';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add status
  var catparametersUpdateStatusByDeploymentSlotDeploymentStatus2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentStatus2 = catparametersUpdateStatusByDeploymentSlotDeploymentStatus2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpdateStatusByDeploymentSlotDeploymentStatus2 = parametersUpdateStatusByDeploymentSlotDeploymentStatus2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpdateStatusByDeploymentSlotDeploymentStatus2.command('status')
  .description($('Remove catparametersUpdateStatusByDeploymentSlotDeploymentStatus2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/status' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment UpgradeByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "force":false,
  "label":"",
  "mode":0,
  "packageUri":"",
  "roleToUpgrade":""
}
*/
  var deploymentUpgradeByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpgradeByName.command('upgrade-by-name')
  .description($('upgrade-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.upgradeByName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpgradeByNameupgradeByNameParameters2 = deploymentUpgradeByName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpgradeByNameupgradeByNameGenerate2 = deploymentUpgradeByNameupgradeByNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpgradeByNameupgradeByNameGenerate2.command('upgrade-by-name')
  .description($('Generate deploymentUpgradeByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"force\":false,\"label\":\"\",\"mode\":0,\"packageUri\":\"\",\"roleToUpgrade\":\"\"}', _);
    var filePath = 'deploymentUpgradeByName_upgradeByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"force\":false,\r\n\"label\":\"\",\r\n\"mode\":0,\r\n\"packageUri\":\"\",\r\n\"roleToUpgrade\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpgradeByNameupgradeByNameParameters2.command('patch')
  .description($('Command to patch deploymentUpgradeByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-upgrade-parameters
  var catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentDeploymentUpgradeParameters0 = catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0 = parametersUpgradeByNameDeploymentDeploymentUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0.command('deployment-upgrade-parameters')
  .description($('Set catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Set the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-upgrade-parameters
  var catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentDeploymentUpgradeParameters1 = catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1 = parametersUpgradeByNameDeploymentDeploymentUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1.command('deployment-upgrade-parameters')
  .description($('Remove catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--force', $('Remove the force value.'))
  .option('--label', $('Remove the label value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--package-uri', $('Remove the package-uri value.'))
  .option('--role-to-upgrade', $('Remove the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.force || options.label || options.mode || options.packageUri || options.roleToUpgrade;
    if (anySubItem) {
      if (options.configuration) {
        var subItemPath = options.path + "/configuration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        var subItemPath = options.path + "/extendedProperties";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        var subItemPath = options.path + "/extensionConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.force) {
        var subItemPath = options.path + "/force";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        var subItemPath = options.path + "/mode";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.packageUri) {
        var subItemPath = options.path + "/packageUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleToUpgrade) {
        var subItemPath = options.path + "/roleToUpgrade";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-upgrade-parameters
  var catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentDeploymentUpgradeParameters2 = catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2 = parametersUpgradeByNameDeploymentDeploymentUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2.command('deployment-upgrade-parameters')
  .description($('Remove catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Add the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersUpgradeByNameDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensionConfiguration0 = catparametersUpgradeByNameDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeByNameDeploymentExtensionConfiguration0 = parametersUpgradeByNameDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeByNameDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersUpgradeByNameDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersUpgradeByNameDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensionConfiguration1 = catparametersUpgradeByNameDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeByNameDeploymentExtensionConfiguration1 = parametersUpgradeByNameDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeByNameDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersUpgradeByNameDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      if (options.allRoles) {
        var subItemPath = options.path + "/allRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        var subItemPath = options.path + "/namedRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersUpgradeByNameDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensionConfiguration2 = catparametersUpgradeByNameDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeByNameDeploymentExtensionConfiguration2 = parametersUpgradeByNameDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeByNameDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersUpgradeByNameDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersUpgradeByNameDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentAllRoles0 = catparametersUpgradeByNameDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeByNameDeploymentAllRoles0 = parametersUpgradeByNameDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeByNameDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersUpgradeByNameDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersUpgradeByNameDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentAllRoles1 = catparametersUpgradeByNameDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeByNameDeploymentAllRoles1 = parametersUpgradeByNameDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeByNameDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersUpgradeByNameDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersUpgradeByNameDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentAllRoles2 = catparametersUpgradeByNameDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeByNameDeploymentAllRoles2 = parametersUpgradeByNameDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeByNameDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersUpgradeByNameDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersUpgradeByNameDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentNamedRoles0 = catparametersUpgradeByNameDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeByNameDeploymentNamedRoles0 = parametersUpgradeByNameDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeByNameDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersUpgradeByNameDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersUpgradeByNameDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentNamedRoles1 = catparametersUpgradeByNameDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeByNameDeploymentNamedRoles1 = parametersUpgradeByNameDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeByNameDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersUpgradeByNameDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      if (options.extensions) {
        var subItemPath = options.path + "/extensions";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersUpgradeByNameDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentNamedRoles2 = catparametersUpgradeByNameDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeByNameDeploymentNamedRoles2 = parametersUpgradeByNameDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeByNameDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersUpgradeByNameDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersUpgradeByNameDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensions0 = catparametersUpgradeByNameDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeByNameDeploymentExtensions0 = parametersUpgradeByNameDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeByNameDeploymentExtensions0.command('extensions')
  .description($('Set catparametersUpgradeByNameDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersUpgradeByNameDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensions1 = catparametersUpgradeByNameDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeByNameDeploymentExtensions1 = parametersUpgradeByNameDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeByNameDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersUpgradeByNameDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersUpgradeByNameDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensions2 = catparametersUpgradeByNameDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeByNameDeploymentExtensions2 = parametersUpgradeByNameDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeByNameDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersUpgradeByNameDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersUpgradeByNameDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentMode1 = catparametersUpgradeByNameDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeByNameDeploymentMode1 = parametersUpgradeByNameDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeByNameDeploymentMode1.command('mode')
  .description($('Remove catparametersUpgradeByNameDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersUpgradeByNameDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentMode2 = catparametersUpgradeByNameDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeByNameDeploymentMode2 = parametersUpgradeByNameDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeByNameDeploymentMode2.command('mode')
  .description($('Remove catparametersUpgradeByNameDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment UpgradeBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "force":false,
  "label":"",
  "mode":0,
  "packageUri":"",
  "roleToUpgrade":""
}
*/
  var deploymentUpgradeBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpgradeBySlot.command('upgrade-by-slot')
  .description($('upgrade-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.upgradeBySlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpgradeBySlotupgradeBySlotParameters2 = deploymentUpgradeBySlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpgradeBySlotupgradeBySlotGenerate2 = deploymentUpgradeBySlotupgradeBySlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpgradeBySlotupgradeBySlotGenerate2.command('upgrade-by-slot')
  .description($('Generate deploymentUpgradeBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"force\":false,\"label\":\"\",\"mode\":0,\"packageUri\":\"\",\"roleToUpgrade\":\"\"}', _);
    var filePath = 'deploymentUpgradeBySlot_upgradeBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"force\":false,\r\n\"label\":\"\",\r\n\"mode\":0,\r\n\"packageUri\":\"\",\r\n\"roleToUpgrade\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpgradeBySlotupgradeBySlotParameters2.command('patch')
  .description($('Command to patch deploymentUpgradeBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-upgrade-parameters
  var catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0 = catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0 = parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0.command('deployment-upgrade-parameters')
  .description($('Set catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Set the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-upgrade-parameters
  var catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1 = catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1 = parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1.command('deployment-upgrade-parameters')
  .description($('Remove catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--force', $('Remove the force value.'))
  .option('--label', $('Remove the label value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--package-uri', $('Remove the package-uri value.'))
  .option('--role-to-upgrade', $('Remove the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.force || options.label || options.mode || options.packageUri || options.roleToUpgrade;
    if (anySubItem) {
      if (options.configuration) {
        var subItemPath = options.path + "/configuration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        var subItemPath = options.path + "/extendedProperties";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        var subItemPath = options.path + "/extensionConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.force) {
        var subItemPath = options.path + "/force";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        var subItemPath = options.path + "/mode";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.packageUri) {
        var subItemPath = options.path + "/packageUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleToUpgrade) {
        var subItemPath = options.path + "/roleToUpgrade";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-upgrade-parameters
  var catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2 = catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2 = parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2.command('deployment-upgrade-parameters')
  .description($('Remove catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Add the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersUpgradeBySlotDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensionConfiguration0 = catparametersUpgradeBySlotDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeBySlotDeploymentExtensionConfiguration0 = parametersUpgradeBySlotDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeBySlotDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersUpgradeBySlotDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersUpgradeBySlotDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensionConfiguration1 = catparametersUpgradeBySlotDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeBySlotDeploymentExtensionConfiguration1 = parametersUpgradeBySlotDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeBySlotDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersUpgradeBySlotDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      if (options.allRoles) {
        var subItemPath = options.path + "/allRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        var subItemPath = options.path + "/namedRoles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersUpgradeBySlotDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensionConfiguration2 = catparametersUpgradeBySlotDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeBySlotDeploymentExtensionConfiguration2 = parametersUpgradeBySlotDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeBySlotDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersUpgradeBySlotDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersUpgradeBySlotDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentAllRoles0 = catparametersUpgradeBySlotDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeBySlotDeploymentAllRoles0 = parametersUpgradeBySlotDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeBySlotDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersUpgradeBySlotDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersUpgradeBySlotDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentAllRoles1 = catparametersUpgradeBySlotDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeBySlotDeploymentAllRoles1 = parametersUpgradeBySlotDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeBySlotDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersUpgradeBySlotDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersUpgradeBySlotDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentAllRoles2 = catparametersUpgradeBySlotDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeBySlotDeploymentAllRoles2 = parametersUpgradeBySlotDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeBySlotDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersUpgradeBySlotDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersUpgradeBySlotDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentNamedRoles0 = catparametersUpgradeBySlotDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeBySlotDeploymentNamedRoles0 = parametersUpgradeBySlotDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeBySlotDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersUpgradeBySlotDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersUpgradeBySlotDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentNamedRoles1 = catparametersUpgradeBySlotDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeBySlotDeploymentNamedRoles1 = parametersUpgradeBySlotDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeBySlotDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersUpgradeBySlotDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      if (options.extensions) {
        var subItemPath = options.path + "/extensions";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersUpgradeBySlotDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentNamedRoles2 = catparametersUpgradeBySlotDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeBySlotDeploymentNamedRoles2 = parametersUpgradeBySlotDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeBySlotDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersUpgradeBySlotDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersUpgradeBySlotDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensions0 = catparametersUpgradeBySlotDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersUpgradeBySlotDeploymentExtensions0 = parametersUpgradeBySlotDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersUpgradeBySlotDeploymentExtensions0.command('extensions')
  .description($('Set catparametersUpgradeBySlotDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersUpgradeBySlotDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensions1 = catparametersUpgradeBySlotDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeBySlotDeploymentExtensions1 = parametersUpgradeBySlotDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeBySlotDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersUpgradeBySlotDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersUpgradeBySlotDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensions2 = catparametersUpgradeBySlotDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeBySlotDeploymentExtensions2 = parametersUpgradeBySlotDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeBySlotDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersUpgradeBySlotDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersUpgradeBySlotDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentMode1 = catparametersUpgradeBySlotDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersUpgradeBySlotDeploymentMode1 = parametersUpgradeBySlotDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersUpgradeBySlotDeploymentMode1.command('mode')
  .description($('Remove catparametersUpgradeBySlotDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersUpgradeBySlotDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentMode2 = catparametersUpgradeBySlotDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersUpgradeBySlotDeploymentMode2 = parametersUpgradeBySlotDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersUpgradeBySlotDeploymentMode2.command('mode')
  .description($('Remove catparametersUpgradeBySlotDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment WalkUpgradeDomainByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "upgradeDomain":0
}
*/
  var deploymentWalkUpgradeDomainByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentName.command('walk-upgrade-domain-by-deployment-name')
  .description($('walk-upgrade-domain-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.walkUpgradeDomainByDeploymentName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2 = deploymentWalkUpgradeDomainByDeploymentName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameGenerate2 = deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameGenerate2.command('walk-upgrade-domain-by-deployment-name')
  .description($('Generate deploymentWalkUpgradeDomainByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"upgradeDomain\":0}', _);
    var filePath = 'deploymentWalkUpgradeDomainByDeploymentName_walkUpgradeDomainByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"upgradeDomain\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentWalkUpgradeDomainByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0 = catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0 = parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0.command('deployment-walk-upgrade-domain-parameters')
  .description($('Set catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Set the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1 = catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1 = parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--upgrade-domain', $('Remove the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.upgradeDomain;
    if (anySubItem) {
      if (options.upgradeDomain) {
        var subItemPath = options.path + "/upgradeDomain";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2 = catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2 = parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Add the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  Deployment WalkUpgradeDomainByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "upgradeDomain":0
}
*/
  var deploymentWalkUpgradeDomainByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentSlot.command('walk-upgrade-domain-by-deployment-slot')
  .description($('walk-upgrade-domain-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.walkUpgradeDomainByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2 = deploymentWalkUpgradeDomainByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotGenerate2 = deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotGenerate2.command('walk-upgrade-domain-by-deployment-slot')
  .description($('Generate deploymentWalkUpgradeDomainByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"upgradeDomain\":0}', _);
    var filePath = 'deploymentWalkUpgradeDomainByDeploymentSlot_walkUpgradeDomainByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"upgradeDomain\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentWalkUpgradeDomainByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0 = catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0 = parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0.command('deployment-walk-upgrade-domain-parameters')
  .description($('Set catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Set the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1 = catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1 = parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--upgrade-domain', $('Remove the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.upgradeDomain;
    if (anySubItem) {
      if (options.upgradeDomain) {
        var subItemPath = options.path + "/upgradeDomain";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2 = catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2 = parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Add the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  DNSServer AddDNSServer
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "address":"",
  "name":""
}
*/
  var dnsServerAddDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server').description($('Commands to manage your dns server.'));
  dnsServerAddDNSServer.command('add-dns-server')
  .description($('add-dns-server method to manage your dns server.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--address <address>', $('address'))
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('address = ' + options.address);
      parametersObj.address = options.address;
      cli.output.info('name = ' + options.name);
      parametersObj.name = options.name;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServers.addDNSServer(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var dnsServerAddDNSServeraddDNSServerParameters2 = dnsServerAddDNSServer.category('parameters')
  .description($('Commands to manage parameter for your dns server.'));
  var dnsServerAddDNSServeraddDNSServerGenerate2 = dnsServerAddDNSServeraddDNSServerParameters2.category('generate')
  .description($('Commands to generate parameter file for your dns server.'));
  dnsServerAddDNSServeraddDNSServerGenerate2.command('add-dns-server')
  .description($('Generate dnsServerAddDNSServer parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"address\":\"\",\"name\":\"\"}', _);
    var filePath = 'dnsServerAddDNSServer_addDNSServer.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  dnsServerAddDNSServeraddDNSServerParameters2.command('patch')
  .description($('Command to patch dnsServerAddDNSServer parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-add-parameters
  var catparametersAddDNSServerDNSServerDNSAddParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersAddDNSServerDNSServerDNSAddParameters0 = catparametersAddDNSServerDNSServerDNSAddParameters0.category('parameters')
  .description($('Commands to manage parameter for your dns-server.'));
  var setparametersAddDNSServerDNSServerDNSAddParameters0 = parametersAddDNSServerDNSServerDNSAddParameters0.category('set')
  .description($('Commands to set parameter file for your dns-server.'));
  setparametersAddDNSServerDNSServerDNSAddParameters0.command('dns-add-parameters')
  .description($('Set catparametersAddDNSServerDNSServerDNSAddParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-add-parameters
  var catparametersAddDNSServerDNSServerDNSAddParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersAddDNSServerDNSServerDNSAddParameters1 = catparametersAddDNSServerDNSServerDNSAddParameters1.category('parameters')
  .description($('Commands to remove parameter for your dns-server.'));
  var removeparametersAddDNSServerDNSServerDNSAddParameters1 = parametersAddDNSServerDNSServerDNSAddParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your dns-server.'));
  removeparametersAddDNSServerDNSServerDNSAddParameters1.command('dns-add-parameters')
  .description($('Remove catparametersAddDNSServerDNSServerDNSAddParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--address', $('Remove the address value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.address || options.name;
    if (anySubItem) {
      if (options.address) {
        var subItemPath = options.path + "/address";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-add-parameters
  var catparametersAddDNSServerDNSServerDNSAddParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersAddDNSServerDNSServerDNSAddParameters2 = catparametersAddDNSServerDNSServerDNSAddParameters2.category('parameters')
  .description($('Commands to add parameter for your dns-server.'));
  var addparametersAddDNSServerDNSServerDNSAddParameters2 = parametersAddDNSServerDNSServerDNSAddParameters2.category('add')
  .description($('Commands to add values in the parameter file for your dns-server.'));
  addparametersAddDNSServerDNSServerDNSAddParameters2.command('dns-add-parameters')
  .description($('Remove catparametersAddDNSServerDNSServerDNSAddParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Add the address value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  DNSServer DeleteDNSServer
  --service-name
  --deployment-name
  --dns-server-name
*/
  var dnsServerDeleteDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server').description($('Commands to manage your dns server.'));
  dnsServerDeleteDNSServer.command('delete-dns-server')
  .description($('delete-dns-server method to manage your dns server.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--dns-server-name <dns-server-name>', $('dns-server-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('dnsServerName = ' + options.dnsServerName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServers.deleteDNSServer(options.serviceName, options.deploymentName, options.dnsServerName, _);
    cli.output.json(result);
  });
/*
  DNSServer UpdateDNSServer
  --service-name
  --deployment-name
  --dns-server-name
  --parameters
=============================================
{
  "address":"",
  "name":""
}
*/
  var dnsServerUpdateDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server').description($('Commands to manage your dns server.'));
  dnsServerUpdateDNSServer.command('update-dns-server')
  .description($('update-dns-server method to manage your dns server.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--dns-server-name <dns-server-name>', $('dns-server-name'))
  .option('--address <address>', $('address'))
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('dnsServerName = ' + options.dnsServerName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('address = ' + options.address);
      parametersObj.address = options.address;
      cli.output.info('name = ' + options.name);
      parametersObj.name = options.name;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServers.updateDNSServer(options.serviceName, options.deploymentName, options.dnsServerName, parametersObj, _);
    cli.output.json(result);
  });
  var dnsServerUpdateDNSServerupdateDNSServerParameters3 = dnsServerUpdateDNSServer.category('parameters')
  .description($('Commands to manage parameter for your dns server.'));
  var dnsServerUpdateDNSServerupdateDNSServerGenerate3 = dnsServerUpdateDNSServerupdateDNSServerParameters3.category('generate')
  .description($('Commands to generate parameter file for your dns server.'));
  dnsServerUpdateDNSServerupdateDNSServerGenerate3.command('update-dns-server')
  .description($('Generate dnsServerUpdateDNSServer parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"address\":\"\",\"name\":\"\"}', _);
    var filePath = 'dnsServerUpdateDNSServer_updateDNSServer.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  dnsServerUpdateDNSServerupdateDNSServerParameters3.command('patch')
  .description($('Command to patch dnsServerUpdateDNSServer parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-update-parameters
  var catparametersUpdateDNSServerDNSServerDNSUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersUpdateDNSServerDNSServerDNSUpdateParameters0 = catparametersUpdateDNSServerDNSServerDNSUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your dns-server.'));
  var setparametersUpdateDNSServerDNSServerDNSUpdateParameters0 = parametersUpdateDNSServerDNSServerDNSUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your dns-server.'));
  setparametersUpdateDNSServerDNSServerDNSUpdateParameters0.command('dns-update-parameters')
  .description($('Set catparametersUpdateDNSServerDNSServerDNSUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-update-parameters
  var catparametersUpdateDNSServerDNSServerDNSUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersUpdateDNSServerDNSServerDNSUpdateParameters1 = catparametersUpdateDNSServerDNSServerDNSUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your dns-server.'));
  var removeparametersUpdateDNSServerDNSServerDNSUpdateParameters1 = parametersUpdateDNSServerDNSServerDNSUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your dns-server.'));
  removeparametersUpdateDNSServerDNSServerDNSUpdateParameters1.command('dns-update-parameters')
  .description($('Remove catparametersUpdateDNSServerDNSServerDNSUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--address', $('Remove the address value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.address || options.name;
    if (anySubItem) {
      if (options.address) {
        var subItemPath = options.path + "/address";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-update-parameters
  var catparametersUpdateDNSServerDNSServerDNSUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersUpdateDNSServerDNSServerDNSUpdateParameters2 = catparametersUpdateDNSServerDNSServerDNSUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your dns-server.'));
  var addparametersUpdateDNSServerDNSServerDNSUpdateParameters2 = parametersUpdateDNSServerDNSServerDNSUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your dns-server.'));
  addparametersUpdateDNSServerDNSServerDNSUpdateParameters2.command('dns-update-parameters')
  .description($('Remove catparametersUpdateDNSServerDNSServerDNSUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Add the address value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ExtensionImage Register
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":0,
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":0,
        "fixedPortMin":0,
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":0,
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageRegister = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image').description($('Commands to manage your extension image.'));
  extensionImageRegister.command('register')
  .description($('register method to manage your extension image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.register(parametersObj, _);
    cli.output.json(result);
  });
  var extensionImageRegisterregisterParameters0 = extensionImageRegister.category('parameters')
  .description($('Commands to manage parameter for your extension image.'));
  var extensionImageRegisterregisterGenerate0 = extensionImageRegisterregisterParameters0.category('generate')
  .description($('Commands to generate parameter file for your extension image.'));
  extensionImageRegisterregisterGenerate0.command('register')
  .description($('Generate extensionImageRegister parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":0,\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":0,\"fixedPortMin\":0,\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":0,\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageRegister_register.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":0,\r\n\"fixedPortMin\":0,\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  extensionImageRegisterregisterParameters0.command('patch')
  .description($('Command to patch extensionImageRegister parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters0 = catparametersRegisterExtensionImageExtensionImageRegisterParameters0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersRegisterExtensionImageExtensionImageRegisterParameters0 = parametersRegisterExtensionImageExtensionImageRegisterParameters0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersRegisterExtensionImageExtensionImageRegisterParameters0.command('extension-image-register-parameters')
  .description($('Set catparametersRegisterExtensionImageExtensionImageRegisterParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters1 = catparametersRegisterExtensionImageExtensionImageRegisterParameters1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersRegisterExtensionImageExtensionImageRegisterParameters1 = parametersRegisterExtensionImageExtensionImageRegisterParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersRegisterExtensionImageExtensionImageRegisterParameters1.command('extension-image-register-parameters')
  .description($('Remove catparametersRegisterExtensionImageExtensionImageRegisterParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--block-role-upon-failure', $('Remove the block-role-upon-failure value.'))
  .option('--certificate', $('Remove the certificate value.'))
  .option('--company-name', $('Remove the company-name value.'))
  .option('--description', $('Remove the description value.'))
  .option('--disallow-major-version-upgrade', $('Remove the disallow-major-version-upgrade value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--extension-endpoints', $('Remove the extension-endpoints value.'))
  .option('--homepage-uri', $('Remove the homepage-uri value.'))
  .option('--hosting-resources', $('Remove the hosting-resources value.'))
  .option('--is-internal-extension', $('Remove the is-internal-extension value.'))
  .option('--is-json-extension', $('Remove the is-json-extension value.'))
  .option('--label', $('Remove the label value.'))
  .option('--local-resources', $('Remove the local-resources value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--private-configuration-schema', $('Remove the private-configuration-schema value.'))
  .option('--provider-name-space', $('Remove the provider-name-space value.'))
  .option('--public-configuration-schema', $('Remove the public-configuration-schema value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--publisher-name', $('Remove the publisher-name value.'))
  .option('--regions', $('Remove the regions value.'))
  .option('--replication-completed', $('Remove the replication-completed value.'))
  .option('--sample-config', $('Remove the sample-config value.'))
  .option('--supported-os', $('Remove the supported-os value.'))
  .option('--type', $('Remove the type value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.blockRoleUponFailure || options.certificate || options.companyName || options.description || options.disallowMajorVersionUpgrade || options.eula || options.extensionEndpoints || options.homepageUri || options.hostingResources || options.isInternalExtension || options.isJsonExtension || options.label || options.localResources || options.mediaLink || options.privacyUri || options.privateConfigurationSchema || options.providerNameSpace || options.publicConfigurationSchema || options.publishedDate || options.publisherName || options.regions || options.replicationCompleted || options.sampleConfig || options.supportedOS || options.type || options.version;
    if (anySubItem) {
      if (options.blockRoleUponFailure) {
        var subItemPath = options.path + "/blockRoleUponFailure";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificate) {
        var subItemPath = options.path + "/certificate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.companyName) {
        var subItemPath = options.path + "/companyName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disallowMajorVersionUpgrade) {
        var subItemPath = options.path + "/disallowMajorVersionUpgrade";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        var subItemPath = options.path + "/eula";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionEndpoints) {
        var subItemPath = options.path + "/extensionEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.homepageUri) {
        var subItemPath = options.path + "/homepageUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostingResources) {
        var subItemPath = options.path + "/hostingResources";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isInternalExtension) {
        var subItemPath = options.path + "/isInternalExtension";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isJsonExtension) {
        var subItemPath = options.path + "/isJsonExtension";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localResources) {
        var subItemPath = options.path + "/localResources";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        var subItemPath = options.path + "/privacyUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateConfigurationSchema) {
        var subItemPath = options.path + "/privateConfigurationSchema";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.providerNameSpace) {
        var subItemPath = options.path + "/providerNameSpace";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicConfigurationSchema) {
        var subItemPath = options.path + "/publicConfigurationSchema";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        var subItemPath = options.path + "/publishedDate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherName) {
        var subItemPath = options.path + "/publisherName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.regions) {
        var subItemPath = options.path + "/regions";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.replicationCompleted) {
        var subItemPath = options.path + "/replicationCompleted";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sampleConfig) {
        var subItemPath = options.path + "/sampleConfig";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.supportedOS) {
        var subItemPath = options.path + "/supportedOS";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters2 = catparametersRegisterExtensionImageExtensionImageRegisterParameters2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersRegisterExtensionImageExtensionImageRegisterParameters2 = parametersRegisterExtensionImageExtensionImageRegisterParameters2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersRegisterExtensionImageExtensionImageRegisterParameters2.command('extension-image-register-parameters')
  .description($('Remove catparametersRegisterExtensionImageExtensionImageRegisterParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Add the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Add the certificate value.'))
  .option('--company-name <companyName>', $('Add the company-name value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Add the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Add the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Add the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Add the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Add the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Add the is-json-extension value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--local-resources <localResources>', $('Add the local-resources value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Add the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Add the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Add the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--publisher-name <publisherName>', $('Add the publisher-name value.'))
  .option('--regions <regions>', $('Add the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Add the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Add the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Add the supported-os value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = '' + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = '' + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = '' + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = '' + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = '' + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = '' + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = '' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = '' + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = '' + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = '' + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = '' + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = '' + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set certificate
  var catparametersRegisterExtensionImageCertificate0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate0 = catparametersRegisterExtensionImageCertificate0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersRegisterExtensionImageCertificate0 = parametersRegisterExtensionImageCertificate0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersRegisterExtensionImageCertificate0.command('certificate')
  .description($('Set catparametersRegisterExtensionImageCertificate0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var paramPath = options.path + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove certificate
  var catparametersRegisterExtensionImageCertificate1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate1 = catparametersRegisterExtensionImageCertificate1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersRegisterExtensionImageCertificate1 = parametersRegisterExtensionImageCertificate1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersRegisterExtensionImageCertificate1.command('certificate')
  .description($('Remove catparametersRegisterExtensionImageCertificate1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--store-location', $('Remove the store-location value.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .option('--thumbprint-required', $('Remove the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    var anySubItem = false || options.storeLocation || options.storeName || options.thumbprintAlgorithm || options.thumbprintRequired;
    if (anySubItem) {
      if (options.storeLocation) {
        var subItemPath = options.path + "/storeLocation";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storeName) {
        var subItemPath = options.path + "/storeName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        var subItemPath = options.path + "/thumbprintAlgorithm";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintRequired) {
        var subItemPath = options.path + "/thumbprintRequired";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add certificate
  var catparametersRegisterExtensionImageCertificate2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate2 = catparametersRegisterExtensionImageCertificate2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersRegisterExtensionImageCertificate2 = parametersRegisterExtensionImageCertificate2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersRegisterExtensionImageCertificate2.command('certificate')
  .description($('Remove catparametersRegisterExtensionImageCertificate2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Add the store-location value.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Add the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificate' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/certificate' + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = '/certificate' + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-endpoints
  var catparametersRegisterExtensionImageExtensionEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionEndpoints0 = catparametersRegisterExtensionImageExtensionEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersRegisterExtensionImageExtensionEndpoints0 = parametersRegisterExtensionImageExtensionEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersRegisterExtensionImageExtensionEndpoints0.command('extension-endpoints')
  .description($('Set catparametersRegisterExtensionImageExtensionEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Set the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Set the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints';
    var paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = options.path + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-endpoints
  var catparametersRegisterExtensionImageExtensionEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionEndpoints1 = catparametersRegisterExtensionImageExtensionEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersRegisterExtensionImageExtensionEndpoints1 = parametersRegisterExtensionImageExtensionEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersRegisterExtensionImageExtensionEndpoints1.command('extension-endpoints')
  .description($('Remove catparametersRegisterExtensionImageExtensionEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--instance-input-endpoints', $('Remove the instance-input-endpoints value.'))
  .option('--internal-endpoints', $('Remove the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    var anySubItem = false || options.inputEndpoints || options.instanceInputEndpoints || options.internalEndpoints;
    if (anySubItem) {
      if (options.inputEndpoints) {
        var subItemPath = options.path + "/inputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceInputEndpoints) {
        var subItemPath = options.path + "/instanceInputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalEndpoints) {
        var subItemPath = options.path + "/internalEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-endpoints
  var catparametersRegisterExtensionImageExtensionEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionEndpoints2 = catparametersRegisterExtensionImageExtensionEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersRegisterExtensionImageExtensionEndpoints2 = parametersRegisterExtensionImageExtensionEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersRegisterExtensionImageExtensionEndpoints2.command('extension-endpoints')
  .description($('Remove catparametersRegisterExtensionImageExtensionEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Add the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Add the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints' + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints0 = catparametersRegisterExtensionImageInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersRegisterExtensionImageInputEndpoints0 = parametersRegisterExtensionImageInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersRegisterExtensionImageInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersRegisterExtensionImageInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints1 = catparametersRegisterExtensionImageInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersRegisterExtensionImageInputEndpoints1 = parametersRegisterExtensionImageInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersRegisterExtensionImageInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersRegisterExtensionImageInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.localPort || options.name || options.port || options.protocol;
    if (anySubItem) {
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints2 = catparametersRegisterExtensionImageInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersRegisterExtensionImageInputEndpoints2 = parametersRegisterExtensionImageInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersRegisterExtensionImageInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersRegisterExtensionImageInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints0 = catparametersRegisterExtensionImageInstanceInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersRegisterExtensionImageInstanceInputEndpoints0 = parametersRegisterExtensionImageInstanceInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersRegisterExtensionImageInstanceInputEndpoints0.command('instance-input-endpoints')
  .description($('Set catparametersRegisterExtensionImageInstanceInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints1 = catparametersRegisterExtensionImageInstanceInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersRegisterExtensionImageInstanceInputEndpoints1 = parametersRegisterExtensionImageInstanceInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersRegisterExtensionImageInstanceInputEndpoints1.command('instance-input-endpoints')
  .description($('Remove catparametersRegisterExtensionImageInstanceInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max', $('Remove the fixed-port-max value.'))
  .option('--fixed-port-min', $('Remove the fixed-port-min value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fixedPortMax || options.fixedPortMin || options.localPort || options.name || options.protocol;
    if (anySubItem) {
      if (options.fixedPortMax) {
        var subItemPath = options.path + "/fixedPortMax";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fixedPortMin) {
        var subItemPath = options.path + "/fixedPortMin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints2 = catparametersRegisterExtensionImageInstanceInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersRegisterExtensionImageInstanceInputEndpoints2 = parametersRegisterExtensionImageInstanceInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersRegisterExtensionImageInstanceInputEndpoints2.command('instance-input-endpoints')
  .description($('Remove catparametersRegisterExtensionImageInstanceInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Add the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Add the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints0 = catparametersRegisterExtensionImageInternalEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersRegisterExtensionImageInternalEndpoints0 = parametersRegisterExtensionImageInternalEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersRegisterExtensionImageInternalEndpoints0.command('internal-endpoints')
  .description($('Set catparametersRegisterExtensionImageInternalEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints1 = catparametersRegisterExtensionImageInternalEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersRegisterExtensionImageInternalEndpoints1 = parametersRegisterExtensionImageInternalEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersRegisterExtensionImageInternalEndpoints1.command('internal-endpoints')
  .description($('Remove catparametersRegisterExtensionImageInternalEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.port || options.protocol;
    if (anySubItem) {
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints2 = catparametersRegisterExtensionImageInternalEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersRegisterExtensionImageInternalEndpoints2 = parametersRegisterExtensionImageInternalEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersRegisterExtensionImageInternalEndpoints2.command('internal-endpoints')
  .description($('Remove catparametersRegisterExtensionImageInternalEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set local-resources
  var catparametersRegisterExtensionImageLocalResources0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources0 = catparametersRegisterExtensionImageLocalResources0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersRegisterExtensionImageLocalResources0 = parametersRegisterExtensionImageLocalResources0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersRegisterExtensionImageLocalResources0.command('local-resources')
  .description($('Set catparametersRegisterExtensionImageLocalResources0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove local-resources
  var catparametersRegisterExtensionImageLocalResources1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources1 = catparametersRegisterExtensionImageLocalResources1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersRegisterExtensionImageLocalResources1 = parametersRegisterExtensionImageLocalResources1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersRegisterExtensionImageLocalResources1.command('local-resources')
  .description($('Remove catparametersRegisterExtensionImageLocalResources1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--size-in-m-b', $('Remove the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.sizeInMB;
    if (anySubItem) {
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sizeInMB) {
        var subItemPath = options.path + "/sizeInMB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add local-resources
  var catparametersRegisterExtensionImageLocalResources2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources2 = catparametersRegisterExtensionImageLocalResources2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersRegisterExtensionImageLocalResources2 = parametersRegisterExtensionImageLocalResources2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersRegisterExtensionImageLocalResources2.command('local-resources')
  .description($('Remove catparametersRegisterExtensionImageLocalResources2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Add the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ExtensionImage Unregister
  --provider-namespace
  --type
  --version
*/
  var extensionImageUnregister = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image').description($('Commands to manage your extension image.'));
  extensionImageUnregister.command('unregister')
  .description($('unregister method to manage your extension image.'))
  .usage('[options]')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('providerNamespace = ' + options.providerNamespace);
    cli.output.info('type = ' + options.type);
    cli.output.info('version = ' + options.version);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.unregister(options.providerNamespace, options.type, options.version, _);
    cli.output.json(result);
  });
/*
  ExtensionImage Update
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":0,
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":0,
        "fixedPortMin":0,
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":0,
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image').description($('Commands to manage your extension image.'));
  extensionImageUpdate.command('update')
  .description($('update method to manage your extension image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.update(parametersObj, _);
    cli.output.json(result);
  });
  var extensionImageUpdateupdateParameters0 = extensionImageUpdate.category('parameters')
  .description($('Commands to manage parameter for your extension image.'));
  var extensionImageUpdateupdateGenerate0 = extensionImageUpdateupdateParameters0.category('generate')
  .description($('Commands to generate parameter file for your extension image.'));
  extensionImageUpdateupdateGenerate0.command('update')
  .description($('Generate extensionImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":0,\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":0,\"fixedPortMin\":0,\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":0,\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":0,\r\n\"fixedPortMin\":0,\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  extensionImageUpdateupdateParameters0.command('patch')
  .description($('Command to patch extensionImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters0 = catparametersUpdateExtensionImageExtensionImageUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersUpdateExtensionImageExtensionImageUpdateParameters0 = parametersUpdateExtensionImageExtensionImageUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersUpdateExtensionImageExtensionImageUpdateParameters0.command('extension-image-update-parameters')
  .description($('Set catparametersUpdateExtensionImageExtensionImageUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters1 = catparametersUpdateExtensionImageExtensionImageUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersUpdateExtensionImageExtensionImageUpdateParameters1 = parametersUpdateExtensionImageExtensionImageUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersUpdateExtensionImageExtensionImageUpdateParameters1.command('extension-image-update-parameters')
  .description($('Remove catparametersUpdateExtensionImageExtensionImageUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--block-role-upon-failure', $('Remove the block-role-upon-failure value.'))
  .option('--certificate', $('Remove the certificate value.'))
  .option('--company-name', $('Remove the company-name value.'))
  .option('--description', $('Remove the description value.'))
  .option('--disallow-major-version-upgrade', $('Remove the disallow-major-version-upgrade value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--extension-endpoints', $('Remove the extension-endpoints value.'))
  .option('--homepage-uri', $('Remove the homepage-uri value.'))
  .option('--hosting-resources', $('Remove the hosting-resources value.'))
  .option('--is-internal-extension', $('Remove the is-internal-extension value.'))
  .option('--is-json-extension', $('Remove the is-json-extension value.'))
  .option('--label', $('Remove the label value.'))
  .option('--local-resources', $('Remove the local-resources value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--private-configuration-schema', $('Remove the private-configuration-schema value.'))
  .option('--provider-name-space', $('Remove the provider-name-space value.'))
  .option('--public-configuration-schema', $('Remove the public-configuration-schema value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--publisher-name', $('Remove the publisher-name value.'))
  .option('--regions', $('Remove the regions value.'))
  .option('--replication-completed', $('Remove the replication-completed value.'))
  .option('--sample-config', $('Remove the sample-config value.'))
  .option('--supported-os', $('Remove the supported-os value.'))
  .option('--type', $('Remove the type value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.blockRoleUponFailure || options.certificate || options.companyName || options.description || options.disallowMajorVersionUpgrade || options.eula || options.extensionEndpoints || options.homepageUri || options.hostingResources || options.isInternalExtension || options.isJsonExtension || options.label || options.localResources || options.mediaLink || options.privacyUri || options.privateConfigurationSchema || options.providerNameSpace || options.publicConfigurationSchema || options.publishedDate || options.publisherName || options.regions || options.replicationCompleted || options.sampleConfig || options.supportedOS || options.type || options.version;
    if (anySubItem) {
      if (options.blockRoleUponFailure) {
        var subItemPath = options.path + "/blockRoleUponFailure";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificate) {
        var subItemPath = options.path + "/certificate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.companyName) {
        var subItemPath = options.path + "/companyName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disallowMajorVersionUpgrade) {
        var subItemPath = options.path + "/disallowMajorVersionUpgrade";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        var subItemPath = options.path + "/eula";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionEndpoints) {
        var subItemPath = options.path + "/extensionEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.homepageUri) {
        var subItemPath = options.path + "/homepageUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostingResources) {
        var subItemPath = options.path + "/hostingResources";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isInternalExtension) {
        var subItemPath = options.path + "/isInternalExtension";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isJsonExtension) {
        var subItemPath = options.path + "/isJsonExtension";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localResources) {
        var subItemPath = options.path + "/localResources";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        var subItemPath = options.path + "/privacyUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateConfigurationSchema) {
        var subItemPath = options.path + "/privateConfigurationSchema";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.providerNameSpace) {
        var subItemPath = options.path + "/providerNameSpace";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicConfigurationSchema) {
        var subItemPath = options.path + "/publicConfigurationSchema";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        var subItemPath = options.path + "/publishedDate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherName) {
        var subItemPath = options.path + "/publisherName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.regions) {
        var subItemPath = options.path + "/regions";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.replicationCompleted) {
        var subItemPath = options.path + "/replicationCompleted";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sampleConfig) {
        var subItemPath = options.path + "/sampleConfig";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.supportedOS) {
        var subItemPath = options.path + "/supportedOS";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters2 = catparametersUpdateExtensionImageExtensionImageUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersUpdateExtensionImageExtensionImageUpdateParameters2 = parametersUpdateExtensionImageExtensionImageUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersUpdateExtensionImageExtensionImageUpdateParameters2.command('extension-image-update-parameters')
  .description($('Remove catparametersUpdateExtensionImageExtensionImageUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Add the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Add the certificate value.'))
  .option('--company-name <companyName>', $('Add the company-name value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Add the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Add the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Add the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Add the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Add the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Add the is-json-extension value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--local-resources <localResources>', $('Add the local-resources value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Add the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Add the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Add the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--publisher-name <publisherName>', $('Add the publisher-name value.'))
  .option('--regions <regions>', $('Add the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Add the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Add the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Add the supported-os value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = '' + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = '' + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = '' + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = '' + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = '' + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = '' + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = '' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = '' + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = '' + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = '' + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = '' + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = '' + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set certificate
  var catparametersUpdateExtensionImageCertificate0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate0 = catparametersUpdateExtensionImageCertificate0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersUpdateExtensionImageCertificate0 = parametersUpdateExtensionImageCertificate0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersUpdateExtensionImageCertificate0.command('certificate')
  .description($('Set catparametersUpdateExtensionImageCertificate0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var paramPath = options.path + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove certificate
  var catparametersUpdateExtensionImageCertificate1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate1 = catparametersUpdateExtensionImageCertificate1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersUpdateExtensionImageCertificate1 = parametersUpdateExtensionImageCertificate1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersUpdateExtensionImageCertificate1.command('certificate')
  .description($('Remove catparametersUpdateExtensionImageCertificate1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--store-location', $('Remove the store-location value.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .option('--thumbprint-required', $('Remove the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    var anySubItem = false || options.storeLocation || options.storeName || options.thumbprintAlgorithm || options.thumbprintRequired;
    if (anySubItem) {
      if (options.storeLocation) {
        var subItemPath = options.path + "/storeLocation";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storeName) {
        var subItemPath = options.path + "/storeName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        var subItemPath = options.path + "/thumbprintAlgorithm";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintRequired) {
        var subItemPath = options.path + "/thumbprintRequired";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add certificate
  var catparametersUpdateExtensionImageCertificate2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate2 = catparametersUpdateExtensionImageCertificate2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersUpdateExtensionImageCertificate2 = parametersUpdateExtensionImageCertificate2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersUpdateExtensionImageCertificate2.command('certificate')
  .description($('Remove catparametersUpdateExtensionImageCertificate2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Add the store-location value.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Add the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificate' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/certificate' + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = '/certificate' + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-endpoints
  var catparametersUpdateExtensionImageExtensionEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionEndpoints0 = catparametersUpdateExtensionImageExtensionEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersUpdateExtensionImageExtensionEndpoints0 = parametersUpdateExtensionImageExtensionEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersUpdateExtensionImageExtensionEndpoints0.command('extension-endpoints')
  .description($('Set catparametersUpdateExtensionImageExtensionEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Set the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Set the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints';
    var paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = options.path + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-endpoints
  var catparametersUpdateExtensionImageExtensionEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionEndpoints1 = catparametersUpdateExtensionImageExtensionEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersUpdateExtensionImageExtensionEndpoints1 = parametersUpdateExtensionImageExtensionEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersUpdateExtensionImageExtensionEndpoints1.command('extension-endpoints')
  .description($('Remove catparametersUpdateExtensionImageExtensionEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--instance-input-endpoints', $('Remove the instance-input-endpoints value.'))
  .option('--internal-endpoints', $('Remove the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    var anySubItem = false || options.inputEndpoints || options.instanceInputEndpoints || options.internalEndpoints;
    if (anySubItem) {
      if (options.inputEndpoints) {
        var subItemPath = options.path + "/inputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceInputEndpoints) {
        var subItemPath = options.path + "/instanceInputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalEndpoints) {
        var subItemPath = options.path + "/internalEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-endpoints
  var catparametersUpdateExtensionImageExtensionEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionEndpoints2 = catparametersUpdateExtensionImageExtensionEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersUpdateExtensionImageExtensionEndpoints2 = parametersUpdateExtensionImageExtensionEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersUpdateExtensionImageExtensionEndpoints2.command('extension-endpoints')
  .description($('Remove catparametersUpdateExtensionImageExtensionEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Add the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Add the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints' + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints0 = catparametersUpdateExtensionImageInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersUpdateExtensionImageInputEndpoints0 = parametersUpdateExtensionImageInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersUpdateExtensionImageInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersUpdateExtensionImageInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints1 = catparametersUpdateExtensionImageInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersUpdateExtensionImageInputEndpoints1 = parametersUpdateExtensionImageInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersUpdateExtensionImageInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersUpdateExtensionImageInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.localPort || options.name || options.port || options.protocol;
    if (anySubItem) {
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints2 = catparametersUpdateExtensionImageInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersUpdateExtensionImageInputEndpoints2 = parametersUpdateExtensionImageInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersUpdateExtensionImageInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersUpdateExtensionImageInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints0 = catparametersUpdateExtensionImageInstanceInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersUpdateExtensionImageInstanceInputEndpoints0 = parametersUpdateExtensionImageInstanceInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersUpdateExtensionImageInstanceInputEndpoints0.command('instance-input-endpoints')
  .description($('Set catparametersUpdateExtensionImageInstanceInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints1 = catparametersUpdateExtensionImageInstanceInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersUpdateExtensionImageInstanceInputEndpoints1 = parametersUpdateExtensionImageInstanceInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersUpdateExtensionImageInstanceInputEndpoints1.command('instance-input-endpoints')
  .description($('Remove catparametersUpdateExtensionImageInstanceInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max', $('Remove the fixed-port-max value.'))
  .option('--fixed-port-min', $('Remove the fixed-port-min value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fixedPortMax || options.fixedPortMin || options.localPort || options.name || options.protocol;
    if (anySubItem) {
      if (options.fixedPortMax) {
        var subItemPath = options.path + "/fixedPortMax";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fixedPortMin) {
        var subItemPath = options.path + "/fixedPortMin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints2 = catparametersUpdateExtensionImageInstanceInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersUpdateExtensionImageInstanceInputEndpoints2 = parametersUpdateExtensionImageInstanceInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersUpdateExtensionImageInstanceInputEndpoints2.command('instance-input-endpoints')
  .description($('Remove catparametersUpdateExtensionImageInstanceInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Add the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Add the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints0 = catparametersUpdateExtensionImageInternalEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersUpdateExtensionImageInternalEndpoints0 = parametersUpdateExtensionImageInternalEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersUpdateExtensionImageInternalEndpoints0.command('internal-endpoints')
  .description($('Set catparametersUpdateExtensionImageInternalEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints1 = catparametersUpdateExtensionImageInternalEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersUpdateExtensionImageInternalEndpoints1 = parametersUpdateExtensionImageInternalEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersUpdateExtensionImageInternalEndpoints1.command('internal-endpoints')
  .description($('Remove catparametersUpdateExtensionImageInternalEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.port || options.protocol;
    if (anySubItem) {
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints2 = catparametersUpdateExtensionImageInternalEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersUpdateExtensionImageInternalEndpoints2 = parametersUpdateExtensionImageInternalEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersUpdateExtensionImageInternalEndpoints2.command('internal-endpoints')
  .description($('Remove catparametersUpdateExtensionImageInternalEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set local-resources
  var catparametersUpdateExtensionImageLocalResources0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources0 = catparametersUpdateExtensionImageLocalResources0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersUpdateExtensionImageLocalResources0 = parametersUpdateExtensionImageLocalResources0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersUpdateExtensionImageLocalResources0.command('local-resources')
  .description($('Set catparametersUpdateExtensionImageLocalResources0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove local-resources
  var catparametersUpdateExtensionImageLocalResources1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources1 = catparametersUpdateExtensionImageLocalResources1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersUpdateExtensionImageLocalResources1 = parametersUpdateExtensionImageLocalResources1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersUpdateExtensionImageLocalResources1.command('local-resources')
  .description($('Remove catparametersUpdateExtensionImageLocalResources1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--size-in-m-b', $('Remove the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.sizeInMB;
    if (anySubItem) {
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sizeInMB) {
        var subItemPath = options.path + "/sizeInMB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add local-resources
  var catparametersUpdateExtensionImageLocalResources2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources2 = catparametersUpdateExtensionImageLocalResources2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersUpdateExtensionImageLocalResources2 = parametersUpdateExtensionImageLocalResources2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersUpdateExtensionImageLocalResources2.command('local-resources')
  .description($('Remove catparametersUpdateExtensionImageLocalResources2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Add the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  HostedService AddExtension
  --service-name
  --parameters
=============================================
{
  "id":"",
  "privateConfiguration":"",
  "providerNamespace":"",
  "publicConfiguration":"",
  "thumbprint":"",
  "thumbprintAlgorithm":"",
  "type":"",
  "version":""
}
*/
  var hostedServiceAddExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceAddExtension.command('add-extension')
  .description($('add-extension method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--id <id>', $('id'))
  .option('--private-configuration <private-configuration>', $('private-configuration'))
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--public-configuration <public-configuration>', $('public-configuration'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('id = ' + options.id);
      parametersObj.id = options.id;
      cli.output.info('privateConfiguration = ' + options.privateConfiguration);
      parametersObj.privateConfiguration = options.privateConfiguration;
      cli.output.info('providerNamespace = ' + options.providerNamespace);
      parametersObj.providerNamespace = options.providerNamespace;
      cli.output.info('publicConfiguration = ' + options.publicConfiguration);
      parametersObj.publicConfiguration = options.publicConfiguration;
      cli.output.info('thumbprint = ' + options.thumbprint);
      parametersObj.thumbprint = options.thumbprint;
      cli.output.info('thumbprintAlgorithm = ' + options.thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = options.thumbprintAlgorithm;
      cli.output.info('type = ' + options.type);
      parametersObj.type = options.type;
      cli.output.info('version = ' + options.version);
      parametersObj.version = options.version;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.addExtension(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var hostedServiceAddExtensionaddExtensionParameters1 = hostedServiceAddExtension.category('parameters')
  .description($('Commands to manage parameter for your hosted service.'));
  var hostedServiceAddExtensionaddExtensionGenerate1 = hostedServiceAddExtensionaddExtensionParameters1.category('generate')
  .description($('Commands to generate parameter file for your hosted service.'));
  hostedServiceAddExtensionaddExtensionGenerate1.command('add-extension')
  .description($('Generate hostedServiceAddExtension parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"id\":\"\",\"privateConfiguration\":\"\",\"providerNamespace\":\"\",\"publicConfiguration\":\"\",\"thumbprint\":\"\",\"thumbprintAlgorithm\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'hostedServiceAddExtension_addExtension.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"id\":\"\",\r\n\"privateConfiguration\":\"\",\r\n\"providerNamespace\":\"\",\r\n\"publicConfiguration\":\"\",\r\n\"thumbprint\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  hostedServiceAddExtensionaddExtensionParameters1.command('patch')
  .description($('Command to patch hostedServiceAddExtension parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set hosted-service-add-extension-parameters
  var catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersAddExtensionHostedServiceHostedServiceAddExtensionParameters0 = catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters0.category('parameters')
  .description($('Commands to manage parameter for your hosted-service.'));
  var setparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters0 = parametersAddExtensionHostedServiceHostedServiceAddExtensionParameters0.category('set')
  .description($('Commands to set parameter file for your hosted-service.'));
  setparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters0.command('hosted-service-add-extension-parameters')
  .description($('Set catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--private-configuration <privateConfiguration>', $('Set the private-configuration value.'))
  .option('--provider-namespace <providerNamespace>', $('Set the provider-namespace value.'))
  .option('--public-configuration <publicConfiguration>', $('Set the public-configuration value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'privateConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfiguration) {
      if (options.parse && options.privateConfiguration) {
        options.privateConfiguration = JSON.parse(options.privateConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfiguration}]);
    }
    paramPath = options.path + '/' + 'providerNamespace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNamespace) {
      if (options.parse && options.providerNamespace) {
        options.providerNamespace = JSON.parse(options.providerNamespace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNamespace}]);
    }
    paramPath = options.path + '/' + 'publicConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfiguration) {
      if (options.parse && options.publicConfiguration) {
        options.publicConfiguration = JSON.parse(options.publicConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfiguration}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove hosted-service-add-extension-parameters
  var catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersAddExtensionHostedServiceHostedServiceAddExtensionParameters1 = catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters1.category('parameters')
  .description($('Commands to remove parameter for your hosted-service.'));
  var removeparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters1 = parametersAddExtensionHostedServiceHostedServiceAddExtensionParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your hosted-service.'));
  removeparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters1.command('hosted-service-add-extension-parameters')
  .description($('Remove catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--id', $('Remove the id value.'))
  .option('--private-configuration', $('Remove the private-configuration value.'))
  .option('--provider-namespace', $('Remove the provider-namespace value.'))
  .option('--public-configuration', $('Remove the public-configuration value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .option('--type', $('Remove the type value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.id || options.privateConfiguration || options.providerNamespace || options.publicConfiguration || options.thumbprint || options.thumbprintAlgorithm || options.type || options.version;
    if (anySubItem) {
      if (options.id) {
        var subItemPath = options.path + "/id";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateConfiguration) {
        var subItemPath = options.path + "/privateConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.providerNamespace) {
        var subItemPath = options.path + "/providerNamespace";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicConfiguration) {
        var subItemPath = options.path + "/publicConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        var subItemPath = options.path + "/thumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        var subItemPath = options.path + "/thumbprintAlgorithm";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add hosted-service-add-extension-parameters
  var catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersAddExtensionHostedServiceHostedServiceAddExtensionParameters2 = catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters2.category('parameters')
  .description($('Commands to add parameter for your hosted-service.'));
  var addparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters2 = parametersAddExtensionHostedServiceHostedServiceAddExtensionParameters2.category('add')
  .description($('Commands to add values in the parameter file for your hosted-service.'));
  addparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters2.command('hosted-service-add-extension-parameters')
  .description($('Remove catparametersAddExtensionHostedServiceHostedServiceAddExtensionParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--private-configuration <privateConfiguration>', $('Add the private-configuration value.'))
  .option('--provider-namespace <providerNamespace>', $('Add the provider-namespace value.'))
  .option('--public-configuration <publicConfiguration>', $('Add the public-configuration value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'privateConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfiguration) {
      if (options.parse && options.privateConfiguration) {
        options.privateConfiguration = JSON.parse(options.privateConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfiguration}]);
    }
    paramPath = '' + '/' + 'providerNamespace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNamespace) {
      if (options.parse && options.providerNamespace) {
        options.providerNamespace = JSON.parse(options.providerNamespace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNamespace}]);
    }
    paramPath = '' + '/' + 'publicConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfiguration) {
      if (options.parse && options.publicConfiguration) {
        options.publicConfiguration = JSON.parse(options.publicConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfiguration}]);
    }
    paramPath = '' + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  HostedService CheckNameAvailability
  --service-name
*/
  var hostedServiceCheckNameAvailability = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceCheckNameAvailability.command('check-name-availability')
  .description($('check-name-availability method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.checkNameAvailability(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService Create
  --parameters
=============================================
{
  "affinityGroup":"",
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "location":"",
  "reverseDnsFqdn":"",
  "serviceName":""
}
*/
  var hostedServiceCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceCreate.command('create')
  .description($('create method to manage your hosted service.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.create(parametersObj, _);
    cli.output.json(result);
  });
  var hostedServiceCreatecreateParameters0 = hostedServiceCreate.category('parameters')
  .description($('Commands to manage parameter for your hosted service.'));
  var hostedServiceCreatecreateGenerate0 = hostedServiceCreatecreateParameters0.category('generate')
  .description($('Commands to generate parameter file for your hosted service.'));
  hostedServiceCreatecreateGenerate0.command('create')
  .description($('Generate hostedServiceCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"affinityGroup\":\"\",\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"location\":\"\",\"reverseDnsFqdn\":\"\",\"serviceName\":\"\"}', _);
    var filePath = 'hostedServiceCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"affinityGroup\":\"\",\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"location\":\"\",\r\n\"reverseDnsFqdn\":\"\",\r\n\"serviceName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  hostedServiceCreatecreateParameters0.command('patch')
  .description($('Command to patch hostedServiceCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters0 = catparametersCreateHostedServiceHostedServiceCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your hosted-service.'));
  var setparametersCreateHostedServiceHostedServiceCreateParameters0 = parametersCreateHostedServiceHostedServiceCreateParameters0.category('set')
  .description($('Commands to set parameter file for your hosted-service.'));
  setparametersCreateHostedServiceHostedServiceCreateParameters0.command('hosted-service-create-parameters')
  .description($('Set catparametersCreateHostedServiceHostedServiceCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--affinity-group <affinityGroup>', $('Set the affinity-group value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'affinityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.affinityGroup) {
      if (options.parse && options.affinityGroup) {
        options.affinityGroup = JSON.parse(options.affinityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.affinityGroup}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    paramPath = options.path + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters1 = catparametersCreateHostedServiceHostedServiceCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your hosted-service.'));
  var removeparametersCreateHostedServiceHostedServiceCreateParameters1 = parametersCreateHostedServiceHostedServiceCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your hosted-service.'));
  removeparametersCreateHostedServiceHostedServiceCreateParameters1.command('hosted-service-create-parameters')
  .description($('Remove catparametersCreateHostedServiceHostedServiceCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--affinity-group', $('Remove the affinity-group value.'))
  .option('--description', $('Remove the description value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--label', $('Remove the label value.'))
  .option('--location', $('Remove the location value.'))
  .option('--reverse-dns-fqdn', $('Remove the reverse-dns-fqdn value.'))
  .option('--service-name', $('Remove the service-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.affinityGroup || options.description || options.extendedProperties || options.label || options.location || options.reverseDnsFqdn || options.serviceName;
    if (anySubItem) {
      if (options.affinityGroup) {
        var subItemPath = options.path + "/affinityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        var subItemPath = options.path + "/extendedProperties";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        var subItemPath = options.path + "/location";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reverseDnsFqdn) {
        var subItemPath = options.path + "/reverseDnsFqdn";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serviceName) {
        var subItemPath = options.path + "/serviceName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters2 = catparametersCreateHostedServiceHostedServiceCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your hosted-service.'));
  var addparametersCreateHostedServiceHostedServiceCreateParameters2 = parametersCreateHostedServiceHostedServiceCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your hosted-service.'));
  addparametersCreateHostedServiceHostedServiceCreateParameters2.command('hosted-service-create-parameters')
  .description($('Remove catparametersCreateHostedServiceHostedServiceCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--affinity-group <affinityGroup>', $('Add the affinity-group value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Add the reverse-dns-fqdn value.'))
  .option('--service-name <serviceName>', $('Add the service-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'affinityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.affinityGroup) {
      if (options.parse && options.affinityGroup) {
        options.affinityGroup = JSON.parse(options.affinityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.affinityGroup}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    paramPath = '' + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  HostedService Delete
  --service-name
*/
  var hostedServiceDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceDelete.command('delete')
  .description($('delete method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteMethod(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService DeleteAll
  --service-name
*/
  var hostedServiceDeleteAll = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceDeleteAll.command('delete-all')
  .description($('delete-all method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteAll(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService DeleteExtension
  --service-name
  --extension-id
*/
  var hostedServiceDeleteExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceDeleteExtension.command('delete-extension')
  .description($('delete-extension method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('extensionId = ' + options.extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteExtension(options.serviceName, options.extensionId, _);
    cli.output.json(result);
  });
/*
  HostedService Get
  --service-name
*/
  var hostedServiceGet = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceGet.command('get')
  .description($('get method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.get(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService GetDetailed
  --service-name
*/
  var hostedServiceGetDetailed = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceGetDetailed.command('get-detailed')
  .description($('get-detailed method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.getDetailed(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService GetExtension
  --service-name
  --extension-id
*/
  var hostedServiceGetExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceGetExtension.command('get-extension')
  .description($('get-extension method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('extensionId = ' + options.extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.getExtension(options.serviceName, options.extensionId, _);
    cli.output.json(result);
  });
/*
  HostedService List
*/
  var hostedServiceList = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceList.command('list')
  .description($('list method to manage your hosted service.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.list(_);
    cli.output.json(result);
  });
/*
  HostedService ListAvailableExtensions
*/
  var hostedServiceListAvailableExtensions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceListAvailableExtensions.command('list-available-extensions')
  .description($('list-available-extensions method to manage your hosted service.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listAvailableExtensions(_);
    cli.output.json(result);
  });
/*
  HostedService ListExtensions
  --service-name
*/
  var hostedServiceListExtensions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceListExtensions.command('list-extensions')
  .description($('list-extensions method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listExtensions(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService ListExtensionVersions
  --provider-namespace
  --extension-type
*/
  var hostedServiceListExtensionVersions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceListExtensionVersions.command('list-extension-versions')
  .description($('list-extension-versions method to manage your hosted service.'))
  .usage('[options]')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--extension-type <extension-type>', $('extension-type'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('providerNamespace = ' + options.providerNamespace);
    cli.output.info('extensionType = ' + options.extensionType);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listExtensionVersions(options.providerNamespace, options.extensionType, _);
    cli.output.json(result);
  });
/*
  HostedService Update
  --service-name
  --parameters
=============================================
{
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "reverseDnsFqdn":""
}
*/
  var hostedServiceUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceUpdate.command('update')
  .description($('update method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.update(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var hostedServiceUpdateupdateParameters1 = hostedServiceUpdate.category('parameters')
  .description($('Commands to manage parameter for your hosted service.'));
  var hostedServiceUpdateupdateGenerate1 = hostedServiceUpdateupdateParameters1.category('generate')
  .description($('Commands to generate parameter file for your hosted service.'));
  hostedServiceUpdateupdateGenerate1.command('update')
  .description($('Generate hostedServiceUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"reverseDnsFqdn\":\"\"}', _);
    var filePath = 'hostedServiceUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"reverseDnsFqdn\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  hostedServiceUpdateupdateParameters1.command('patch')
  .description($('Command to patch hostedServiceUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters0 = catparametersUpdateHostedServiceHostedServiceUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your hosted-service.'));
  var setparametersUpdateHostedServiceHostedServiceUpdateParameters0 = parametersUpdateHostedServiceHostedServiceUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your hosted-service.'));
  setparametersUpdateHostedServiceHostedServiceUpdateParameters0.command('hosted-service-update-parameters')
  .description($('Set catparametersUpdateHostedServiceHostedServiceUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters1 = catparametersUpdateHostedServiceHostedServiceUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your hosted-service.'));
  var removeparametersUpdateHostedServiceHostedServiceUpdateParameters1 = parametersUpdateHostedServiceHostedServiceUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your hosted-service.'));
  removeparametersUpdateHostedServiceHostedServiceUpdateParameters1.command('hosted-service-update-parameters')
  .description($('Remove catparametersUpdateHostedServiceHostedServiceUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--label', $('Remove the label value.'))
  .option('--reverse-dns-fqdn', $('Remove the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.extendedProperties || options.label || options.reverseDnsFqdn;
    if (anySubItem) {
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        var subItemPath = options.path + "/extendedProperties";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reverseDnsFqdn) {
        var subItemPath = options.path + "/reverseDnsFqdn";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters2 = catparametersUpdateHostedServiceHostedServiceUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your hosted-service.'));
  var addparametersUpdateHostedServiceHostedServiceUpdateParameters2 = parametersUpdateHostedServiceHostedServiceUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your hosted-service.'));
  addparametersUpdateHostedServiceHostedServiceUpdateParameters2.command('hosted-service-update-parameters')
  .description($('Remove catparametersUpdateHostedServiceHostedServiceUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Add the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  LoadBalancer Create
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "frontendIPConfiguration":{
    "staticVirtualNetworkIPAddress":"",
    "subnetName":"",
    "type":""
  },
  "name":""
}
*/
  var loadBalancerCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer').description($('Commands to manage your load balancer.'));
  loadBalancerCreate.command('create')
  .description($('create method to manage your load balancer.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancers.create(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var loadBalancerCreatecreateParameters2 = loadBalancerCreate.category('parameters')
  .description($('Commands to manage parameter for your load balancer.'));
  var loadBalancerCreatecreateGenerate2 = loadBalancerCreatecreateParameters2.category('generate')
  .description($('Commands to generate parameter file for your load balancer.'));
  loadBalancerCreatecreateGenerate2.command('create')
  .description($('Generate loadBalancerCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}', _);
    var filePath = 'loadBalancerCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  loadBalancerCreatecreateParameters2.command('patch')
  .description($('Command to patch loadBalancerCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-create-parameters
  var catparametersCreateLoadBalancerLoadBalancerCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerLoadBalancerCreateParameters0 = catparametersCreateLoadBalancerLoadBalancerCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersCreateLoadBalancerLoadBalancerCreateParameters0 = parametersCreateLoadBalancerLoadBalancerCreateParameters0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersCreateLoadBalancerLoadBalancerCreateParameters0.command('load-balancer-create-parameters')
  .description($('Set catparametersCreateLoadBalancerLoadBalancerCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-create-parameters
  var catparametersCreateLoadBalancerLoadBalancerCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerLoadBalancerCreateParameters1 = catparametersCreateLoadBalancerLoadBalancerCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersCreateLoadBalancerLoadBalancerCreateParameters1 = parametersCreateLoadBalancerLoadBalancerCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersCreateLoadBalancerLoadBalancerCreateParameters1.command('load-balancer-create-parameters')
  .description($('Remove catparametersCreateLoadBalancerLoadBalancerCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.frontendIPConfiguration || options.name;
    if (anySubItem) {
      if (options.frontendIPConfiguration) {
        var subItemPath = options.path + "/frontendIPConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-create-parameters
  var catparametersCreateLoadBalancerLoadBalancerCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerLoadBalancerCreateParameters2 = catparametersCreateLoadBalancerLoadBalancerCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersCreateLoadBalancerLoadBalancerCreateParameters2 = parametersCreateLoadBalancerLoadBalancerCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersCreateLoadBalancerLoadBalancerCreateParameters2.command('load-balancer-create-parameters')
  .description($('Remove catparametersCreateLoadBalancerLoadBalancerCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set frontend-ip-configuration
  var catparametersCreateLoadBalancerFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerFrontendIPConfiguration0 = catparametersCreateLoadBalancerFrontendIPConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersCreateLoadBalancerFrontendIPConfiguration0 = parametersCreateLoadBalancerFrontendIPConfiguration0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersCreateLoadBalancerFrontendIPConfiguration0.command('frontend-ip-configuration')
  .description($('Set catparametersCreateLoadBalancerFrontendIPConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove frontend-ip-configuration
  var catparametersCreateLoadBalancerFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerFrontendIPConfiguration1 = catparametersCreateLoadBalancerFrontendIPConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersCreateLoadBalancerFrontendIPConfiguration1 = parametersCreateLoadBalancerFrontendIPConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersCreateLoadBalancerFrontendIPConfiguration1.command('frontend-ip-configuration')
  .description($('Remove catparametersCreateLoadBalancerFrontendIPConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/frontendIPConfiguration';
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName || options.type;
    if (anySubItem) {
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        var subItemPath = options.path + "/subnetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add frontend-ip-configuration
  var catparametersCreateLoadBalancerFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerFrontendIPConfiguration2 = catparametersCreateLoadBalancerFrontendIPConfiguration2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersCreateLoadBalancerFrontendIPConfiguration2 = parametersCreateLoadBalancerFrontendIPConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersCreateLoadBalancerFrontendIPConfiguration2.command('frontend-ip-configuration')
  .description($('Remove catparametersCreateLoadBalancerFrontendIPConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/frontendIPConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  LoadBalancer Delete
  --service-name
  --deployment-name
  --load-balancer-name
*/
  var loadBalancerDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer').description($('Commands to manage your load balancer.'));
  loadBalancerDelete.command('delete')
  .description($('delete method to manage your load balancer.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--load-balancer-name <load-balancer-name>', $('load-balancer-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('loadBalancerName = ' + options.loadBalancerName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancers.deleteMethod(options.serviceName, options.deploymentName, options.loadBalancerName, _);
    cli.output.json(result);
  });
/*
  LoadBalancer Update
  --service-name
  --deployment-name
  --load-balancer-name
  --parameters
=============================================
{
  "frontendIPConfiguration":{
    "staticVirtualNetworkIPAddress":"",
    "subnetName":"",
    "type":""
  },
  "name":""
}
*/
  var loadBalancerUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer').description($('Commands to manage your load balancer.'));
  loadBalancerUpdate.command('update')
  .description($('update method to manage your load balancer.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--load-balancer-name <load-balancer-name>', $('load-balancer-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('loadBalancerName = ' + options.loadBalancerName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancers.update(options.serviceName, options.deploymentName, options.loadBalancerName, parametersObj, _);
    cli.output.json(result);
  });
  var loadBalancerUpdateupdateParameters3 = loadBalancerUpdate.category('parameters')
  .description($('Commands to manage parameter for your load balancer.'));
  var loadBalancerUpdateupdateGenerate3 = loadBalancerUpdateupdateParameters3.category('generate')
  .description($('Commands to generate parameter file for your load balancer.'));
  loadBalancerUpdateupdateGenerate3.command('update')
  .description($('Generate loadBalancerUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}', _);
    var filePath = 'loadBalancerUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  loadBalancerUpdateupdateParameters3.command('patch')
  .description($('Command to patch loadBalancerUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-update-parameters
  var catparametersUpdateLoadBalancerLoadBalancerUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerLoadBalancerUpdateParameters0 = catparametersUpdateLoadBalancerLoadBalancerUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersUpdateLoadBalancerLoadBalancerUpdateParameters0 = parametersUpdateLoadBalancerLoadBalancerUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersUpdateLoadBalancerLoadBalancerUpdateParameters0.command('load-balancer-update-parameters')
  .description($('Set catparametersUpdateLoadBalancerLoadBalancerUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-update-parameters
  var catparametersUpdateLoadBalancerLoadBalancerUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerLoadBalancerUpdateParameters1 = catparametersUpdateLoadBalancerLoadBalancerUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersUpdateLoadBalancerLoadBalancerUpdateParameters1 = parametersUpdateLoadBalancerLoadBalancerUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersUpdateLoadBalancerLoadBalancerUpdateParameters1.command('load-balancer-update-parameters')
  .description($('Remove catparametersUpdateLoadBalancerLoadBalancerUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.frontendIPConfiguration || options.name;
    if (anySubItem) {
      if (options.frontendIPConfiguration) {
        var subItemPath = options.path + "/frontendIPConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-update-parameters
  var catparametersUpdateLoadBalancerLoadBalancerUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerLoadBalancerUpdateParameters2 = catparametersUpdateLoadBalancerLoadBalancerUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersUpdateLoadBalancerLoadBalancerUpdateParameters2 = parametersUpdateLoadBalancerLoadBalancerUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersUpdateLoadBalancerLoadBalancerUpdateParameters2.command('load-balancer-update-parameters')
  .description($('Remove catparametersUpdateLoadBalancerLoadBalancerUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set frontend-ip-configuration
  var catparametersUpdateLoadBalancerFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerFrontendIPConfiguration0 = catparametersUpdateLoadBalancerFrontendIPConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersUpdateLoadBalancerFrontendIPConfiguration0 = parametersUpdateLoadBalancerFrontendIPConfiguration0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersUpdateLoadBalancerFrontendIPConfiguration0.command('frontend-ip-configuration')
  .description($('Set catparametersUpdateLoadBalancerFrontendIPConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove frontend-ip-configuration
  var catparametersUpdateLoadBalancerFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerFrontendIPConfiguration1 = catparametersUpdateLoadBalancerFrontendIPConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersUpdateLoadBalancerFrontendIPConfiguration1 = parametersUpdateLoadBalancerFrontendIPConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersUpdateLoadBalancerFrontendIPConfiguration1.command('frontend-ip-configuration')
  .description($('Remove catparametersUpdateLoadBalancerFrontendIPConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/frontendIPConfiguration';
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName || options.type;
    if (anySubItem) {
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        var subItemPath = options.path + "/subnetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add frontend-ip-configuration
  var catparametersUpdateLoadBalancerFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerFrontendIPConfiguration2 = catparametersUpdateLoadBalancerFrontendIPConfiguration2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersUpdateLoadBalancerFrontendIPConfiguration2 = parametersUpdateLoadBalancerFrontendIPConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersUpdateLoadBalancerFrontendIPConfiguration2.command('frontend-ip-configuration')
  .description($('Remove catparametersUpdateLoadBalancerFrontendIPConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/frontendIPConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  OperatingSystem List
*/
  var operatingSystemList = cli.category('invoke').description('Commands to invoke service management operations.').category('operating-system').description($('Commands to manage your operating system.'));
  operatingSystemList.command('list')
  .description($('list method to manage your operating system.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.operatingSystems.list(_);
    cli.output.json(result);
  });
/*
  OperatingSystem ListFamilies
*/
  var operatingSystemListFamilies = cli.category('invoke').description('Commands to invoke service management operations.').category('operating-system').description($('Commands to manage your operating system.'));
  operatingSystemListFamilies.command('list-families')
  .description($('list-families method to manage your operating system.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.operatingSystems.listFamilies(_);
    cli.output.json(result);
  });
/*
  ServiceCertificate Create
  --service-name
  --parameters
=============================================
{
  "certificateFormat":0,
  "data":[
  ],
  "password":""
}
*/
  var serviceCertificateCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateCreate.command('create')
  .description($('create method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.create(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var serviceCertificateCreatecreateParameters1 = serviceCertificateCreate.category('parameters')
  .description($('Commands to manage parameter for your service certificate.'));
  var serviceCertificateCreatecreateGenerate1 = serviceCertificateCreatecreateParameters1.category('generate')
  .description($('Commands to generate parameter file for your service certificate.'));
  serviceCertificateCreatecreateGenerate1.command('create')
  .description($('Generate serviceCertificateCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"certificateFormat\":0,\"data\":[],\"password\":\"\"}', _);
    var filePath = 'serviceCertificateCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"certificateFormat\":0,\r\n\"data\":[\r\n],\r\n\"password\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  serviceCertificateCreatecreateParameters1.command('patch')
  .description($('Command to patch serviceCertificateCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters0 = catparametersCreateServiceCertificateServiceCertificateCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your service-certificate.'));
  var setparametersCreateServiceCertificateServiceCertificateCreateParameters0 = parametersCreateServiceCertificateServiceCertificateCreateParameters0.category('set')
  .description($('Commands to set parameter file for your service-certificate.'));
  setparametersCreateServiceCertificateServiceCertificateCreateParameters0.command('service-certificate-create-parameters')
  .description($('Set catparametersCreateServiceCertificateServiceCertificateCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-format <certificateFormat>', $('Set the certificate-format value.'))
  .option('--data <data>', $('Set the data value.'))
  .option('--password <password>', $('Set the password value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'certificateFormat';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateFormat) {
      if (options.parse && options.certificateFormat) {
        options.certificateFormat = JSON.parse(options.certificateFormat);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateFormat}]);
    }
    paramPath = options.path + '/' + 'data';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.data) {
      if (options.parse && options.data) {
        options.data = JSON.parse(options.data);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.data}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters1 = catparametersCreateServiceCertificateServiceCertificateCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersCreateServiceCertificateServiceCertificateCreateParameters1 = parametersCreateServiceCertificateServiceCertificateCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersCreateServiceCertificateServiceCertificateCreateParameters1.command('service-certificate-create-parameters')
  .description($('Remove catparametersCreateServiceCertificateServiceCertificateCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--certificate-format', $('Remove the certificate-format value.'))
  .option('--data', $('Remove the data value.'))
  .option('--password', $('Remove the password value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.certificateFormat || options.data || options.password;
    if (anySubItem) {
      if (options.certificateFormat) {
        var subItemPath = options.path + "/certificateFormat";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.data) {
        var subItemPath = options.path + "/data";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        var subItemPath = options.path + "/password";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters2 = catparametersCreateServiceCertificateServiceCertificateCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersCreateServiceCertificateServiceCertificateCreateParameters2 = parametersCreateServiceCertificateServiceCertificateCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersCreateServiceCertificateServiceCertificateCreateParameters2.command('service-certificate-create-parameters')
  .description($('Remove catparametersCreateServiceCertificateServiceCertificateCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-format <certificateFormat>', $('Add the certificate-format value.'))
  .option('--data <data>', $('Add the data value.'))
  .option('--password <password>', $('Add the password value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'certificateFormat';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateFormat) {
      if (options.parse && options.certificateFormat) {
        options.certificateFormat = JSON.parse(options.certificateFormat);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateFormat}]);
    }
    paramPath = '' + '/' + 'data';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.data) {
      if (options.parse && options.data) {
        options.data = JSON.parse(options.data);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.data}]);
    }
    paramPath = '' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove certificate-format
  var catparametersCreateServiceCertificateCertificateFormat1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateCertificateFormat1 = catparametersCreateServiceCertificateCertificateFormat1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersCreateServiceCertificateCertificateFormat1 = parametersCreateServiceCertificateCertificateFormat1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersCreateServiceCertificateCertificateFormat1.command('certificate-format')
  .description($('Remove catparametersCreateServiceCertificateCertificateFormat1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificateFormat';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add certificate-format
  var catparametersCreateServiceCertificateCertificateFormat2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateCertificateFormat2 = catparametersCreateServiceCertificateCertificateFormat2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersCreateServiceCertificateCertificateFormat2 = parametersCreateServiceCertificateCertificateFormat2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersCreateServiceCertificateCertificateFormat2.command('certificate-format')
  .description($('Remove catparametersCreateServiceCertificateCertificateFormat2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificateFormat' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ServiceCertificate Delete
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateDelete.command('delete')
  .description($('delete method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('serviceName = ' + options.serviceName);
      parametersObj.serviceName = options.serviceName;
      cli.output.info('thumbprint = ' + options.thumbprint);
      parametersObj.thumbprint = options.thumbprint;
      cli.output.info('thumbprintAlgorithm = ' + options.thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = options.thumbprintAlgorithm;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.deleteMethod(parametersObj, _);
    cli.output.json(result);
  });
  var serviceCertificateDeletedeleteParameters0 = serviceCertificateDelete.category('parameters')
  .description($('Commands to manage parameter for your service certificate.'));
  var serviceCertificateDeletedeleteGenerate0 = serviceCertificateDeletedeleteParameters0.category('generate')
  .description($('Commands to generate parameter file for your service certificate.'));
  serviceCertificateDeletedeleteGenerate0.command('delete')
  .description($('Generate serviceCertificateDelete parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"serviceName\":\"\",\"thumbprint\":\"\",\"thumbprintAlgorithm\":\"\"}', _);
    var filePath = 'serviceCertificateDelete_delete.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"serviceName\":\"\",\r\n\"thumbprint\":\"\",\r\n\"thumbprintAlgorithm\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  serviceCertificateDeletedeleteParameters0.command('patch')
  .description($('Command to patch serviceCertificateDelete parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set service-certificate-delete-parameters
  var catparametersDeleteServiceCertificateServiceCertificateDeleteParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersDeleteServiceCertificateServiceCertificateDeleteParameters0 = catparametersDeleteServiceCertificateServiceCertificateDeleteParameters0.category('parameters')
  .description($('Commands to manage parameter for your service-certificate.'));
  var setparametersDeleteServiceCertificateServiceCertificateDeleteParameters0 = parametersDeleteServiceCertificateServiceCertificateDeleteParameters0.category('set')
  .description($('Commands to set parameter file for your service-certificate.'));
  setparametersDeleteServiceCertificateServiceCertificateDeleteParameters0.command('service-certificate-delete-parameters')
  .description($('Set catparametersDeleteServiceCertificateServiceCertificateDeleteParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove service-certificate-delete-parameters
  var catparametersDeleteServiceCertificateServiceCertificateDeleteParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersDeleteServiceCertificateServiceCertificateDeleteParameters1 = catparametersDeleteServiceCertificateServiceCertificateDeleteParameters1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersDeleteServiceCertificateServiceCertificateDeleteParameters1 = parametersDeleteServiceCertificateServiceCertificateDeleteParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersDeleteServiceCertificateServiceCertificateDeleteParameters1.command('service-certificate-delete-parameters')
  .description($('Remove catparametersDeleteServiceCertificateServiceCertificateDeleteParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--service-name', $('Remove the service-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.serviceName || options.thumbprint || options.thumbprintAlgorithm;
    if (anySubItem) {
      if (options.serviceName) {
        var subItemPath = options.path + "/serviceName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        var subItemPath = options.path + "/thumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        var subItemPath = options.path + "/thumbprintAlgorithm";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add service-certificate-delete-parameters
  var catparametersDeleteServiceCertificateServiceCertificateDeleteParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersDeleteServiceCertificateServiceCertificateDeleteParameters2 = catparametersDeleteServiceCertificateServiceCertificateDeleteParameters2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersDeleteServiceCertificateServiceCertificateDeleteParameters2 = parametersDeleteServiceCertificateServiceCertificateDeleteParameters2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersDeleteServiceCertificateServiceCertificateDeleteParameters2.command('service-certificate-delete-parameters')
  .description($('Remove catparametersDeleteServiceCertificateServiceCertificateDeleteParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Add the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = '' + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ServiceCertificate Get
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateGet = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateGet.command('get')
  .description($('get method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('serviceName = ' + options.serviceName);
      parametersObj.serviceName = options.serviceName;
      cli.output.info('thumbprint = ' + options.thumbprint);
      parametersObj.thumbprint = options.thumbprint;
      cli.output.info('thumbprintAlgorithm = ' + options.thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = options.thumbprintAlgorithm;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.get(parametersObj, _);
    cli.output.json(result);
  });
  var serviceCertificateGetgetParameters0 = serviceCertificateGet.category('parameters')
  .description($('Commands to manage parameter for your service certificate.'));
  var serviceCertificateGetgetGenerate0 = serviceCertificateGetgetParameters0.category('generate')
  .description($('Commands to generate parameter file for your service certificate.'));
  serviceCertificateGetgetGenerate0.command('get')
  .description($('Generate serviceCertificateGet parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"serviceName\":\"\",\"thumbprint\":\"\",\"thumbprintAlgorithm\":\"\"}', _);
    var filePath = 'serviceCertificateGet_get.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"serviceName\":\"\",\r\n\"thumbprint\":\"\",\r\n\"thumbprintAlgorithm\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  serviceCertificateGetgetParameters0.command('patch')
  .description($('Command to patch serviceCertificateGet parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set service-certificate-get-parameters
  var catparametersGetServiceCertificateServiceCertificateGetParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersGetServiceCertificateServiceCertificateGetParameters0 = catparametersGetServiceCertificateServiceCertificateGetParameters0.category('parameters')
  .description($('Commands to manage parameter for your service-certificate.'));
  var setparametersGetServiceCertificateServiceCertificateGetParameters0 = parametersGetServiceCertificateServiceCertificateGetParameters0.category('set')
  .description($('Commands to set parameter file for your service-certificate.'));
  setparametersGetServiceCertificateServiceCertificateGetParameters0.command('service-certificate-get-parameters')
  .description($('Set catparametersGetServiceCertificateServiceCertificateGetParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove service-certificate-get-parameters
  var catparametersGetServiceCertificateServiceCertificateGetParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersGetServiceCertificateServiceCertificateGetParameters1 = catparametersGetServiceCertificateServiceCertificateGetParameters1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersGetServiceCertificateServiceCertificateGetParameters1 = parametersGetServiceCertificateServiceCertificateGetParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersGetServiceCertificateServiceCertificateGetParameters1.command('service-certificate-get-parameters')
  .description($('Remove catparametersGetServiceCertificateServiceCertificateGetParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--service-name', $('Remove the service-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.serviceName || options.thumbprint || options.thumbprintAlgorithm;
    if (anySubItem) {
      if (options.serviceName) {
        var subItemPath = options.path + "/serviceName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        var subItemPath = options.path + "/thumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        var subItemPath = options.path + "/thumbprintAlgorithm";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add service-certificate-get-parameters
  var catparametersGetServiceCertificateServiceCertificateGetParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersGetServiceCertificateServiceCertificateGetParameters2 = catparametersGetServiceCertificateServiceCertificateGetParameters2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersGetServiceCertificateServiceCertificateGetParameters2 = parametersGetServiceCertificateServiceCertificateGetParameters2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersGetServiceCertificateServiceCertificateGetParameters2.command('service-certificate-get-parameters')
  .description($('Remove catparametersGetServiceCertificateServiceCertificateGetParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Add the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = '' + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ServiceCertificate List
  --service-name
*/
  var serviceCertificateList = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateList.command('list')
  .description($('list method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.list(options.serviceName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk CreateDataDisk
  --service-name
  --deployment-name
  --role-name
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":0,
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":"",
  "sourceMediaLinkUri":""
}
*/
  var virtualMachineDiskCreateDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskCreateDataDisk.command('create-data-disk')
  .description($('create-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.createDataDisk(options.serviceName, options.deploymentName, options.roleName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskCreateDataDiskcreateDataDiskParameters3 = virtualMachineDiskCreateDataDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskCreateDataDiskcreateDataDiskGenerate3 = virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskCreateDataDiskcreateDataDiskGenerate3.command('create-data-disk')
  .description($('Generate virtualMachineDiskCreateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":0,\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\",\"sourceMediaLinkUri\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDataDisk_createDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":0,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLinkUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.command('virtual-machine-data-disk-create-parameters')
  .description($('Set catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link-uri <sourceMediaLinkUri>', $('Set the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLinkUri) {
      if (options.parse && options.sourceMediaLinkUri) {
        options.sourceMediaLinkUri = JSON.parse(options.sourceMediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLinkUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.command('virtual-machine-data-disk-create-parameters')
  .description($('Remove catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link-uri', $('Remove the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hostCaching || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLinkUri || options.name || options.sourceMediaLinkUri;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        var subItemPath = options.path + "/logicalDiskSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        var subItemPath = options.path + "/logicalUnitNumber";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        var subItemPath = options.path + "/mediaLinkUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLinkUri) {
        var subItemPath = options.path + "/sourceMediaLinkUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.command('virtual-machine-data-disk-create-parameters')
  .description($('Remove catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link-uri <sourceMediaLinkUri>', $('Add the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '' + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'sourceMediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLinkUri) {
      if (options.parse && options.sourceMediaLinkUri) {
        options.sourceMediaLinkUri = JSON.parse(options.sourceMediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLinkUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk CreateDisk
  --parameters
=============================================
{
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":""
}
*/
  var virtualMachineDiskCreateDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskCreateDisk.command('create-disk')
  .description($('create-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.createDisk(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskCreateDiskcreateDiskParameters0 = virtualMachineDiskCreateDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskCreateDiskcreateDiskGenerate0 = virtualMachineDiskCreateDiskcreateDiskParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskCreateDiskcreateDiskGenerate0.command('create-disk')
  .description($('Generate virtualMachineDiskCreateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDisk_createDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskCreateDiskcreateDiskParameters0.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.command('virtual-machine-disk-create-parameters')
  .description($('Set catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.command('virtual-machine-disk-create-parameters')
  .description($('Remove catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.label || options.mediaLinkUri || options.name || options.operatingSystemType;
    if (anySubItem) {
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        var subItemPath = options.path + "/mediaLinkUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        var subItemPath = options.path + "/operatingSystemType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2.command('virtual-machine-disk-create-parameters')
  .description($('Remove catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk DeleteDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskDeleteDataDisk.command('delete-data-disk')
  .description($('delete-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var logicalUnitNumberFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(logicalUnitNumberFileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.info('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.deleteDataDisk(options.serviceName, options.deploymentName, options.roleName, options.logicalUnitNumber, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk DeleteDisk
  --name
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskDeleteDisk.command('delete-disk')
  .description($('delete-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.deleteDisk(options.name, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk GetDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
*/
  var virtualMachineDiskGetDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskGetDataDisk.command('get-data-disk')
  .description($('get-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var logicalUnitNumberFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(logicalUnitNumberFileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.info('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.getDataDisk(options.serviceName, options.deploymentName, options.roleName, options.logicalUnitNumber, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk GetDisk
  --name
*/
  var virtualMachineDiskGetDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskGetDisk.command('get-disk')
  .description($('get-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.getDisk(options.name, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk ListDisks
*/
  var virtualMachineDiskListDisks = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskListDisks.command('list-disks')
  .description($('list-disks method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.listDisks(_);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk UpdateDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":0,
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":""
}
*/
  var virtualMachineDiskUpdateDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskUpdateDataDisk.command('update-data-disk')
  .description($('update-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var logicalUnitNumberFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(logicalUnitNumberFileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.info('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDataDisk(options.serviceName, options.deploymentName, options.roleName, options.logicalUnitNumber, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4 = virtualMachineDiskUpdateDataDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskUpdateDataDiskupdateDataDiskGenerate4 = virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskUpdateDataDiskupdateDataDiskGenerate4.command('update-data-disk')
  .description($('Generate virtualMachineDiskUpdateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":0,\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\"}', _);
    var filePath = 'virtualMachineDiskUpdateDataDisk_updateDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":0,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.command('virtual-machine-data-disk-update-parameters')
  .description($('Set catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.command('virtual-machine-data-disk-update-parameters')
  .description($('Remove catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hostCaching || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLinkUri || options.name;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        var subItemPath = options.path + "/logicalDiskSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        var subItemPath = options.path + "/logicalUnitNumber";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        var subItemPath = options.path + "/mediaLinkUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.command('virtual-machine-data-disk-update-parameters')
  .description($('Remove catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '' + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk UpdateDisk
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskUpdateDisk.command('update-disk')
  .description($('update-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDisk(options.name, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskUpdateDiskupdateDiskParameters1 = virtualMachineDiskUpdateDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskUpdateDiskupdateDiskGenerate1 = virtualMachineDiskUpdateDiskupdateDiskParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskUpdateDiskupdateDiskGenerate1.command('update-disk')
  .description($('Generate virtualMachineDiskUpdateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDisk_updateDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskUpdateDiskupdateDiskParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('virtual-machine-disk-update-parameters')
  .description($('Set catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--has-operating-system', $('Remove the has-operating-system value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hasOperatingSystem || options.label || options.mediaLinkUri || options.name || options.operatingSystemType || options.resizedSizeInGB;
    if (anySubItem) {
      if (options.hasOperatingSystem) {
        var subItemPath = options.path + "/hasOperatingSystem";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        var subItemPath = options.path + "/mediaLinkUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        var subItemPath = options.path + "/operatingSystemType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Add the has-operating-system value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk UpdateDiskSize
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDiskSize = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskUpdateDiskSize.command('update-disk-size')
  .description($('update-disk-size method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDiskSize(options.name, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1 = virtualMachineDiskUpdateDiskSize.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskUpdateDiskSizeupdateDiskSizeGenerate1 = virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskUpdateDiskSizeupdateDiskSizeGenerate1.command('update-disk-size')
  .description($('Generate virtualMachineDiskUpdateDiskSize parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDiskSize_updateDiskSize.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDiskSize parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('virtual-machine-disk-update-parameters')
  .description($('Set catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--has-operating-system', $('Remove the has-operating-system value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hasOperatingSystem || options.label || options.mediaLinkUri || options.name || options.operatingSystemType || options.resizedSizeInGB;
    if (anySubItem) {
      if (options.hasOperatingSystem) {
        var subItemPath = options.path + "/hasOperatingSystem";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        var subItemPath = options.path + "/mediaLinkUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        var subItemPath = options.path + "/operatingSystemType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Add the has-operating-system value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineExtension List
*/
  var virtualMachineExtensionList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-extension').description($('Commands to manage your virtual machine extension.'));
  virtualMachineExtensionList.command('list')
  .description($('list method to manage your virtual machine extension.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineExtensions.list(_);
    cli.output.json(result);
  });
/*
  VirtualMachineExtension ListVersions
  --publisher-name
  --extension-name
*/
  var virtualMachineExtensionListVersions = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-extension').description($('Commands to manage your virtual machine extension.'));
  virtualMachineExtensionListVersions.command('list-versions')
  .description($('list-versions method to manage your virtual machine extension.'))
  .usage('[options]')
  .option('--publisher-name <publisher-name>', $('publisher-name'))
  .option('--extension-name <extension-name>', $('extension-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('publisherName = ' + options.publisherName);
    cli.output.info('extensionName = ' + options.extensionName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineExtensions.listVersions(options.publisherName, options.extensionName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine BeginShutdown
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postShutdownAction":0
}
*/
  var virtualMachineBeginShutdown = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineBeginShutdown.command('begin-shutdown')
  .description($('begin-shutdown method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.beginShutdown(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineBeginShutdownbeginShutdownParameters3 = virtualMachineBeginShutdown.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineBeginShutdownbeginShutdownGenerate3 = virtualMachineBeginShutdownbeginShutdownParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineBeginShutdownbeginShutdownGenerate3.command('begin-shutdown')
  .description($('Generate virtualMachineBeginShutdown parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postShutdownAction\":0}', _);
    var filePath = 'virtualMachineBeginShutdown_beginShutdown.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineBeginShutdownbeginShutdownParameters3.command('patch')
  .description($('Command to patch virtualMachineBeginShutdown parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-shutdown-parameters
  var catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters0 = catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters0 = parametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters0.command('virtual-machine-shutdown-parameters')
  .description($('Set catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-shutdown-parameters
  var catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters1 = catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters1 = parametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters1.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-shutdown-action', $('Remove the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postShutdownAction;
    if (anySubItem) {
      if (options.postShutdownAction) {
        var subItemPath = options.path + "/postShutdownAction";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-shutdown-parameters
  var catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters2 = catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters2 = parametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters2.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersBeginShutdownVirtualMachineVirtualMachineShutdownParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove post-shutdown-action
  var catparametersBeginShutdownVirtualMachinePostShutdownAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersBeginShutdownVirtualMachinePostShutdownAction1 = catparametersBeginShutdownVirtualMachinePostShutdownAction1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersBeginShutdownVirtualMachinePostShutdownAction1 = parametersBeginShutdownVirtualMachinePostShutdownAction1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersBeginShutdownVirtualMachinePostShutdownAction1.command('post-shutdown-action')
  .description($('Remove catparametersBeginShutdownVirtualMachinePostShutdownAction1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postShutdownAction';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add post-shutdown-action
  var catparametersBeginShutdownVirtualMachinePostShutdownAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersBeginShutdownVirtualMachinePostShutdownAction2 = catparametersBeginShutdownVirtualMachinePostShutdownAction2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersBeginShutdownVirtualMachinePostShutdownAction2 = parametersBeginShutdownVirtualMachinePostShutdownAction2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersBeginShutdownVirtualMachinePostShutdownAction2.command('post-shutdown-action')
  .description($('Remove catparametersBeginShutdownVirtualMachinePostShutdownAction2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postShutdownAction' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine CaptureOSImage
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postCaptureAction":0,
  "provisioningConfiguration":{
    "adminPassword":"",
    "adminUserName":"",
    "computerName":"",
    "configurationSetType":"",
    "customData":"",
    "disableSshPasswordAuthentication":null,
    "domainJoin":{
      "credentials":{
        "domain":"",
        "password":"",
        "userName":""
      },
      "domainToJoin":"",
      "ldapMachineObjectOU":"",
      "provisioning":{
        "accountData":""
      }
    },
    "enableAutomaticUpdates":null,
    "hostName":"",
    "inputEndpoints":[
      {
        "enableDirectServerReturn":null,
        "endpointAcl":{
          "rules":[
            {
              "action":"",
              "description":"",
              "order":null,
              "remoteSubnet":""
            }
          ]
        },
        "idleTimeoutInMinutes":null,
        "loadBalancedEndpointSetName":"",
        "loadBalancerDistribution":"",
        "loadBalancerName":"",
        "loadBalancerProbe":{
          "intervalInSeconds":null,
          "path":"",
          "port":0,
          "protocol":0,
          "timeoutInSeconds":null
        },
        "localPort":null,
        "name":"",
        "port":null,
        "protocol":"",
        "virtualIPAddress":"",
        "virtualIPName":""
      }
    ],
    "iPForwarding":"",
    "networkInterfaces":[
      {
        "iPConfigurations":[
          {
            "staticVirtualNetworkIPAddress":"",
            "subnetName":""
          }
        ],
        "iPForwarding":"",
        "name":"",
        "networkSecurityGroup":""
      }
    ],
    "networkSecurityGroup":"",
    "publicIPs":[
      {
        "domainNameLabel":"",
        "idleTimeoutInMinutes":null,
        "name":""
      }
    ],
    "resetPasswordOnFirstLogon":null,
    "sshSettings":{
      "keyPairs":[
        {
          "fingerprint":"",
          "path":""
        }
      ],
      "publicKeys":[
        {
          "fingerprint":"",
          "path":""
        }
      ]
    },
    "staticVirtualNetworkIPAddress":"",
    "storedCertificateSettings":[
      {
        "storeName":"",
        "thumbprint":""
      }
    ],
    "subnetNames":[
      ""
    ],
    "timeZone":"",
    "userName":"",
    "userPassword":"",
    "windowsRemoteManagement":{
      "listeners":[
        {
          "certificateThumbprint":"",
          "listenerType":0
        }
      ]
    }
  },
  "targetImageLabel":"",
  "targetImageName":""
}
*/
  var virtualMachineCaptureOSImage = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCaptureOSImage.command('capture-os-image')
  .description($('capture-os-image method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.captureOSImage(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCaptureOSImagecaptureOSImageParameters3 = virtualMachineCaptureOSImage.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCaptureOSImagecaptureOSImageGenerate3 = virtualMachineCaptureOSImagecaptureOSImageParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCaptureOSImagecaptureOSImageGenerate3.command('capture-os-image')
  .description($('Generate virtualMachineCaptureOSImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postCaptureAction\":0,\"provisioningConfiguration\":{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}},\"targetImageLabel\":\"\",\"targetImageName\":\"\"}', _);
    var filePath = 'virtualMachineCaptureOSImage_captureOSImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postCaptureAction\":0,\r\n\"provisioningConfiguration\":{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n},\r\n\"targetImageLabel\":\"\",\r\n\"targetImageName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCaptureOSImagecaptureOSImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureOSImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.command('virtual-machine-capture-os-image-parameters')
  .description($('Set catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-capture-action <postCaptureAction>', $('Set the post-capture-action value.'))
  .option('--provisioning-configuration <provisioningConfiguration>', $('Set the provisioning-configuration value.'))
  .option('--target-image-label <targetImageLabel>', $('Set the target-image-label value.'))
  .option('--target-image-name <targetImageName>', $('Set the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postCaptureAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postCaptureAction) {
      if (options.parse && options.postCaptureAction) {
        options.postCaptureAction = JSON.parse(options.postCaptureAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postCaptureAction}]);
    }
    paramPath = options.path + '/' + 'provisioningConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningConfiguration) {
      if (options.parse && options.provisioningConfiguration) {
        options.provisioningConfiguration = JSON.parse(options.provisioningConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningConfiguration}]);
    }
    paramPath = options.path + '/' + 'targetImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageLabel) {
      if (options.parse && options.targetImageLabel) {
        options.targetImageLabel = JSON.parse(options.targetImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageLabel}]);
    }
    paramPath = options.path + '/' + 'targetImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageName) {
      if (options.parse && options.targetImageName) {
        options.targetImageName = JSON.parse(options.targetImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.command('virtual-machine-capture-os-image-parameters')
  .description($('Remove catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-capture-action', $('Remove the post-capture-action value.'))
  .option('--provisioning-configuration', $('Remove the provisioning-configuration value.'))
  .option('--target-image-label', $('Remove the target-image-label value.'))
  .option('--target-image-name', $('Remove the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postCaptureAction || options.provisioningConfiguration || options.targetImageLabel || options.targetImageName;
    if (anySubItem) {
      if (options.postCaptureAction) {
        var subItemPath = options.path + "/postCaptureAction";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningConfiguration) {
        var subItemPath = options.path + "/provisioningConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetImageLabel) {
        var subItemPath = options.path + "/targetImageLabel";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetImageName) {
        var subItemPath = options.path + "/targetImageName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2.command('virtual-machine-capture-os-image-parameters')
  .description($('Remove catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-capture-action <postCaptureAction>', $('Add the post-capture-action value.'))
  .option('--provisioning-configuration <provisioningConfiguration>', $('Add the provisioning-configuration value.'))
  .option('--target-image-label <targetImageLabel>', $('Add the target-image-label value.'))
  .option('--target-image-name <targetImageName>', $('Add the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postCaptureAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postCaptureAction) {
      if (options.parse && options.postCaptureAction) {
        options.postCaptureAction = JSON.parse(options.postCaptureAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postCaptureAction}]);
    }
    paramPath = '' + '/' + 'provisioningConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningConfiguration) {
      if (options.parse && options.provisioningConfiguration) {
        options.provisioningConfiguration = JSON.parse(options.provisioningConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningConfiguration}]);
    }
    paramPath = '' + '/' + 'targetImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageLabel) {
      if (options.parse && options.targetImageLabel) {
        options.targetImageLabel = JSON.parse(options.targetImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageLabel}]);
    }
    paramPath = '' + '/' + 'targetImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageName) {
      if (options.parse && options.targetImageName) {
        options.targetImageName = JSON.parse(options.targetImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove post-capture-action
  var catparametersCaptureOSImageVirtualMachinePostCaptureAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePostCaptureAction1 = catparametersCaptureOSImageVirtualMachinePostCaptureAction1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachinePostCaptureAction1 = parametersCaptureOSImageVirtualMachinePostCaptureAction1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachinePostCaptureAction1.command('post-capture-action')
  .description($('Remove catparametersCaptureOSImageVirtualMachinePostCaptureAction1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postCaptureAction';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add post-capture-action
  var catparametersCaptureOSImageVirtualMachinePostCaptureAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePostCaptureAction2 = catparametersCaptureOSImageVirtualMachinePostCaptureAction2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachinePostCaptureAction2 = parametersCaptureOSImageVirtualMachinePostCaptureAction2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachinePostCaptureAction2.command('post-capture-action')
  .description($('Remove catparametersCaptureOSImageVirtualMachinePostCaptureAction2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postCaptureAction' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineProvisioningConfiguration0.command('provisioning-configuration')
  .description($('Set catparametersCaptureOSImageVirtualMachineProvisioningConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration';
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineProvisioningConfiguration1.command('provisioning-configuration')
  .description($('Remove catparametersCaptureOSImageVirtualMachineProvisioningConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration';
    var anySubItem = false || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      if (options.adminPassword) {
        var subItemPath = options.path + "/adminPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        var subItemPath = options.path + "/adminUserName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        var subItemPath = options.path + "/computerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        var subItemPath = options.path + "/configurationSetType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        var subItemPath = options.path + "/customData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        var subItemPath = options.path + "/disableSshPasswordAuthentication";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        var subItemPath = options.path + "/domainJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        var subItemPath = options.path + "/enableAutomaticUpdates";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        var subItemPath = options.path + "/hostName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        var subItemPath = options.path + "/inputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        var subItemPath = options.path + "/networkInterfaces";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        var subItemPath = options.path + "/publicIPs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        var subItemPath = options.path + "/resetPasswordOnFirstLogon";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        var subItemPath = options.path + "/sshSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        var subItemPath = options.path + "/storedCertificateSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        var subItemPath = options.path + "/subnetNames";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        var subItemPath = options.path + "/timeZone";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        var subItemPath = options.path + "/userPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        var subItemPath = options.path + "/windowsRemoteManagement";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration2 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineProvisioningConfiguration2 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineProvisioningConfiguration2.command('provisioning-configuration')
  .description($('Remove catparametersCaptureOSImageVirtualMachineProvisioningConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration' + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin0 = catparametersCaptureOSImageVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineDomainJoin0 = parametersCaptureOSImageVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersCaptureOSImageVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin1 = catparametersCaptureOSImageVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineDomainJoin1 = parametersCaptureOSImageVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersCaptureOSImageVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      if (options.credentials) {
        var subItemPath = options.path + "/credentials";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        var subItemPath = options.path + "/domainToJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        var subItemPath = options.path + "/ldapMachineObjectOU";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        var subItemPath = options.path + "/provisioning";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin2 = catparametersCaptureOSImageVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineDomainJoin2 = parametersCaptureOSImageVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersCaptureOSImageVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersCaptureOSImageVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials0 = catparametersCaptureOSImageVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineCredentials0 = parametersCaptureOSImageVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersCaptureOSImageVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersCaptureOSImageVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials1 = catparametersCaptureOSImageVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineCredentials1 = parametersCaptureOSImageVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersCaptureOSImageVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      if (options.domain) {
        var subItemPath = options.path + "/domain";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        var subItemPath = options.path + "/password";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersCaptureOSImageVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials2 = catparametersCaptureOSImageVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineCredentials2 = parametersCaptureOSImageVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersCaptureOSImageVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning0 = catparametersCaptureOSImageVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineProvisioning0 = parametersCaptureOSImageVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersCaptureOSImageVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning1 = catparametersCaptureOSImageVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineProvisioning1 = parametersCaptureOSImageVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersCaptureOSImageVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      if (options.accountData) {
        var subItemPath = options.path + "/accountData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning2 = catparametersCaptureOSImageVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineProvisioning2 = parametersCaptureOSImageVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersCaptureOSImageVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints0 = catparametersCaptureOSImageVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineInputEndpoints0 = parametersCaptureOSImageVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersCaptureOSImageVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints1 = catparametersCaptureOSImageVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineInputEndpoints1 = parametersCaptureOSImageVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersCaptureOSImageVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      if (options.enableDirectServerReturn) {
        var subItemPath = options.path + "/enableDirectServerReturn";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        var subItemPath = options.path + "/endpointAcl";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        var subItemPath = options.path + "/loadBalancedEndpointSetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        var subItemPath = options.path + "/loadBalancerDistribution";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        var subItemPath = options.path + "/loadBalancerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        var subItemPath = options.path + "/loadBalancerProbe";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        var subItemPath = options.path + "/virtualIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        var subItemPath = options.path + "/virtualIPName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints2 = catparametersCaptureOSImageVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineInputEndpoints2 = parametersCaptureOSImageVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersCaptureOSImageVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersCaptureOSImageVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineEndpointAcl0 = catparametersCaptureOSImageVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineEndpointAcl0 = parametersCaptureOSImageVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersCaptureOSImageVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersCaptureOSImageVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineEndpointAcl1 = catparametersCaptureOSImageVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineEndpointAcl1 = parametersCaptureOSImageVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersCaptureOSImageVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      if (options.rules) {
        var subItemPath = options.path + "/rules";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersCaptureOSImageVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineEndpointAcl2 = catparametersCaptureOSImageVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineEndpointAcl2 = parametersCaptureOSImageVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersCaptureOSImageVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersCaptureOSImageVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules0 = catparametersCaptureOSImageVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineRules0 = parametersCaptureOSImageVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineRules0.command('rules')
  .description($('Set catparametersCaptureOSImageVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersCaptureOSImageVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules1 = catparametersCaptureOSImageVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineRules1 = parametersCaptureOSImageVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineRules1.command('rules')
  .description($('Remove catparametersCaptureOSImageVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      if (options.action) {
        var subItemPath = options.path + "/action";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        var subItemPath = options.path + "/order";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        var subItemPath = options.path + "/remoteSubnet";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersCaptureOSImageVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules2 = catparametersCaptureOSImageVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineRules2 = parametersCaptureOSImageVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineRules2.command('rules')
  .description($('Remove catparametersCaptureOSImageVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersCaptureOSImageVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersCaptureOSImageVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      if (options.intervalInSeconds) {
        var subItemPath = options.path + "/intervalInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        var subItemPath = options.path + "/timeoutInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe2 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineLoadBalancerProbe2 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersCaptureOSImageVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersCaptureOSImageVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProtocol1 = catparametersCaptureOSImageVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineProtocol1 = parametersCaptureOSImageVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersCaptureOSImageVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersCaptureOSImageVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProtocol2 = catparametersCaptureOSImageVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineProtocol2 = parametersCaptureOSImageVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersCaptureOSImageVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces0 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineNetworkInterfaces0 = parametersCaptureOSImageVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersCaptureOSImageVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces1 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineNetworkInterfaces1 = parametersCaptureOSImageVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersCaptureOSImageVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      if (options.ipConfigurations) {
        var subItemPath = options.path + "/ipConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces2 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineNetworkInterfaces2 = parametersCaptureOSImageVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersCaptureOSImageVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations0 = catparametersCaptureOSImageVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineIPConfigurations0 = parametersCaptureOSImageVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersCaptureOSImageVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations1 = catparametersCaptureOSImageVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineIPConfigurations1 = parametersCaptureOSImageVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersCaptureOSImageVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        var subItemPath = options.path + "/subnetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations2 = catparametersCaptureOSImageVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineIPConfigurations2 = parametersCaptureOSImageVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersCaptureOSImageVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs0 = catparametersCaptureOSImageVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachinePublicIPs0 = parametersCaptureOSImageVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersCaptureOSImageVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs1 = catparametersCaptureOSImageVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachinePublicIPs1 = parametersCaptureOSImageVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersCaptureOSImageVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      if (options.domainNameLabel) {
        var subItemPath = options.path + "/domainNameLabel";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs2 = catparametersCaptureOSImageVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachinePublicIPs2 = parametersCaptureOSImageVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersCaptureOSImageVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersCaptureOSImageVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSshSettings0 = catparametersCaptureOSImageVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineSshSettings0 = parametersCaptureOSImageVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersCaptureOSImageVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersCaptureOSImageVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSshSettings1 = catparametersCaptureOSImageVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineSshSettings1 = parametersCaptureOSImageVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersCaptureOSImageVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      if (options.keyPairs) {
        var subItemPath = options.path + "/keyPairs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        var subItemPath = options.path + "/publicKeys";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersCaptureOSImageVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSshSettings2 = catparametersCaptureOSImageVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineSshSettings2 = parametersCaptureOSImageVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersCaptureOSImageVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs0 = catparametersCaptureOSImageVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineKeyPairs0 = parametersCaptureOSImageVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersCaptureOSImageVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs1 = catparametersCaptureOSImageVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineKeyPairs1 = parametersCaptureOSImageVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersCaptureOSImageVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs2 = catparametersCaptureOSImageVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineKeyPairs2 = parametersCaptureOSImageVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersCaptureOSImageVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys0 = catparametersCaptureOSImageVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachinePublicKeys0 = parametersCaptureOSImageVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersCaptureOSImageVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys1 = catparametersCaptureOSImageVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachinePublicKeys1 = parametersCaptureOSImageVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersCaptureOSImageVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys2 = catparametersCaptureOSImageVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachinePublicKeys2 = parametersCaptureOSImageVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersCaptureOSImageVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersCaptureOSImageVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersCaptureOSImageVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      if (options.storeName) {
        var subItemPath = options.path + "/storeName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        var subItemPath = options.path + "/thumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings2 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineStoredCertificateSettings2 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersCaptureOSImageVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames0 = catparametersCaptureOSImageVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineSubnetNames0 = parametersCaptureOSImageVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersCaptureOSImageVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames1 = catparametersCaptureOSImageVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineSubnetNames1 = parametersCaptureOSImageVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersCaptureOSImageVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames2 = catparametersCaptureOSImageVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineSubnetNames2 = parametersCaptureOSImageVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersCaptureOSImageVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineWindowsRemoteManagement0 = catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0 = parametersCaptureOSImageVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = parametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      if (options.listeners) {
        var subItemPath = options.path + "/listeners";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineWindowsRemoteManagement2 = catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2 = parametersCaptureOSImageVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersCaptureOSImageVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners0 = catparametersCaptureOSImageVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureOSImageVirtualMachineListeners0 = parametersCaptureOSImageVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureOSImageVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersCaptureOSImageVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersCaptureOSImageVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners1 = catparametersCaptureOSImageVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineListeners1 = parametersCaptureOSImageVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersCaptureOSImageVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      if (options.certificateThumbprint) {
        var subItemPath = options.path + "/certificateThumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        var subItemPath = options.path + "/listenerType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersCaptureOSImageVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners2 = catparametersCaptureOSImageVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineListeners2 = parametersCaptureOSImageVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersCaptureOSImageVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersCaptureOSImageVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListenerType1 = catparametersCaptureOSImageVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureOSImageVirtualMachineListenerType1 = parametersCaptureOSImageVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureOSImageVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersCaptureOSImageVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersCaptureOSImageVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListenerType2 = catparametersCaptureOSImageVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureOSImageVirtualMachineListenerType2 = parametersCaptureOSImageVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureOSImageVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersCaptureOSImageVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine CaptureVMImage
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "operationType":"",
  "oSState":"",
  "vMImageLabel":"",
  "vMImageName":"",
  "requestId":"",
  "statusCode":0
}
*/
  var virtualMachineCaptureVMImage = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCaptureVMImage.command('capture-vm-image')
  .description($('capture-vm-image method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.captureVMImage(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCaptureVMImagecaptureVMImageParameters3 = virtualMachineCaptureVMImage.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCaptureVMImagecaptureVMImageGenerate3 = virtualMachineCaptureVMImagecaptureVMImageParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCaptureVMImagecaptureVMImageGenerate3.command('capture-vm-image')
  .description($('Generate virtualMachineCaptureVMImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"operationType\":\"\",\"oSState\":\"\",\"vMImageLabel\":\"\",\"vMImageName\":\"\",\"requestId\":\"\",\"statusCode\":0}', _);
    var filePath = 'virtualMachineCaptureVMImage_captureVMImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"operationType\":\"\",\r\n\"oSState\":\"\",\r\n\"vMImageLabel\":\"\",\r\n\"vMImageName\":\"\",\r\n\"requestId\":\"\",\r\n\"statusCode\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCaptureVMImagecaptureVMImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureVMImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.command('virtual-machine-capture-vm-image-parameters')
  .description($('Set catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--operation-type <operationType>', $('Set the operation-type value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .option('--vm-image-label <vmImageLabel>', $('Set the vm-image-label value.'))
  .option('--vm-image-name <vmImageName>', $('Set the vm-image-name value.'))
  .option('--request-id <requestId>', $('Set the request-id value.'))
  .option('--status-code <statusCode>', $('Set the status-code value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'operationType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operationType) {
      if (options.parse && options.operationType) {
        options.operationType = JSON.parse(options.operationType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operationType}]);
    }
    paramPath = options.path + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    paramPath = options.path + '/' + 'vmImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageLabel) {
      if (options.parse && options.vmImageLabel) {
        options.vmImageLabel = JSON.parse(options.vmImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageLabel}]);
    }
    paramPath = options.path + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    paramPath = options.path + '/' + 'requestId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.requestId) {
      if (options.parse && options.requestId) {
        options.requestId = JSON.parse(options.requestId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.requestId}]);
    }
    paramPath = options.path + '/' + 'statusCode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.statusCode) {
      if (options.parse && options.statusCode) {
        options.statusCode = JSON.parse(options.statusCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statusCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.command('virtual-machine-capture-vm-image-parameters')
  .description($('Remove catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation-type', $('Remove the operation-type value.'))
  .option('--os-state', $('Remove the os-state value.'))
  .option('--vm-image-label', $('Remove the vm-image-label value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .option('--request-id', $('Remove the request-id value.'))
  .option('--status-code', $('Remove the status-code value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.operationType || options.oSState || options.vmImageLabel || options.vmImageName || options.requestId || options.statusCode;
    if (anySubItem) {
      if (options.operationType) {
        var subItemPath = options.path + "/operationType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSState) {
        var subItemPath = options.path + "/oSState";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmImageLabel) {
        var subItemPath = options.path + "/vmImageLabel";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmImageName) {
        var subItemPath = options.path + "/vmImageName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.requestId) {
        var subItemPath = options.path + "/requestId";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statusCode) {
        var subItemPath = options.path + "/statusCode";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2.command('virtual-machine-capture-vm-image-parameters')
  .description($('Remove catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--operation-type <operationType>', $('Add the operation-type value.'))
  .option('--os-state <oSState>', $('Add the os-state value.'))
  .option('--vm-image-label <vmImageLabel>', $('Add the vm-image-label value.'))
  .option('--vm-image-name <vmImageName>', $('Add the vm-image-name value.'))
  .option('--request-id <requestId>', $('Add the request-id value.'))
  .option('--status-code <statusCode>', $('Add the status-code value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'operationType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operationType) {
      if (options.parse && options.operationType) {
        options.operationType = JSON.parse(options.operationType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operationType}]);
    }
    paramPath = '' + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    paramPath = '' + '/' + 'vmImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageLabel) {
      if (options.parse && options.vmImageLabel) {
        options.vmImageLabel = JSON.parse(options.vmImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageLabel}]);
    }
    paramPath = '' + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    paramPath = '' + '/' + 'requestId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.requestId) {
      if (options.parse && options.requestId) {
        options.requestId = JSON.parse(options.requestId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.requestId}]);
    }
    paramPath = '' + '/' + 'statusCode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.statusCode) {
      if (options.parse && options.statusCode) {
        options.statusCode = JSON.parse(options.statusCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statusCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Create
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":0,
            "protocol":0,
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":0
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "mediaLocation":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":"",
  "vMImageInput":{
    "dataDiskConfigurations":[
      {
        "diskName":"",
        "resizedSizeInGB":null
      }
    ],
    "oSDiskConfiguration":{
      "resizedSizeInGB":null
    }
  },
  "vMImageName":""
}
*/
  var virtualMachineCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCreate.command('create')
  .description($('create method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.create(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCreatecreateParameters2 = virtualMachineCreate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCreatecreateGenerate2 = virtualMachineCreatecreateParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCreatecreateGenerate2.command('create')
  .description($('Generate virtualMachineCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"mediaLocation\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}', _);
    var filePath = 'virtualMachineCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"mediaLocation\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCreatecreateParameters2.command('patch')
  .description($('Command to patch virtualMachineCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters0 = catparametersCreateVirtualMachineVirtualMachineCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineVirtualMachineCreateParameters0 = parametersCreateVirtualMachineVirtualMachineCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineVirtualMachineCreateParameters0.command('virtual-machine-create-parameters')
  .description($('Set catparametersCreateVirtualMachineVirtualMachineCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--vm-image-input <vmImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = options.path + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters1 = catparametersCreateVirtualMachineVirtualMachineCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineVirtualMachineCreateParameters1 = parametersCreateVirtualMachineVirtualMachineCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineVirtualMachineCreateParameters1.command('virtual-machine-create-parameters')
  .description($('Remove catparametersCreateVirtualMachineVirtualMachineCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--media-location', $('Remove the media-location value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .option('--vm-image-input', $('Remove the vm-image-input value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.mediaLocation || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize || options.vmImageInput || options.vmImageName;
    if (anySubItem) {
      if (options.availabilitySetName) {
        var subItemPath = options.path + "/availabilitySetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        var subItemPath = options.path + "/configurationSets";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        var subItemPath = options.path + "/dataVirtualHardDisks";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLocation) {
        var subItemPath = options.path + "/mediaLocation";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        var subItemPath = options.path + "/oSVirtualHardDisk";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        var subItemPath = options.path + "/provisionGuestAgent";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        var subItemPath = options.path + "/resourceExtensionReferences";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        var subItemPath = options.path + "/roleSize";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmImageInput) {
        var subItemPath = options.path + "/vmImageInput";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmImageName) {
        var subItemPath = options.path + "/vmImageName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters2 = catparametersCreateVirtualMachineVirtualMachineCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineVirtualMachineCreateParameters2 = parametersCreateVirtualMachineVirtualMachineCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineVirtualMachineCreateParameters2.command('virtual-machine-create-parameters')
  .description($('Remove catparametersCreateVirtualMachineVirtualMachineCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--media-location <mediaLocation>', $('Add the media-location value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .option('--vm-image-input <vmImageInput>', $('Add the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Add the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '' + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '' + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '' + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = '' + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '' + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '' + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '' + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '' + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = '' + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = '' + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets0 = catparametersCreateVirtualMachineConfigurationSets0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineConfigurationSets0 = parametersCreateVirtualMachineConfigurationSets0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineConfigurationSets0.command('configuration-sets')
  .description($('Set catparametersCreateVirtualMachineConfigurationSets0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets1 = catparametersCreateVirtualMachineConfigurationSets1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineConfigurationSets1 = parametersCreateVirtualMachineConfigurationSets1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineConfigurationSets1.command('configuration-sets')
  .description($('Remove catparametersCreateVirtualMachineConfigurationSets1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      if (options.adminPassword) {
        var subItemPath = options.path + "/adminPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        var subItemPath = options.path + "/adminUserName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        var subItemPath = options.path + "/computerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        var subItemPath = options.path + "/configurationSetType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        var subItemPath = options.path + "/customData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        var subItemPath = options.path + "/disableSshPasswordAuthentication";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        var subItemPath = options.path + "/domainJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        var subItemPath = options.path + "/enableAutomaticUpdates";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        var subItemPath = options.path + "/hostName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        var subItemPath = options.path + "/inputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        var subItemPath = options.path + "/networkInterfaces";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        var subItemPath = options.path + "/publicIPs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        var subItemPath = options.path + "/resetPasswordOnFirstLogon";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        var subItemPath = options.path + "/sshSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        var subItemPath = options.path + "/storedCertificateSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        var subItemPath = options.path + "/subnetNames";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        var subItemPath = options.path + "/timeZone";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        var subItemPath = options.path + "/userPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        var subItemPath = options.path + "/windowsRemoteManagement";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets2 = catparametersCreateVirtualMachineConfigurationSets2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineConfigurationSets2 = parametersCreateVirtualMachineConfigurationSets2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineConfigurationSets2.command('configuration-sets')
  .description($('Remove catparametersCreateVirtualMachineConfigurationSets2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersCreateVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin0 = catparametersCreateVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineDomainJoin0 = parametersCreateVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersCreateVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersCreateVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin1 = catparametersCreateVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineDomainJoin1 = parametersCreateVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersCreateVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      if (options.credentials) {
        var subItemPath = options.path + "/credentials";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        var subItemPath = options.path + "/domainToJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        var subItemPath = options.path + "/ldapMachineObjectOU";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        var subItemPath = options.path + "/provisioning";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersCreateVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin2 = catparametersCreateVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineDomainJoin2 = parametersCreateVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersCreateVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersCreateVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials0 = catparametersCreateVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineCredentials0 = parametersCreateVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersCreateVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersCreateVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials1 = catparametersCreateVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineCredentials1 = parametersCreateVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersCreateVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      if (options.domain) {
        var subItemPath = options.path + "/domain";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        var subItemPath = options.path + "/password";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersCreateVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials2 = catparametersCreateVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineCredentials2 = parametersCreateVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersCreateVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersCreateVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning0 = catparametersCreateVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineProvisioning0 = parametersCreateVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersCreateVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersCreateVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning1 = catparametersCreateVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineProvisioning1 = parametersCreateVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersCreateVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      if (options.accountData) {
        var subItemPath = options.path + "/accountData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersCreateVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning2 = catparametersCreateVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineProvisioning2 = parametersCreateVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersCreateVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints0 = catparametersCreateVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineInputEndpoints0 = parametersCreateVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersCreateVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints1 = catparametersCreateVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineInputEndpoints1 = parametersCreateVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersCreateVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      if (options.enableDirectServerReturn) {
        var subItemPath = options.path + "/enableDirectServerReturn";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        var subItemPath = options.path + "/endpointAcl";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        var subItemPath = options.path + "/loadBalancedEndpointSetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        var subItemPath = options.path + "/loadBalancerDistribution";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        var subItemPath = options.path + "/loadBalancerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        var subItemPath = options.path + "/loadBalancerProbe";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        var subItemPath = options.path + "/virtualIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        var subItemPath = options.path + "/virtualIPName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints2 = catparametersCreateVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineInputEndpoints2 = parametersCreateVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersCreateVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersCreateVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineEndpointAcl0 = catparametersCreateVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineEndpointAcl0 = parametersCreateVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersCreateVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersCreateVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineEndpointAcl1 = catparametersCreateVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineEndpointAcl1 = parametersCreateVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersCreateVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      if (options.rules) {
        var subItemPath = options.path + "/rules";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersCreateVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineEndpointAcl2 = catparametersCreateVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineEndpointAcl2 = parametersCreateVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersCreateVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersCreateVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules0 = catparametersCreateVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineRules0 = parametersCreateVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineRules0.command('rules')
  .description($('Set catparametersCreateVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersCreateVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules1 = catparametersCreateVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineRules1 = parametersCreateVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineRules1.command('rules')
  .description($('Remove catparametersCreateVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      if (options.action) {
        var subItemPath = options.path + "/action";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        var subItemPath = options.path + "/order";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        var subItemPath = options.path + "/remoteSubnet";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersCreateVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules2 = catparametersCreateVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineRules2 = parametersCreateVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineRules2.command('rules')
  .description($('Remove catparametersCreateVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe0 = catparametersCreateVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineLoadBalancerProbe0 = parametersCreateVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersCreateVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe1 = catparametersCreateVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineLoadBalancerProbe1 = parametersCreateVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersCreateVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      if (options.intervalInSeconds) {
        var subItemPath = options.path + "/intervalInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        var subItemPath = options.path + "/timeoutInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe2 = catparametersCreateVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineLoadBalancerProbe2 = parametersCreateVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersCreateVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersCreateVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProtocol1 = catparametersCreateVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineProtocol1 = parametersCreateVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersCreateVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersCreateVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProtocol2 = catparametersCreateVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineProtocol2 = parametersCreateVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersCreateVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces0 = catparametersCreateVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineNetworkInterfaces0 = parametersCreateVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersCreateVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces1 = catparametersCreateVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineNetworkInterfaces1 = parametersCreateVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersCreateVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      if (options.ipConfigurations) {
        var subItemPath = options.path + "/ipConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces2 = catparametersCreateVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineNetworkInterfaces2 = parametersCreateVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersCreateVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations0 = catparametersCreateVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineIPConfigurations0 = parametersCreateVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersCreateVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations1 = catparametersCreateVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineIPConfigurations1 = parametersCreateVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersCreateVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        var subItemPath = options.path + "/subnetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations2 = catparametersCreateVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineIPConfigurations2 = parametersCreateVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersCreateVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersCreateVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs0 = catparametersCreateVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachinePublicIPs0 = parametersCreateVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersCreateVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersCreateVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs1 = catparametersCreateVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachinePublicIPs1 = parametersCreateVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersCreateVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      if (options.domainNameLabel) {
        var subItemPath = options.path + "/domainNameLabel";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersCreateVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs2 = catparametersCreateVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachinePublicIPs2 = parametersCreateVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersCreateVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersCreateVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSshSettings0 = catparametersCreateVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineSshSettings0 = parametersCreateVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersCreateVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersCreateVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSshSettings1 = catparametersCreateVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineSshSettings1 = parametersCreateVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersCreateVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      if (options.keyPairs) {
        var subItemPath = options.path + "/keyPairs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        var subItemPath = options.path + "/publicKeys";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersCreateVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSshSettings2 = catparametersCreateVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineSshSettings2 = parametersCreateVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersCreateVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersCreateVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs0 = catparametersCreateVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineKeyPairs0 = parametersCreateVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersCreateVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersCreateVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs1 = catparametersCreateVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineKeyPairs1 = parametersCreateVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersCreateVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersCreateVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs2 = catparametersCreateVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineKeyPairs2 = parametersCreateVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersCreateVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersCreateVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys0 = catparametersCreateVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachinePublicKeys0 = parametersCreateVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersCreateVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersCreateVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys1 = catparametersCreateVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachinePublicKeys1 = parametersCreateVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersCreateVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersCreateVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys2 = catparametersCreateVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachinePublicKeys2 = parametersCreateVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersCreateVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings0 = catparametersCreateVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineStoredCertificateSettings0 = parametersCreateVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersCreateVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings1 = catparametersCreateVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineStoredCertificateSettings1 = parametersCreateVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersCreateVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      if (options.storeName) {
        var subItemPath = options.path + "/storeName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        var subItemPath = options.path + "/thumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings2 = catparametersCreateVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineStoredCertificateSettings2 = parametersCreateVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersCreateVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersCreateVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames0 = catparametersCreateVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineSubnetNames0 = parametersCreateVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersCreateVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersCreateVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames1 = catparametersCreateVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineSubnetNames1 = parametersCreateVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersCreateVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersCreateVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames2 = catparametersCreateVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineSubnetNames2 = parametersCreateVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersCreateVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersCreateVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineWindowsRemoteManagement0 = catparametersCreateVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineWindowsRemoteManagement0 = parametersCreateVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersCreateVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersCreateVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineWindowsRemoteManagement1 = catparametersCreateVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineWindowsRemoteManagement1 = parametersCreateVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersCreateVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      if (options.listeners) {
        var subItemPath = options.path + "/listeners";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersCreateVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineWindowsRemoteManagement2 = catparametersCreateVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineWindowsRemoteManagement2 = parametersCreateVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersCreateVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersCreateVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners0 = catparametersCreateVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineListeners0 = parametersCreateVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersCreateVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersCreateVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners1 = catparametersCreateVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineListeners1 = parametersCreateVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersCreateVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      if (options.certificateThumbprint) {
        var subItemPath = options.path + "/certificateThumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        var subItemPath = options.path + "/listenerType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersCreateVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners2 = catparametersCreateVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineListeners2 = parametersCreateVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersCreateVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersCreateVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListenerType1 = catparametersCreateVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineListenerType1 = parametersCreateVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersCreateVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersCreateVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListenerType2 = catparametersCreateVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineListenerType2 = parametersCreateVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersCreateVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks0 = catparametersCreateVirtualMachineDataVirtualHardDisks0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineDataVirtualHardDisks0 = parametersCreateVirtualMachineDataVirtualHardDisks0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineDataVirtualHardDisks0.command('data-virtual-hard-disks')
  .description($('Set catparametersCreateVirtualMachineDataVirtualHardDisks0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks1 = catparametersCreateVirtualMachineDataVirtualHardDisks1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineDataVirtualHardDisks1 = parametersCreateVirtualMachineDataVirtualHardDisks1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineDataVirtualHardDisks1.command('data-virtual-hard-disks')
  .description($('Remove catparametersCreateVirtualMachineDataVirtualHardDisks1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        var subItemPath = options.path + "/iOType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        var subItemPath = options.path + "/logicalDiskSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        var subItemPath = options.path + "/logicalUnitNumber";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        var subItemPath = options.path + "/sourceMediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks2 = catparametersCreateVirtualMachineDataVirtualHardDisks2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineDataVirtualHardDisks2 = parametersCreateVirtualMachineDataVirtualHardDisks2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineDataVirtualHardDisks2.command('data-virtual-hard-disks')
  .description($('Remove catparametersCreateVirtualMachineDataVirtualHardDisks2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk0 = catparametersCreateVirtualMachineOSVirtualHardDisk0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineOSVirtualHardDisk0 = parametersCreateVirtualMachineOSVirtualHardDisk0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineOSVirtualHardDisk0.command('os-virtual-hard-disk')
  .description($('Set catparametersCreateVirtualMachineOSVirtualHardDisk0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk1 = catparametersCreateVirtualMachineOSVirtualHardDisk1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineOSVirtualHardDisk1 = parametersCreateVirtualMachineOSVirtualHardDisk1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineOSVirtualHardDisk1.command('os-virtual-hard-disk')
  .description($('Remove catparametersCreateVirtualMachineOSVirtualHardDisk1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        var subItemPath = options.path + "/iOType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        var subItemPath = options.path + "/operatingSystem";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        var subItemPath = options.path + "/remoteSourceImageLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        var subItemPath = options.path + "/sourceImageName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk2 = catparametersCreateVirtualMachineOSVirtualHardDisk2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineOSVirtualHardDisk2 = parametersCreateVirtualMachineOSVirtualHardDisk2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineOSVirtualHardDisk2.command('os-virtual-hard-disk')
  .description($('Remove catparametersCreateVirtualMachineOSVirtualHardDisk2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences0 = catparametersCreateVirtualMachineResourceExtensionReferences0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineResourceExtensionReferences0 = parametersCreateVirtualMachineResourceExtensionReferences0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineResourceExtensionReferences0.command('resource-extension-references')
  .description($('Set catparametersCreateVirtualMachineResourceExtensionReferences0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences1 = catparametersCreateVirtualMachineResourceExtensionReferences1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineResourceExtensionReferences1 = parametersCreateVirtualMachineResourceExtensionReferences1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineResourceExtensionReferences1.command('resource-extension-references')
  .description($('Remove catparametersCreateVirtualMachineResourceExtensionReferences1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      if (options.forceUpdate) {
        var subItemPath = options.path + "/forceUpdate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        var subItemPath = options.path + "/publisher";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        var subItemPath = options.path + "/referenceName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        var subItemPath = options.path + "/resourceExtensionParameterValues";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        var subItemPath = options.path + "/state";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences2 = catparametersCreateVirtualMachineResourceExtensionReferences2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineResourceExtensionReferences2 = parametersCreateVirtualMachineResourceExtensionReferences2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineResourceExtensionReferences2.command('resource-extension-references')
  .description($('Remove catparametersCreateVirtualMachineResourceExtensionReferences2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues0 = catparametersCreateVirtualMachineResourceExtensionParameterValues0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineResourceExtensionParameterValues0 = parametersCreateVirtualMachineResourceExtensionParameterValues0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineResourceExtensionParameterValues0.command('resource-extension-parameter-values')
  .description($('Set catparametersCreateVirtualMachineResourceExtensionParameterValues0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues1 = catparametersCreateVirtualMachineResourceExtensionParameterValues1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineResourceExtensionParameterValues1 = parametersCreateVirtualMachineResourceExtensionParameterValues1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineResourceExtensionParameterValues1.command('resource-extension-parameter-values')
  .description($('Remove catparametersCreateVirtualMachineResourceExtensionParameterValues1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      if (options.key) {
        var subItemPath = options.path + "/key";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        var subItemPath = options.path + "/value";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues2 = catparametersCreateVirtualMachineResourceExtensionParameterValues2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineResourceExtensionParameterValues2 = parametersCreateVirtualMachineResourceExtensionParameterValues2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineResourceExtensionParameterValues2.command('resource-extension-parameter-values')
  .description($('Remove catparametersCreateVirtualMachineResourceExtensionParameterValues2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set vm-image-input
  var catparametersCreateVirtualMachineVMImageInput0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVMImageInput0 = catparametersCreateVirtualMachineVMImageInput0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineVMImageInput0 = parametersCreateVirtualMachineVMImageInput0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineVMImageInput0.command('vm-image-input')
  .description($('Set catparametersCreateVirtualMachineVMImageInput0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vmImageInput';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove vm-image-input
  var catparametersCreateVirtualMachineVMImageInput1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVMImageInput1 = catparametersCreateVirtualMachineVMImageInput1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineVMImageInput1 = parametersCreateVirtualMachineVMImageInput1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineVMImageInput1.command('vm-image-input')
  .description($('Remove catparametersCreateVirtualMachineVMImageInput1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vmImageInput';
    var anySubItem = false || options.dataDiskConfigurations || options.oSDiskConfiguration;
    if (anySubItem) {
      if (options.dataDiskConfigurations) {
        var subItemPath = options.path + "/dataDiskConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        var subItemPath = options.path + "/oSDiskConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add vm-image-input
  var catparametersCreateVirtualMachineVMImageInput2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVMImageInput2 = catparametersCreateVirtualMachineVMImageInput2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineVMImageInput2 = parametersCreateVirtualMachineVMImageInput2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineVMImageInput2.command('vm-image-input')
  .description($('Remove catparametersCreateVirtualMachineVMImageInput2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vmImageInput' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vmImageInput' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '/vmImageInput' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations0 = catparametersCreateVirtualMachineDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineDataDiskConfigurations0 = parametersCreateVirtualMachineDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersCreateVirtualMachineDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations1 = catparametersCreateVirtualMachineDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineDataDiskConfigurations1 = parametersCreateVirtualMachineDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersCreateVirtualMachineDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--disk-name', $('Remove the disk-name value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.diskName || options.resizedSizeInGB;
    if (anySubItem) {
      if (options.diskName) {
        var subItemPath = options.path + "/diskName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations2 = catparametersCreateVirtualMachineDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineDataDiskConfigurations2 = parametersCreateVirtualMachineDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersCreateVirtualMachineDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--disk-name <diskName>', $('Add the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration0 = catparametersCreateVirtualMachineOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateVirtualMachineOSDiskConfiguration0 = parametersCreateVirtualMachineOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateVirtualMachineOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersCreateVirtualMachineOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vmImageInput/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration1 = catparametersCreateVirtualMachineOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateVirtualMachineOSDiskConfiguration1 = parametersCreateVirtualMachineOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateVirtualMachineOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersCreateVirtualMachineOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vmImageInput/oSDiskConfiguration';
    var anySubItem = false || options.resizedSizeInGB;
    if (anySubItem) {
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration2 = catparametersCreateVirtualMachineOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateVirtualMachineOSDiskConfiguration2 = parametersCreateVirtualMachineOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateVirtualMachineOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersCreateVirtualMachineOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vmImageInput/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vmImageInput/oSDiskConfiguration' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine CreateDeployment
  --service-name
  --parameters
=============================================
{
  "deploymentSlot":0,
  "dnsSettings":{
    "dnsServers":[
      {
        "address":"",
        "name":""
      }
    ]
  },
  "label":"",
  "loadBalancers":[
    {
      "frontendIPConfiguration":{
        "staticVirtualNetworkIPAddress":"",
        "subnetName":"",
        "type":""
      },
      "name":""
    }
  ],
  "name":"",
  "reservedIPName":"",
  "roles":[
    {
      "availabilitySetName":"",
      "configurationSets":[
        {
          "adminPassword":"",
          "adminUserName":"",
          "computerName":"",
          "configurationSetType":"",
          "customData":"",
          "disableSshPasswordAuthentication":null,
          "domainJoin":{
            "credentials":{
              "domain":"",
              "password":"",
              "userName":""
            },
            "domainToJoin":"",
            "ldapMachineObjectOU":"",
            "provisioning":{
              "accountData":""
            }
          },
          "enableAutomaticUpdates":null,
          "hostName":"",
          "inputEndpoints":[
            {
              "enableDirectServerReturn":null,
              "endpointAcl":{
                "rules":[
                  {
                    "action":"",
                    "description":"",
                    "order":null,
                    "remoteSubnet":""
                  }
                ]
              },
              "idleTimeoutInMinutes":null,
              "loadBalancedEndpointSetName":"",
              "loadBalancerDistribution":"",
              "loadBalancerName":"",
              "loadBalancerProbe":{
                "intervalInSeconds":null,
                "path":"",
                "port":0,
                "protocol":0,
                "timeoutInSeconds":null
              },
              "localPort":null,
              "name":"",
              "port":null,
              "protocol":"",
              "virtualIPAddress":"",
              "virtualIPName":""
            }
          ],
          "iPForwarding":"",
          "networkInterfaces":[
            {
              "iPConfigurations":[
                {
                  "staticVirtualNetworkIPAddress":"",
                  "subnetName":""
                }
              ],
              "iPForwarding":"",
              "name":"",
              "networkSecurityGroup":""
            }
          ],
          "networkSecurityGroup":"",
          "publicIPs":[
            {
              "domainNameLabel":"",
              "idleTimeoutInMinutes":null,
              "name":""
            }
          ],
          "resetPasswordOnFirstLogon":null,
          "sshSettings":{
            "keyPairs":[
              {
                "fingerprint":"",
                "path":""
              }
            ],
            "publicKeys":[
              {
                "fingerprint":"",
                "path":""
              }
            ]
          },
          "staticVirtualNetworkIPAddress":"",
          "storedCertificateSettings":[
            {
              "storeName":"",
              "thumbprint":""
            }
          ],
          "subnetNames":[
            ""
          ],
          "timeZone":"",
          "userName":"",
          "userPassword":"",
          "windowsRemoteManagement":{
            "listeners":[
              {
                "certificateThumbprint":"",
                "listenerType":0
              }
            ]
          }
        }
      ],
      "dataVirtualHardDisks":[
        {
          "hostCaching":"",
          "iOType":"",
          "label":"",
          "logicalDiskSizeInGB":null,
          "logicalUnitNumber":null,
          "mediaLink":"",
          "name":"",
          "sourceMediaLink":""
        }
      ],
      "defaultWinRmCertificateThumbprint":"",
      "label":"",
      "mediaLocation":"",
      "oSVersion":"",
      "oSVirtualHardDisk":{
        "hostCaching":"",
        "iOType":"",
        "label":"",
        "mediaLink":"",
        "name":"",
        "operatingSystem":"",
        "remoteSourceImageLink":"",
        "resizedSizeInGB":null,
        "sourceImageName":""
      },
      "provisionGuestAgent":null,
      "resourceExtensionReferences":[
        {
          "forceUpdate":null,
          "name":"",
          "publisher":"",
          "referenceName":"",
          "resourceExtensionParameterValues":[
            {
              "key":"",
              "type":"",
              "value":""
            }
          ],
          "state":"",
          "version":""
        }
      ],
      "roleName":"",
      "roleSize":"",
      "roleType":"",
      "vMImageInput":{
        "dataDiskConfigurations":[
          {
            "diskName":"",
            "resizedSizeInGB":null
          }
        ],
        "oSDiskConfiguration":{
          "resizedSizeInGB":null
        }
      },
      "vMImageName":""
    }
  ],
  "virtualNetworkName":""
}
*/
  var virtualMachineCreateDeployment = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCreateDeployment.command('create-deployment')
  .description($('create-deployment method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.createDeployment(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCreateDeploymentcreateDeploymentParameters1 = virtualMachineCreateDeployment.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCreateDeploymentcreateDeploymentGenerate1 = virtualMachineCreateDeploymentcreateDeploymentParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCreateDeploymentcreateDeploymentGenerate1.command('create-deployment')
  .description($('Generate virtualMachineCreateDeployment parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"deploymentSlot\":0,\"dnsSettings\":{\"dnsServers\":[{\"address\":\"\",\"name\":\"\"}]},\"label\":\"\",\"loadBalancers\":[{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}],\"name\":\"\",\"reservedIPName\":\"\",\"roles\":[{\"availabilitySetName\":\"\",\"configurationSets\":[{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"defaultWinRmCertificateThumbprint\":\"\",\"label\":\"\",\"mediaLocation\":\"\",\"oSVersion\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"roleType\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}],\"virtualNetworkName\":\"\"}', _);
    var filePath = 'virtualMachineCreateDeployment_createDeployment.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"deploymentSlot\":0,\r\n\"dnsSettings\":{\r\n\"dnsServers\":[\r\n{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}\r\n]\r\n},\r\n\"label\":\"\",\r\n\"loadBalancers\":[\r\n{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}\r\n],\r\n\"name\":\"\",\r\n\"reservedIPName\":\"\",\r\n\"roles\":[\r\n{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"defaultWinRmCertificateThumbprint\":\"\",\r\n\"label\":\"\",\r\n\"mediaLocation\":\"\",\r\n\"oSVersion\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"roleType\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}\r\n],\r\n\"virtualNetworkName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCreateDeploymentcreateDeploymentParameters1.command('patch')
  .description($('Command to patch virtualMachineCreateDeployment parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.command('virtual-machine-create-deployment-parameters')
  .description($('Set catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--deployment-slot <deploymentSlot>', $('Set the deployment-slot value.'))
  .option('--dns-settings <dnsSettings>', $('Set the dns-settings value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--load-balancers <loadBalancers>', $('Set the load-balancers value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--reserved-ip-name <reservedIPName>', $('Set the reserved-ip-name value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .option('--virtual-network-name <virtualNetworkName>', $('Set the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'deploymentSlot';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.deploymentSlot) {
      if (options.parse && options.deploymentSlot) {
        options.deploymentSlot = JSON.parse(options.deploymentSlot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.deploymentSlot}]);
    }
    paramPath = options.path + '/' + 'dnsSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'loadBalancers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancers) {
      if (options.parse && options.loadBalancers) {
        options.loadBalancers = JSON.parse(options.loadBalancers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancers}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'reservedIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reservedIPName) {
      if (options.parse && options.reservedIPName) {
        options.reservedIPName = JSON.parse(options.reservedIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reservedIPName}]);
    }
    paramPath = options.path + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualNetworkName) {
      if (options.parse && options.virtualNetworkName) {
        options.virtualNetworkName = JSON.parse(options.virtualNetworkName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.command('virtual-machine-create-deployment-parameters')
  .description($('Remove catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--deployment-slot', $('Remove the deployment-slot value.'))
  .option('--dns-settings', $('Remove the dns-settings value.'))
  .option('--label', $('Remove the label value.'))
  .option('--load-balancers', $('Remove the load-balancers value.'))
  .option('--name', $('Remove the name value.'))
  .option('--reserved-ip-name', $('Remove the reserved-ip-name value.'))
  .option('--roles', $('Remove the roles value.'))
  .option('--virtual-network-name', $('Remove the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.deploymentSlot || options.dnsSettings || options.label || options.loadBalancers || options.name || options.reservedIPName || options.roles || options.virtualNetworkName;
    if (anySubItem) {
      if (options.deploymentSlot) {
        var subItemPath = options.path + "/deploymentSlot";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsSettings) {
        var subItemPath = options.path + "/dnsSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancers) {
        var subItemPath = options.path + "/loadBalancers";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reservedIPName) {
        var subItemPath = options.path + "/reservedIPName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roles) {
        var subItemPath = options.path + "/roles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkName) {
        var subItemPath = options.path + "/virtualNetworkName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2.command('virtual-machine-create-deployment-parameters')
  .description($('Remove catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--deployment-slot <deploymentSlot>', $('Add the deployment-slot value.'))
  .option('--dns-settings <dnsSettings>', $('Add the dns-settings value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--load-balancers <loadBalancers>', $('Add the load-balancers value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--reserved-ip-name <reservedIPName>', $('Add the reserved-ip-name value.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .option('--virtual-network-name <virtualNetworkName>', $('Add the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'deploymentSlot';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.deploymentSlot) {
      if (options.parse && options.deploymentSlot) {
        options.deploymentSlot = JSON.parse(options.deploymentSlot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.deploymentSlot}]);
    }
    paramPath = '' + '/' + 'dnsSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'loadBalancers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancers) {
      if (options.parse && options.loadBalancers) {
        options.loadBalancers = JSON.parse(options.loadBalancers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancers}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'reservedIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reservedIPName) {
      if (options.parse && options.reservedIPName) {
        options.reservedIPName = JSON.parse(options.reservedIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reservedIPName}]);
    }
    paramPath = '' + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    paramPath = '' + '/' + 'virtualNetworkName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualNetworkName) {
      if (options.parse && options.virtualNetworkName) {
        options.virtualNetworkName = JSON.parse(options.virtualNetworkName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-slot
  var catparametersCreateDeploymentVirtualMachineDeploymentSlot1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDeploymentSlot1 = catparametersCreateDeploymentVirtualMachineDeploymentSlot1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineDeploymentSlot1 = parametersCreateDeploymentVirtualMachineDeploymentSlot1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineDeploymentSlot1.command('deployment-slot')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDeploymentSlot1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/deploymentSlot';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-slot
  var catparametersCreateDeploymentVirtualMachineDeploymentSlot2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDeploymentSlot2 = catparametersCreateDeploymentVirtualMachineDeploymentSlot2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineDeploymentSlot2 = parametersCreateDeploymentVirtualMachineDeploymentSlot2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineDeploymentSlot2.command('deployment-slot')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDeploymentSlot2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/deploymentSlot' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-settings
  var catparametersCreateDeploymentVirtualMachineDnsSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsSettings0 = catparametersCreateDeploymentVirtualMachineDnsSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineDnsSettings0 = parametersCreateDeploymentVirtualMachineDnsSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineDnsSettings0.command('dns-settings')
  .description($('Set catparametersCreateDeploymentVirtualMachineDnsSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--dns-servers <dnsServers>', $('Set the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dnsSettings';
    var paramPath = options.path + '/' + 'dnsServers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-settings
  var catparametersCreateDeploymentVirtualMachineDnsSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsSettings1 = catparametersCreateDeploymentVirtualMachineDnsSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineDnsSettings1 = parametersCreateDeploymentVirtualMachineDnsSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineDnsSettings1.command('dns-settings')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDnsSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--dns-servers', $('Remove the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings';
    var anySubItem = false || options.dnsServers;
    if (anySubItem) {
      if (options.dnsServers) {
        var subItemPath = options.path + "/dnsServers";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-settings
  var catparametersCreateDeploymentVirtualMachineDnsSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsSettings2 = catparametersCreateDeploymentVirtualMachineDnsSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineDnsSettings2 = parametersCreateDeploymentVirtualMachineDnsSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineDnsSettings2.command('dns-settings')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDnsSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--dns-servers <dnsServers>', $('Add the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dnsSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dnsSettings' + '/' + 'dnsServers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers0 = catparametersCreateDeploymentVirtualMachineDnsServers0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineDnsServers0 = parametersCreateDeploymentVirtualMachineDnsServers0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineDnsServers0.command('dns-servers')
  .description($('Set catparametersCreateDeploymentVirtualMachineDnsServers0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers1 = catparametersCreateDeploymentVirtualMachineDnsServers1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineDnsServers1 = parametersCreateDeploymentVirtualMachineDnsServers1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineDnsServers1.command('dns-servers')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDnsServers1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--address', $('Remove the address value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.address || options.name;
    if (anySubItem) {
      if (options.address) {
        var subItemPath = options.path + "/address";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers2 = catparametersCreateDeploymentVirtualMachineDnsServers2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineDnsServers2 = parametersCreateDeploymentVirtualMachineDnsServers2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineDnsServers2.command('dns-servers')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDnsServers2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Add the address value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers0 = catparametersCreateDeploymentVirtualMachineLoadBalancers0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineLoadBalancers0 = parametersCreateDeploymentVirtualMachineLoadBalancers0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineLoadBalancers0.command('load-balancers')
  .description($('Set catparametersCreateDeploymentVirtualMachineLoadBalancers0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers1 = catparametersCreateDeploymentVirtualMachineLoadBalancers1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineLoadBalancers1 = parametersCreateDeploymentVirtualMachineLoadBalancers1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineLoadBalancers1.command('load-balancers')
  .description($('Remove catparametersCreateDeploymentVirtualMachineLoadBalancers1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.frontendIPConfiguration || options.name;
    if (anySubItem) {
      if (options.frontendIPConfiguration) {
        var subItemPath = options.path + "/frontendIPConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers2 = catparametersCreateDeploymentVirtualMachineLoadBalancers2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineLoadBalancers2 = parametersCreateDeploymentVirtualMachineLoadBalancers2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineLoadBalancers2.command('load-balancers')
  .description($('Remove catparametersCreateDeploymentVirtualMachineLoadBalancers2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.command('frontend-ip-configuration')
  .description($('Set catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.command('frontend-ip-configuration')
  .description($('Remove catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName || options.type;
    if (anySubItem) {
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        var subItemPath = options.path + "/subnetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration2 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2.command('frontend-ip-configuration')
  .description($('Remove catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set roles
  var catparametersCreateDeploymentVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles0 = catparametersCreateDeploymentVirtualMachineRoles0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineRoles0 = parametersCreateDeploymentVirtualMachineRoles0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineRoles0.command('roles')
  .description($('Set catparametersCreateDeploymentVirtualMachineRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--default-win-rm-certificate-thumbprint <defaultWinRmCertificateThumbprint>', $('Set the default-win-rm-certificate-thumbprint value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--os-version <oSVersion>', $('Set the os-version value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--role-type <roleType>', $('Set the role-type value.'))
  .option('--vm-image-input <vmImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'defaultWinRmCertificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.defaultWinRmCertificateThumbprint) {
      if (options.parse && options.defaultWinRmCertificateThumbprint) {
        options.defaultWinRmCertificateThumbprint = JSON.parse(options.defaultWinRmCertificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultWinRmCertificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'oSVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVersion) {
      if (options.parse && options.oSVersion) {
        options.oSVersion = JSON.parse(options.oSVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVersion}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'roleType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleType) {
      if (options.parse && options.roleType) {
        options.roleType = JSON.parse(options.roleType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleType}]);
    }
    paramPath = options.path + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = options.path + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove roles
  var catparametersCreateDeploymentVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles1 = catparametersCreateDeploymentVirtualMachineRoles1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineRoles1 = parametersCreateDeploymentVirtualMachineRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineRoles1.command('roles')
  .description($('Remove catparametersCreateDeploymentVirtualMachineRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--default-win-rm-certificate-thumbprint', $('Remove the default-win-rm-certificate-thumbprint value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-location', $('Remove the media-location value.'))
  .option('--os-version', $('Remove the os-version value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .option('--role-type', $('Remove the role-type value.'))
  .option('--vm-image-input', $('Remove the vm-image-input value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.defaultWinRmCertificateThumbprint || options.label || options.mediaLocation || options.oSVersion || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize || options.roleType || options.vmImageInput || options.vmImageName;
    if (anySubItem) {
      if (options.availabilitySetName) {
        var subItemPath = options.path + "/availabilitySetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        var subItemPath = options.path + "/configurationSets";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        var subItemPath = options.path + "/dataVirtualHardDisks";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.defaultWinRmCertificateThumbprint) {
        var subItemPath = options.path + "/defaultWinRmCertificateThumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLocation) {
        var subItemPath = options.path + "/mediaLocation";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVersion) {
        var subItemPath = options.path + "/oSVersion";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        var subItemPath = options.path + "/oSVirtualHardDisk";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        var subItemPath = options.path + "/provisionGuestAgent";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        var subItemPath = options.path + "/resourceExtensionReferences";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        var subItemPath = options.path + "/roleSize";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleType) {
        var subItemPath = options.path + "/roleType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmImageInput) {
        var subItemPath = options.path + "/vmImageInput";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vmImageName) {
        var subItemPath = options.path + "/vmImageName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add roles
  var catparametersCreateDeploymentVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles2 = catparametersCreateDeploymentVirtualMachineRoles2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineRoles2 = parametersCreateDeploymentVirtualMachineRoles2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineRoles2.command('roles')
  .description($('Remove catparametersCreateDeploymentVirtualMachineRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--default-win-rm-certificate-thumbprint <defaultWinRmCertificateThumbprint>', $('Add the default-win-rm-certificate-thumbprint value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-location <mediaLocation>', $('Add the media-location value.'))
  .option('--os-version <oSVersion>', $('Add the os-version value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .option('--role-type <roleType>', $('Add the role-type value.'))
  .option('--vm-image-input <vmImageInput>', $('Add the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Add the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'defaultWinRmCertificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.defaultWinRmCertificateThumbprint) {
      if (options.parse && options.defaultWinRmCertificateThumbprint) {
        options.defaultWinRmCertificateThumbprint = JSON.parse(options.defaultWinRmCertificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultWinRmCertificateThumbprint}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'oSVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVersion) {
      if (options.parse && options.oSVersion) {
        options.oSVersion = JSON.parse(options.oSVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVersion}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleType) {
      if (options.parse && options.roleType) {
        options.roleType = JSON.parse(options.roleType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleType}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets0 = catparametersCreateDeploymentVirtualMachineConfigurationSets0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineConfigurationSets0 = parametersCreateDeploymentVirtualMachineConfigurationSets0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineConfigurationSets0.command('configuration-sets')
  .description($('Set catparametersCreateDeploymentVirtualMachineConfigurationSets0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets1 = catparametersCreateDeploymentVirtualMachineConfigurationSets1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineConfigurationSets1 = parametersCreateDeploymentVirtualMachineConfigurationSets1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineConfigurationSets1.command('configuration-sets')
  .description($('Remove catparametersCreateDeploymentVirtualMachineConfigurationSets1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      if (options.adminPassword) {
        var subItemPath = options.path + "/adminPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        var subItemPath = options.path + "/adminUserName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        var subItemPath = options.path + "/computerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        var subItemPath = options.path + "/configurationSetType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        var subItemPath = options.path + "/customData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        var subItemPath = options.path + "/disableSshPasswordAuthentication";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        var subItemPath = options.path + "/domainJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        var subItemPath = options.path + "/enableAutomaticUpdates";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        var subItemPath = options.path + "/hostName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        var subItemPath = options.path + "/inputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        var subItemPath = options.path + "/networkInterfaces";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        var subItemPath = options.path + "/publicIPs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        var subItemPath = options.path + "/resetPasswordOnFirstLogon";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        var subItemPath = options.path + "/sshSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        var subItemPath = options.path + "/storedCertificateSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        var subItemPath = options.path + "/subnetNames";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        var subItemPath = options.path + "/timeZone";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        var subItemPath = options.path + "/userPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        var subItemPath = options.path + "/windowsRemoteManagement";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets2 = catparametersCreateDeploymentVirtualMachineConfigurationSets2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineConfigurationSets2 = parametersCreateDeploymentVirtualMachineConfigurationSets2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineConfigurationSets2.command('configuration-sets')
  .description($('Remove catparametersCreateDeploymentVirtualMachineConfigurationSets2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin0 = catparametersCreateDeploymentVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineDomainJoin0 = parametersCreateDeploymentVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersCreateDeploymentVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin1 = catparametersCreateDeploymentVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineDomainJoin1 = parametersCreateDeploymentVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      if (options.credentials) {
        var subItemPath = options.path + "/credentials";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        var subItemPath = options.path + "/domainToJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        var subItemPath = options.path + "/ldapMachineObjectOU";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        var subItemPath = options.path + "/provisioning";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin2 = catparametersCreateDeploymentVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineDomainJoin2 = parametersCreateDeploymentVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersCreateDeploymentVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials0 = catparametersCreateDeploymentVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineCredentials0 = parametersCreateDeploymentVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersCreateDeploymentVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersCreateDeploymentVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials1 = catparametersCreateDeploymentVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineCredentials1 = parametersCreateDeploymentVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersCreateDeploymentVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      if (options.domain) {
        var subItemPath = options.path + "/domain";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        var subItemPath = options.path + "/password";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersCreateDeploymentVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials2 = catparametersCreateDeploymentVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineCredentials2 = parametersCreateDeploymentVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersCreateDeploymentVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning0 = catparametersCreateDeploymentVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineProvisioning0 = parametersCreateDeploymentVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersCreateDeploymentVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning1 = catparametersCreateDeploymentVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineProvisioning1 = parametersCreateDeploymentVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersCreateDeploymentVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      if (options.accountData) {
        var subItemPath = options.path + "/accountData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning2 = catparametersCreateDeploymentVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineProvisioning2 = parametersCreateDeploymentVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersCreateDeploymentVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints0 = catparametersCreateDeploymentVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineInputEndpoints0 = parametersCreateDeploymentVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersCreateDeploymentVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints1 = catparametersCreateDeploymentVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineInputEndpoints1 = parametersCreateDeploymentVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersCreateDeploymentVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      if (options.enableDirectServerReturn) {
        var subItemPath = options.path + "/enableDirectServerReturn";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        var subItemPath = options.path + "/endpointAcl";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        var subItemPath = options.path + "/loadBalancedEndpointSetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        var subItemPath = options.path + "/loadBalancerDistribution";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        var subItemPath = options.path + "/loadBalancerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        var subItemPath = options.path + "/loadBalancerProbe";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        var subItemPath = options.path + "/virtualIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        var subItemPath = options.path + "/virtualIPName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints2 = catparametersCreateDeploymentVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineInputEndpoints2 = parametersCreateDeploymentVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersCreateDeploymentVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersCreateDeploymentVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineEndpointAcl0 = catparametersCreateDeploymentVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineEndpointAcl0 = parametersCreateDeploymentVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersCreateDeploymentVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersCreateDeploymentVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineEndpointAcl1 = catparametersCreateDeploymentVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineEndpointAcl1 = parametersCreateDeploymentVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersCreateDeploymentVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      if (options.rules) {
        var subItemPath = options.path + "/rules";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersCreateDeploymentVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineEndpointAcl2 = catparametersCreateDeploymentVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineEndpointAcl2 = parametersCreateDeploymentVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersCreateDeploymentVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersCreateDeploymentVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules0 = catparametersCreateDeploymentVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineRules0 = parametersCreateDeploymentVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineRules0.command('rules')
  .description($('Set catparametersCreateDeploymentVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersCreateDeploymentVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules1 = catparametersCreateDeploymentVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineRules1 = parametersCreateDeploymentVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineRules1.command('rules')
  .description($('Remove catparametersCreateDeploymentVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      if (options.action) {
        var subItemPath = options.path + "/action";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        var subItemPath = options.path + "/order";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        var subItemPath = options.path + "/remoteSubnet";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersCreateDeploymentVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules2 = catparametersCreateDeploymentVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineRules2 = parametersCreateDeploymentVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineRules2.command('rules')
  .description($('Remove catparametersCreateDeploymentVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersCreateDeploymentVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersCreateDeploymentVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      if (options.intervalInSeconds) {
        var subItemPath = options.path + "/intervalInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        var subItemPath = options.path + "/timeoutInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe2 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineLoadBalancerProbe2 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersCreateDeploymentVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersCreateDeploymentVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProtocol1 = catparametersCreateDeploymentVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineProtocol1 = parametersCreateDeploymentVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersCreateDeploymentVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersCreateDeploymentVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProtocol2 = catparametersCreateDeploymentVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineProtocol2 = parametersCreateDeploymentVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersCreateDeploymentVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces0 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineNetworkInterfaces0 = parametersCreateDeploymentVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersCreateDeploymentVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces1 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineNetworkInterfaces1 = parametersCreateDeploymentVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersCreateDeploymentVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      if (options.ipConfigurations) {
        var subItemPath = options.path + "/ipConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces2 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineNetworkInterfaces2 = parametersCreateDeploymentVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersCreateDeploymentVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations0 = catparametersCreateDeploymentVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineIPConfigurations0 = parametersCreateDeploymentVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersCreateDeploymentVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations1 = catparametersCreateDeploymentVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineIPConfigurations1 = parametersCreateDeploymentVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersCreateDeploymentVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        var subItemPath = options.path + "/subnetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations2 = catparametersCreateDeploymentVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineIPConfigurations2 = parametersCreateDeploymentVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersCreateDeploymentVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs0 = catparametersCreateDeploymentVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachinePublicIPs0 = parametersCreateDeploymentVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersCreateDeploymentVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs1 = catparametersCreateDeploymentVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachinePublicIPs1 = parametersCreateDeploymentVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersCreateDeploymentVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      if (options.domainNameLabel) {
        var subItemPath = options.path + "/domainNameLabel";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs2 = catparametersCreateDeploymentVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachinePublicIPs2 = parametersCreateDeploymentVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersCreateDeploymentVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersCreateDeploymentVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSshSettings0 = catparametersCreateDeploymentVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineSshSettings0 = parametersCreateDeploymentVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersCreateDeploymentVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersCreateDeploymentVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSshSettings1 = catparametersCreateDeploymentVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineSshSettings1 = parametersCreateDeploymentVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersCreateDeploymentVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      if (options.keyPairs) {
        var subItemPath = options.path + "/keyPairs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        var subItemPath = options.path + "/publicKeys";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersCreateDeploymentVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSshSettings2 = catparametersCreateDeploymentVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineSshSettings2 = parametersCreateDeploymentVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersCreateDeploymentVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs0 = catparametersCreateDeploymentVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineKeyPairs0 = parametersCreateDeploymentVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersCreateDeploymentVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs1 = catparametersCreateDeploymentVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineKeyPairs1 = parametersCreateDeploymentVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersCreateDeploymentVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs2 = catparametersCreateDeploymentVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineKeyPairs2 = parametersCreateDeploymentVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersCreateDeploymentVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys0 = catparametersCreateDeploymentVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachinePublicKeys0 = parametersCreateDeploymentVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersCreateDeploymentVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys1 = catparametersCreateDeploymentVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachinePublicKeys1 = parametersCreateDeploymentVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersCreateDeploymentVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys2 = catparametersCreateDeploymentVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachinePublicKeys2 = parametersCreateDeploymentVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersCreateDeploymentVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersCreateDeploymentVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersCreateDeploymentVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      if (options.storeName) {
        var subItemPath = options.path + "/storeName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        var subItemPath = options.path + "/thumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings2 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineStoredCertificateSettings2 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersCreateDeploymentVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames0 = catparametersCreateDeploymentVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineSubnetNames0 = parametersCreateDeploymentVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersCreateDeploymentVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames1 = catparametersCreateDeploymentVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineSubnetNames1 = parametersCreateDeploymentVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersCreateDeploymentVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames2 = catparametersCreateDeploymentVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineSubnetNames2 = parametersCreateDeploymentVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersCreateDeploymentVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineWindowsRemoteManagement0 = catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0 = parametersCreateDeploymentVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = parametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      if (options.listeners) {
        var subItemPath = options.path + "/listeners";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineWindowsRemoteManagement2 = catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2 = parametersCreateDeploymentVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersCreateDeploymentVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners0 = catparametersCreateDeploymentVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineListeners0 = parametersCreateDeploymentVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersCreateDeploymentVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersCreateDeploymentVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners1 = catparametersCreateDeploymentVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineListeners1 = parametersCreateDeploymentVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersCreateDeploymentVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      if (options.certificateThumbprint) {
        var subItemPath = options.path + "/certificateThumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        var subItemPath = options.path + "/listenerType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersCreateDeploymentVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners2 = catparametersCreateDeploymentVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineListeners2 = parametersCreateDeploymentVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersCreateDeploymentVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersCreateDeploymentVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListenerType1 = catparametersCreateDeploymentVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineListenerType1 = parametersCreateDeploymentVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersCreateDeploymentVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersCreateDeploymentVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListenerType2 = catparametersCreateDeploymentVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineListenerType2 = parametersCreateDeploymentVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersCreateDeploymentVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.command('data-virtual-hard-disks')
  .description($('Set catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.command('data-virtual-hard-disks')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        var subItemPath = options.path + "/iOType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        var subItemPath = options.path + "/logicalDiskSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        var subItemPath = options.path + "/logicalUnitNumber";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        var subItemPath = options.path + "/sourceMediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks2 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2.command('data-virtual-hard-disks')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.command('os-virtual-hard-disk')
  .description($('Set catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.command('os-virtual-hard-disk')
  .description($('Remove catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        var subItemPath = options.path + "/iOType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        var subItemPath = options.path + "/operatingSystem";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        var subItemPath = options.path + "/remoteSourceImageLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        var subItemPath = options.path + "/sourceImageName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk2 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2.command('os-virtual-hard-disk')
  .description($('Remove catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineResourceExtensionReferences0.command('resource-extension-references')
  .description($('Set catparametersCreateDeploymentVirtualMachineResourceExtensionReferences0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineResourceExtensionReferences1.command('resource-extension-references')
  .description($('Remove catparametersCreateDeploymentVirtualMachineResourceExtensionReferences1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      if (options.forceUpdate) {
        var subItemPath = options.path + "/forceUpdate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        var subItemPath = options.path + "/publisher";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        var subItemPath = options.path + "/referenceName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        var subItemPath = options.path + "/resourceExtensionParameterValues";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        var subItemPath = options.path + "/state";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences2 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineResourceExtensionReferences2 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineResourceExtensionReferences2.command('resource-extension-references')
  .description($('Remove catparametersCreateDeploymentVirtualMachineResourceExtensionReferences2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.command('resource-extension-parameter-values')
  .description($('Set catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.command('resource-extension-parameter-values')
  .description($('Remove catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      if (options.key) {
        var subItemPath = options.path + "/key";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        var subItemPath = options.path + "/value";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2.command('resource-extension-parameter-values')
  .description($('Remove catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set vm-image-input
  var catparametersCreateDeploymentVirtualMachineVMImageInput0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVMImageInput0 = catparametersCreateDeploymentVirtualMachineVMImageInput0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineVMImageInput0 = parametersCreateDeploymentVirtualMachineVMImageInput0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineVMImageInput0.command('vm-image-input')
  .description($('Set catparametersCreateDeploymentVirtualMachineVMImageInput0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove vm-image-input
  var catparametersCreateDeploymentVirtualMachineVMImageInput1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVMImageInput1 = catparametersCreateDeploymentVirtualMachineVMImageInput1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineVMImageInput1 = parametersCreateDeploymentVirtualMachineVMImageInput1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineVMImageInput1.command('vm-image-input')
  .description($('Remove catparametersCreateDeploymentVirtualMachineVMImageInput1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput';
    var anySubItem = false || options.dataDiskConfigurations || options.oSDiskConfiguration;
    if (anySubItem) {
      if (options.dataDiskConfigurations) {
        var subItemPath = options.path + "/dataDiskConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        var subItemPath = options.path + "/oSDiskConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add vm-image-input
  var catparametersCreateDeploymentVirtualMachineVMImageInput2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVMImageInput2 = catparametersCreateDeploymentVirtualMachineVMImageInput2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineVMImageInput2 = parametersCreateDeploymentVirtualMachineVMImageInput2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineVMImageInput2.command('vm-image-input')
  .description($('Remove catparametersCreateDeploymentVirtualMachineVMImageInput2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vmImageInput' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/vmImageInput' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersCreateDeploymentVirtualMachineDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--disk-name', $('Remove the disk-name value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.diskName || options.resizedSizeInGB;
    if (anySubItem) {
      if (options.diskName) {
        var subItemPath = options.path + "/diskName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations2 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineDataDiskConfigurations2 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersCreateDeploymentVirtualMachineDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--disk-name <diskName>', $('Add the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersCreateDeploymentVirtualMachineOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersCreateDeploymentVirtualMachineOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersCreateDeploymentVirtualMachineOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersCreateDeploymentVirtualMachineOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration';
    var anySubItem = false || options.resizedSizeInGB;
    if (anySubItem) {
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration2 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersCreateDeploymentVirtualMachineOSDiskConfiguration2 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersCreateDeploymentVirtualMachineOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersCreateDeploymentVirtualMachineOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Delete
  --service-name
  --deployment-name
  --virtual-machine-name
  --delete-from-storage
*/
  var virtualMachineDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineDelete.command('delete')
  .description($('delete method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.deleteMethod(options.serviceName, options.deploymentName, options.virtualMachineName, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachine Get
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineGet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineGet.command('get')
  .description($('get method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.get(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine GetRemoteDesktopFile
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineGetRemoteDesktopFile = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineGetRemoteDesktopFile.command('get-remote-desktop-file')
  .description($('get-remote-desktop-file method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.getRemoteDesktopFile(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine Restart
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineRestart = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineRestart.command('restart')
  .description($('restart method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.restart(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine Shutdown
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postShutdownAction":0
}
*/
  var virtualMachineShutdown = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineShutdown.command('shutdown')
  .description($('shutdown method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.shutdown(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineShutdownshutdownParameters3 = virtualMachineShutdown.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineShutdownshutdownGenerate3 = virtualMachineShutdownshutdownParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineShutdownshutdownGenerate3.command('shutdown')
  .description($('Generate virtualMachineShutdown parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postShutdownAction\":0}', _);
    var filePath = 'virtualMachineShutdown_shutdown.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineShutdownshutdownParameters3.command('patch')
  .description($('Command to patch virtualMachineShutdown parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-shutdown-parameters
  var catparametersShutdownVirtualMachineVirtualMachineShutdownParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachineVirtualMachineShutdownParameters0 = catparametersShutdownVirtualMachineVirtualMachineShutdownParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersShutdownVirtualMachineVirtualMachineShutdownParameters0 = parametersShutdownVirtualMachineVirtualMachineShutdownParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersShutdownVirtualMachineVirtualMachineShutdownParameters0.command('virtual-machine-shutdown-parameters')
  .description($('Set catparametersShutdownVirtualMachineVirtualMachineShutdownParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-shutdown-parameters
  var catparametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = catparametersShutdownVirtualMachineVirtualMachineShutdownParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = parametersShutdownVirtualMachineVirtualMachineShutdownParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersShutdownVirtualMachineVirtualMachineShutdownParameters1.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersShutdownVirtualMachineVirtualMachineShutdownParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-shutdown-action', $('Remove the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postShutdownAction;
    if (anySubItem) {
      if (options.postShutdownAction) {
        var subItemPath = options.path + "/postShutdownAction";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-shutdown-parameters
  var catparametersShutdownVirtualMachineVirtualMachineShutdownParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachineVirtualMachineShutdownParameters2 = catparametersShutdownVirtualMachineVirtualMachineShutdownParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersShutdownVirtualMachineVirtualMachineShutdownParameters2 = parametersShutdownVirtualMachineVirtualMachineShutdownParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersShutdownVirtualMachineVirtualMachineShutdownParameters2.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersShutdownVirtualMachineVirtualMachineShutdownParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove post-shutdown-action
  var catparametersShutdownVirtualMachinePostShutdownAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachinePostShutdownAction1 = catparametersShutdownVirtualMachinePostShutdownAction1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersShutdownVirtualMachinePostShutdownAction1 = parametersShutdownVirtualMachinePostShutdownAction1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersShutdownVirtualMachinePostShutdownAction1.command('post-shutdown-action')
  .description($('Remove catparametersShutdownVirtualMachinePostShutdownAction1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postShutdownAction';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add post-shutdown-action
  var catparametersShutdownVirtualMachinePostShutdownAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachinePostShutdownAction2 = catparametersShutdownVirtualMachinePostShutdownAction2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersShutdownVirtualMachinePostShutdownAction2 = parametersShutdownVirtualMachinePostShutdownAction2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersShutdownVirtualMachinePostShutdownAction2.command('post-shutdown-action')
  .description($('Remove catparametersShutdownVirtualMachinePostShutdownAction2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postShutdownAction' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine ShutdownRoles
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "postShutdownAction":null,
  "roles":[
    ""
  ]
}
*/
  var virtualMachineShutdownRoles = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineShutdownRoles.command('shutdown-roles')
  .description($('shutdown-roles method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.shutdownRoles(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineShutdownRolesshutdownRolesParameters2 = virtualMachineShutdownRoles.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineShutdownRolesshutdownRolesGenerate2 = virtualMachineShutdownRolesshutdownRolesParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineShutdownRolesshutdownRolesGenerate2.command('shutdown-roles')
  .description($('Generate virtualMachineShutdownRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postShutdownAction\":null,\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineShutdownRoles_shutdownRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":null,\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineShutdownRolesshutdownRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineShutdownRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.command('virtual-machine-shutdown-roles-parameters')
  .description($('Set catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    paramPath = options.path + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.command('virtual-machine-shutdown-roles-parameters')
  .description($('Remove catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-shutdown-action', $('Remove the post-shutdown-action value.'))
  .option('--roles', $('Remove the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postShutdownAction || options.roles;
    if (anySubItem) {
      if (options.postShutdownAction) {
        var subItemPath = options.path + "/postShutdownAction";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roles) {
        var subItemPath = options.path + "/roles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2.command('virtual-machine-shutdown-roles-parameters')
  .description($('Remove catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    paramPath = '' + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set roles
  var catparametersShutdownRolesVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles0 = catparametersShutdownRolesVirtualMachineRoles0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersShutdownRolesVirtualMachineRoles0 = parametersShutdownRolesVirtualMachineRoles0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersShutdownRolesVirtualMachineRoles0.command('roles')
  .description($('Set catparametersShutdownRolesVirtualMachineRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove roles
  var catparametersShutdownRolesVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles1 = catparametersShutdownRolesVirtualMachineRoles1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersShutdownRolesVirtualMachineRoles1 = parametersShutdownRolesVirtualMachineRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersShutdownRolesVirtualMachineRoles1.command('roles')
  .description($('Remove catparametersShutdownRolesVirtualMachineRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add roles
  var catparametersShutdownRolesVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles2 = catparametersShutdownRolesVirtualMachineRoles2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersShutdownRolesVirtualMachineRoles2 = parametersShutdownRolesVirtualMachineRoles2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersShutdownRolesVirtualMachineRoles2.command('roles')
  .description($('Remove catparametersShutdownRolesVirtualMachineRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Start
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineStart = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineStart.command('start')
  .description($('start method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.start(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine StartRoles
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "roles":[
    ""
  ]
}
*/
  var virtualMachineStartRoles = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineStartRoles.command('start-roles')
  .description($('start-roles method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      var parametersValArr = options.parameters.split(',');
      cli.output.info('parametersValArr : ' + parametersValArr);
      parametersObj = {};
      parametersObj.instanceIDs = parametersValArr;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.startRoles(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineStartRolesstartRolesParameters2 = virtualMachineStartRoles.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineStartRolesstartRolesGenerate2 = virtualMachineStartRolesstartRolesParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineStartRolesstartRolesGenerate2.command('start-roles')
  .description($('Generate virtualMachineStartRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineStartRoles_startRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineStartRolesstartRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineStartRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.command('virtual-machine-start-roles-parameters')
  .description($('Set catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.command('virtual-machine-start-roles-parameters')
  .description($('Remove catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles', $('Remove the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.roles;
    if (anySubItem) {
      if (options.roles) {
        var subItemPath = options.path + "/roles";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2.command('virtual-machine-start-roles-parameters')
  .description($('Remove catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set roles
  var catparametersStartRolesVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles0 = catparametersStartRolesVirtualMachineRoles0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersStartRolesVirtualMachineRoles0 = parametersStartRolesVirtualMachineRoles0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersStartRolesVirtualMachineRoles0.command('roles')
  .description($('Set catparametersStartRolesVirtualMachineRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove roles
  var catparametersStartRolesVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles1 = catparametersStartRolesVirtualMachineRoles1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersStartRolesVirtualMachineRoles1 = parametersStartRolesVirtualMachineRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersStartRolesVirtualMachineRoles1.command('roles')
  .description($('Remove catparametersStartRolesVirtualMachineRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add roles
  var catparametersStartRolesVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles2 = catparametersStartRolesVirtualMachineRoles2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersStartRolesVirtualMachineRoles2 = parametersStartRolesVirtualMachineRoles2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersStartRolesVirtualMachineRoles2.command('roles')
  .description($('Remove catparametersStartRolesVirtualMachineRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Update
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":0,
            "protocol":0,
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":0
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "label":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":""
}
*/
  var virtualMachineUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineUpdate.command('update')
  .description($('update method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.update(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineUpdateupdateParameters3 = virtualMachineUpdate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineUpdateupdateGenerate3 = virtualMachineUpdateupdateParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineUpdateupdateGenerate3.command('update')
  .description($('Generate virtualMachineUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"label\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\"}', _);
    var filePath = 'virtualMachineUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"label\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineUpdateupdateParameters3.command('patch')
  .description($('Command to patch virtualMachineUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineVirtualMachineUpdateParameters0.command('virtual-machine-update-parameters')
  .description($('Set catparametersUpdateVirtualMachineVirtualMachineUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineVirtualMachineUpdateParameters1.command('virtual-machine-update-parameters')
  .description($('Remove catparametersUpdateVirtualMachineVirtualMachineUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--label', $('Remove the label value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.label || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize;
    if (anySubItem) {
      if (options.availabilitySetName) {
        var subItemPath = options.path + "/availabilitySetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        var subItemPath = options.path + "/configurationSets";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        var subItemPath = options.path + "/dataVirtualHardDisks";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        var subItemPath = options.path + "/oSVirtualHardDisk";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        var subItemPath = options.path + "/provisionGuestAgent";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        var subItemPath = options.path + "/resourceExtensionReferences";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        var subItemPath = options.path + "/roleName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        var subItemPath = options.path + "/roleSize";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters2 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineVirtualMachineUpdateParameters2 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineVirtualMachineUpdateParameters2.command('virtual-machine-update-parameters')
  .description($('Remove catparametersUpdateVirtualMachineVirtualMachineUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '' + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '' + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '' + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '' + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '' + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '' + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets0 = catparametersUpdateVirtualMachineConfigurationSets0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineConfigurationSets0 = parametersUpdateVirtualMachineConfigurationSets0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineConfigurationSets0.command('configuration-sets')
  .description($('Set catparametersUpdateVirtualMachineConfigurationSets0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets1 = catparametersUpdateVirtualMachineConfigurationSets1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineConfigurationSets1 = parametersUpdateVirtualMachineConfigurationSets1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineConfigurationSets1.command('configuration-sets')
  .description($('Remove catparametersUpdateVirtualMachineConfigurationSets1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      if (options.adminPassword) {
        var subItemPath = options.path + "/adminPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        var subItemPath = options.path + "/adminUserName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        var subItemPath = options.path + "/computerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        var subItemPath = options.path + "/configurationSetType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        var subItemPath = options.path + "/customData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        var subItemPath = options.path + "/disableSshPasswordAuthentication";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        var subItemPath = options.path + "/domainJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        var subItemPath = options.path + "/enableAutomaticUpdates";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        var subItemPath = options.path + "/hostName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        var subItemPath = options.path + "/inputEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        var subItemPath = options.path + "/networkInterfaces";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        var subItemPath = options.path + "/publicIPs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        var subItemPath = options.path + "/resetPasswordOnFirstLogon";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        var subItemPath = options.path + "/sshSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        var subItemPath = options.path + "/storedCertificateSettings";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        var subItemPath = options.path + "/subnetNames";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        var subItemPath = options.path + "/timeZone";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        var subItemPath = options.path + "/userPassword";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        var subItemPath = options.path + "/windowsRemoteManagement";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets2 = catparametersUpdateVirtualMachineConfigurationSets2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineConfigurationSets2 = parametersUpdateVirtualMachineConfigurationSets2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineConfigurationSets2.command('configuration-sets')
  .description($('Remove catparametersUpdateVirtualMachineConfigurationSets2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersUpdateVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin0 = catparametersUpdateVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineDomainJoin0 = parametersUpdateVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersUpdateVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersUpdateVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin1 = catparametersUpdateVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineDomainJoin1 = parametersUpdateVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersUpdateVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      if (options.credentials) {
        var subItemPath = options.path + "/credentials";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        var subItemPath = options.path + "/domainToJoin";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        var subItemPath = options.path + "/ldapMachineObjectOU";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        var subItemPath = options.path + "/provisioning";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersUpdateVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin2 = catparametersUpdateVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineDomainJoin2 = parametersUpdateVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersUpdateVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersUpdateVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials0 = catparametersUpdateVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineCredentials0 = parametersUpdateVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersUpdateVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersUpdateVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials1 = catparametersUpdateVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineCredentials1 = parametersUpdateVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersUpdateVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      if (options.domain) {
        var subItemPath = options.path + "/domain";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        var subItemPath = options.path + "/password";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        var subItemPath = options.path + "/userName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersUpdateVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials2 = catparametersUpdateVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineCredentials2 = parametersUpdateVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersUpdateVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersUpdateVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning0 = catparametersUpdateVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineProvisioning0 = parametersUpdateVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersUpdateVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersUpdateVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning1 = catparametersUpdateVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineProvisioning1 = parametersUpdateVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersUpdateVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      if (options.accountData) {
        var subItemPath = options.path + "/accountData";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersUpdateVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning2 = catparametersUpdateVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineProvisioning2 = parametersUpdateVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersUpdateVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints0 = catparametersUpdateVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineInputEndpoints0 = parametersUpdateVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersUpdateVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints1 = catparametersUpdateVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineInputEndpoints1 = parametersUpdateVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersUpdateVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      if (options.enableDirectServerReturn) {
        var subItemPath = options.path + "/enableDirectServerReturn";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        var subItemPath = options.path + "/endpointAcl";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        var subItemPath = options.path + "/loadBalancedEndpointSetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        var subItemPath = options.path + "/loadBalancerDistribution";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        var subItemPath = options.path + "/loadBalancerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        var subItemPath = options.path + "/loadBalancerProbe";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        var subItemPath = options.path + "/virtualIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        var subItemPath = options.path + "/virtualIPName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints2 = catparametersUpdateVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineInputEndpoints2 = parametersUpdateVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersUpdateVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersUpdateVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineEndpointAcl0 = catparametersUpdateVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineEndpointAcl0 = parametersUpdateVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersUpdateVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersUpdateVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineEndpointAcl1 = catparametersUpdateVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineEndpointAcl1 = parametersUpdateVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersUpdateVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      if (options.rules) {
        var subItemPath = options.path + "/rules";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersUpdateVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineEndpointAcl2 = catparametersUpdateVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineEndpointAcl2 = parametersUpdateVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersUpdateVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersUpdateVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules0 = catparametersUpdateVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineRules0 = parametersUpdateVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineRules0.command('rules')
  .description($('Set catparametersUpdateVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersUpdateVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules1 = catparametersUpdateVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineRules1 = parametersUpdateVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineRules1.command('rules')
  .description($('Remove catparametersUpdateVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      if (options.action) {
        var subItemPath = options.path + "/action";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        var subItemPath = options.path + "/order";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        var subItemPath = options.path + "/remoteSubnet";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersUpdateVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules2 = catparametersUpdateVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineRules2 = parametersUpdateVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineRules2.command('rules')
  .description($('Remove catparametersUpdateVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe0 = catparametersUpdateVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineLoadBalancerProbe0 = parametersUpdateVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersUpdateVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe1 = catparametersUpdateVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineLoadBalancerProbe1 = parametersUpdateVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersUpdateVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      if (options.intervalInSeconds) {
        var subItemPath = options.path + "/intervalInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        var subItemPath = options.path + "/timeoutInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe2 = catparametersUpdateVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineLoadBalancerProbe2 = parametersUpdateVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersUpdateVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersUpdateVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProtocol1 = catparametersUpdateVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineProtocol1 = parametersUpdateVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersUpdateVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersUpdateVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProtocol2 = catparametersUpdateVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineProtocol2 = parametersUpdateVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersUpdateVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces0 = catparametersUpdateVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineNetworkInterfaces0 = parametersUpdateVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersUpdateVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces1 = catparametersUpdateVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineNetworkInterfaces1 = parametersUpdateVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersUpdateVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      if (options.ipConfigurations) {
        var subItemPath = options.path + "/ipConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        var subItemPath = options.path + "/ipForwarding";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        var subItemPath = options.path + "/networkSecurityGroup";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces2 = catparametersUpdateVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineNetworkInterfaces2 = parametersUpdateVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersUpdateVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations0 = catparametersUpdateVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineIPConfigurations0 = parametersUpdateVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersUpdateVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations1 = catparametersUpdateVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineIPConfigurations1 = parametersUpdateVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersUpdateVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      if (options.staticVirtualNetworkIPAddress) {
        var subItemPath = options.path + "/staticVirtualNetworkIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        var subItemPath = options.path + "/subnetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations2 = catparametersUpdateVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineIPConfigurations2 = parametersUpdateVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersUpdateVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersUpdateVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs0 = catparametersUpdateVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachinePublicIPs0 = parametersUpdateVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersUpdateVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersUpdateVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs1 = catparametersUpdateVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachinePublicIPs1 = parametersUpdateVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersUpdateVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      if (options.domainNameLabel) {
        var subItemPath = options.path + "/domainNameLabel";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersUpdateVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs2 = catparametersUpdateVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachinePublicIPs2 = parametersUpdateVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersUpdateVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersUpdateVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSshSettings0 = catparametersUpdateVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineSshSettings0 = parametersUpdateVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersUpdateVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersUpdateVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSshSettings1 = catparametersUpdateVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineSshSettings1 = parametersUpdateVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersUpdateVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      if (options.keyPairs) {
        var subItemPath = options.path + "/keyPairs";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        var subItemPath = options.path + "/publicKeys";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersUpdateVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSshSettings2 = catparametersUpdateVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineSshSettings2 = parametersUpdateVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersUpdateVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersUpdateVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs0 = catparametersUpdateVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineKeyPairs0 = parametersUpdateVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersUpdateVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersUpdateVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs1 = catparametersUpdateVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineKeyPairs1 = parametersUpdateVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersUpdateVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersUpdateVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs2 = catparametersUpdateVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineKeyPairs2 = parametersUpdateVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersUpdateVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersUpdateVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys0 = catparametersUpdateVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachinePublicKeys0 = parametersUpdateVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersUpdateVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersUpdateVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys1 = catparametersUpdateVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachinePublicKeys1 = parametersUpdateVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersUpdateVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      if (options.fingerprint) {
        var subItemPath = options.path + "/fingerprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersUpdateVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys2 = catparametersUpdateVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachinePublicKeys2 = parametersUpdateVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersUpdateVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings0 = catparametersUpdateVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineStoredCertificateSettings0 = parametersUpdateVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersUpdateVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings1 = catparametersUpdateVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineStoredCertificateSettings1 = parametersUpdateVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersUpdateVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      if (options.storeName) {
        var subItemPath = options.path + "/storeName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        var subItemPath = options.path + "/thumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings2 = catparametersUpdateVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineStoredCertificateSettings2 = parametersUpdateVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersUpdateVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersUpdateVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames0 = catparametersUpdateVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineSubnetNames0 = parametersUpdateVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersUpdateVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersUpdateVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames1 = catparametersUpdateVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineSubnetNames1 = parametersUpdateVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersUpdateVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersUpdateVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames2 = catparametersUpdateVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineSubnetNames2 = parametersUpdateVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersUpdateVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersUpdateVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineWindowsRemoteManagement0 = catparametersUpdateVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineWindowsRemoteManagement0 = parametersUpdateVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersUpdateVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersUpdateVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineWindowsRemoteManagement1 = catparametersUpdateVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineWindowsRemoteManagement1 = parametersUpdateVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersUpdateVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      if (options.listeners) {
        var subItemPath = options.path + "/listeners";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersUpdateVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineWindowsRemoteManagement2 = catparametersUpdateVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineWindowsRemoteManagement2 = parametersUpdateVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersUpdateVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersUpdateVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners0 = catparametersUpdateVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineListeners0 = parametersUpdateVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersUpdateVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersUpdateVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners1 = catparametersUpdateVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineListeners1 = parametersUpdateVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersUpdateVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      if (options.certificateThumbprint) {
        var subItemPath = options.path + "/certificateThumbprint";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        var subItemPath = options.path + "/listenerType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersUpdateVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners2 = catparametersUpdateVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineListeners2 = parametersUpdateVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersUpdateVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersUpdateVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListenerType1 = catparametersUpdateVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineListenerType1 = parametersUpdateVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersUpdateVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersUpdateVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListenerType2 = catparametersUpdateVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineListenerType2 = parametersUpdateVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersUpdateVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks0 = catparametersUpdateVirtualMachineDataVirtualHardDisks0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineDataVirtualHardDisks0 = parametersUpdateVirtualMachineDataVirtualHardDisks0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineDataVirtualHardDisks0.command('data-virtual-hard-disks')
  .description($('Set catparametersUpdateVirtualMachineDataVirtualHardDisks0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks1 = catparametersUpdateVirtualMachineDataVirtualHardDisks1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineDataVirtualHardDisks1 = parametersUpdateVirtualMachineDataVirtualHardDisks1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineDataVirtualHardDisks1.command('data-virtual-hard-disks')
  .description($('Remove catparametersUpdateVirtualMachineDataVirtualHardDisks1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        var subItemPath = options.path + "/iOType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        var subItemPath = options.path + "/logicalDiskSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        var subItemPath = options.path + "/logicalUnitNumber";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        var subItemPath = options.path + "/sourceMediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks2 = catparametersUpdateVirtualMachineDataVirtualHardDisks2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineDataVirtualHardDisks2 = parametersUpdateVirtualMachineDataVirtualHardDisks2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineDataVirtualHardDisks2.command('data-virtual-hard-disks')
  .description($('Remove catparametersUpdateVirtualMachineDataVirtualHardDisks2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk0 = catparametersUpdateVirtualMachineOSVirtualHardDisk0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineOSVirtualHardDisk0 = parametersUpdateVirtualMachineOSVirtualHardDisk0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineOSVirtualHardDisk0.command('os-virtual-hard-disk')
  .description($('Set catparametersUpdateVirtualMachineOSVirtualHardDisk0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk1 = catparametersUpdateVirtualMachineOSVirtualHardDisk1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineOSVirtualHardDisk1 = parametersUpdateVirtualMachineOSVirtualHardDisk1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineOSVirtualHardDisk1.command('os-virtual-hard-disk')
  .description($('Remove catparametersUpdateVirtualMachineOSVirtualHardDisk1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        var subItemPath = options.path + "/iOType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        var subItemPath = options.path + "/operatingSystem";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        var subItemPath = options.path + "/remoteSourceImageLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        var subItemPath = options.path + "/resizedSizeInGB";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        var subItemPath = options.path + "/sourceImageName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk2 = catparametersUpdateVirtualMachineOSVirtualHardDisk2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineOSVirtualHardDisk2 = parametersUpdateVirtualMachineOSVirtualHardDisk2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineOSVirtualHardDisk2.command('os-virtual-hard-disk')
  .description($('Remove catparametersUpdateVirtualMachineOSVirtualHardDisk2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences0 = catparametersUpdateVirtualMachineResourceExtensionReferences0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineResourceExtensionReferences0 = parametersUpdateVirtualMachineResourceExtensionReferences0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineResourceExtensionReferences0.command('resource-extension-references')
  .description($('Set catparametersUpdateVirtualMachineResourceExtensionReferences0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences1 = catparametersUpdateVirtualMachineResourceExtensionReferences1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineResourceExtensionReferences1 = parametersUpdateVirtualMachineResourceExtensionReferences1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineResourceExtensionReferences1.command('resource-extension-references')
  .description($('Remove catparametersUpdateVirtualMachineResourceExtensionReferences1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      if (options.forceUpdate) {
        var subItemPath = options.path + "/forceUpdate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        var subItemPath = options.path + "/publisher";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        var subItemPath = options.path + "/referenceName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        var subItemPath = options.path + "/resourceExtensionParameterValues";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        var subItemPath = options.path + "/state";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences2 = catparametersUpdateVirtualMachineResourceExtensionReferences2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineResourceExtensionReferences2 = parametersUpdateVirtualMachineResourceExtensionReferences2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineResourceExtensionReferences2.command('resource-extension-references')
  .description($('Remove catparametersUpdateVirtualMachineResourceExtensionReferences2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues0 = catparametersUpdateVirtualMachineResourceExtensionParameterValues0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateVirtualMachineResourceExtensionParameterValues0 = parametersUpdateVirtualMachineResourceExtensionParameterValues0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateVirtualMachineResourceExtensionParameterValues0.command('resource-extension-parameter-values')
  .description($('Set catparametersUpdateVirtualMachineResourceExtensionParameterValues0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues1 = catparametersUpdateVirtualMachineResourceExtensionParameterValues1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateVirtualMachineResourceExtensionParameterValues1 = parametersUpdateVirtualMachineResourceExtensionParameterValues1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateVirtualMachineResourceExtensionParameterValues1.command('resource-extension-parameter-values')
  .description($('Remove catparametersUpdateVirtualMachineResourceExtensionParameterValues1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      if (options.key) {
        var subItemPath = options.path + "/key";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        var subItemPath = options.path + "/type";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        var subItemPath = options.path + "/value";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues2 = catparametersUpdateVirtualMachineResourceExtensionParameterValues2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateVirtualMachineResourceExtensionParameterValues2 = parametersUpdateVirtualMachineResourceExtensionParameterValues2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateVirtualMachineResourceExtensionParameterValues2.command('resource-extension-parameter-values')
  .description($('Remove catparametersUpdateVirtualMachineResourceExtensionParameterValues2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine UpdateLoadBalancedEndpointSet
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "loadBalancedEndpoints":[
    {
      "enableDirectServerReturn":null,
      "idleTimeoutInMinutes":null,
      "loadBalancedEndpointSetName":"",
      "loadBalancerDistribution":"",
      "loadBalancerName":"",
      "loadBalancerProbe":{
        "intervalInSeconds":null,
        "path":"",
        "port":0,
        "protocol":0,
        "timeoutInSeconds":null
      },
      "localPort":null,
      "name":"",
      "port":null,
      "protocol":"",
      "rules":[
        {
          "action":"",
          "description":"",
          "order":null,
          "remoteSubnet":""
        }
      ],
      "virtualIPAddress":"",
      "virtualIPName":""
    }
  ]
}
*/
  var virtualMachineUpdateLoadBalancedEndpointSet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineUpdateLoadBalancedEndpointSet.command('update-load-balanced-endpoint-set')
  .description($('update-load-balanced-endpoint-set method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.updateLoadBalancedEndpointSet(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2 = virtualMachineUpdateLoadBalancedEndpointSet.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetGenerate2 = virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetGenerate2.command('update-load-balanced-endpoint-set')
  .description($('Generate virtualMachineUpdateLoadBalancedEndpointSet parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"loadBalancedEndpoints\":[{\"enableDirectServerReturn\":null,\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}],\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}]}', _);
    var filePath = 'virtualMachineUpdateLoadBalancedEndpointSet_updateLoadBalancedEndpointSet.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"loadBalancedEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n],\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.command('patch')
  .description($('Command to patch virtualMachineUpdateLoadBalancedEndpointSet parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-update-load-balanced-set-parameters
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.command('virtual-machine-update-load-balanced-set-parameters')
  .description($('Set catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balanced-endpoints <loadBalancedEndpoints>', $('Set the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'loadBalancedEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpoints) {
      if (options.parse && options.loadBalancedEndpoints) {
        options.loadBalancedEndpoints = JSON.parse(options.loadBalancedEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-update-load-balanced-set-parameters
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.command('virtual-machine-update-load-balanced-set-parameters')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints', $('Remove the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.loadBalancedEndpoints;
    if (anySubItem) {
      if (options.loadBalancedEndpoints) {
        var subItemPath = options.path + "/loadBalancedEndpoints";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-update-load-balanced-set-parameters
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.command('virtual-machine-update-load-balanced-set-parameters')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balanced-endpoints <loadBalancedEndpoints>', $('Add the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'loadBalancedEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpoints) {
      if (options.parse && options.loadBalancedEndpoints) {
        options.loadBalancedEndpoints = JSON.parse(options.loadBalancedEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.command('load-balanced-endpoints')
  .description($('Set catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.command('load-balanced-endpoints')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--rules', $('Remove the rules value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.rules || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      if (options.enableDirectServerReturn) {
        var subItemPath = options.path + "/enableDirectServerReturn";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        var subItemPath = options.path + "/idleTimeoutInMinutes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        var subItemPath = options.path + "/loadBalancedEndpointSetName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        var subItemPath = options.path + "/loadBalancerDistribution";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        var subItemPath = options.path + "/loadBalancerName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        var subItemPath = options.path + "/loadBalancerProbe";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        var subItemPath = options.path + "/localPort";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.rules) {
        var subItemPath = options.path + "/rules";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        var subItemPath = options.path + "/virtualIPAddress";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        var subItemPath = options.path + "/virtualIPName";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2.command('load-balanced-endpoints')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      if (options.intervalInSeconds) {
        var subItemPath = options.path + "/intervalInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        var subItemPath = options.path + "/path";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        var subItemPath = options.path + "/port";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        var subItemPath = options.path + "/protocol";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        var subItemPath = options.path + "/timeoutInSeconds";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe/protocol';
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.command('rules')
  .description($('Set catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.command('rules')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      if (options.action) {
        var subItemPath = options.path + "/action";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        var subItemPath = options.path + "/order";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        var subItemPath = options.path + "/remoteSubnet";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2.command('rules')
  .description($('Remove catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineOSImage Create
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":false,
  "label":"",
  "language":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":false,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageCreate.command('create')
  .description($('create method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.create(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineOSImageCreatecreateParameters0 = virtualMachineOSImageCreate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine os image.'));
  var virtualMachineOSImageCreatecreateGenerate0 = virtualMachineOSImageCreatecreateParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine os image.'));
  virtualMachineOSImageCreatecreateGenerate0.command('create')
  .description($('Generate virtualMachineOSImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":false,\"label\":\"\",\"language\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":false,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":false,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":false,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineOSImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineOSImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.command('virtual-machine-os-image-create-parameters')
  .description($('Set catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.command('virtual-machine-os-image-create-parameters')
  .description($('Remove catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--is-premium', $('Remove the is-premium value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.eula || options.iconUri || options.imageFamily || options.isPremium || options.label || options.language || options.mediaLinkUri || options.name || options.operatingSystemType || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        var subItemPath = options.path + "/eula";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        var subItemPath = options.path + "/iconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        var subItemPath = options.path + "/imageFamily";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isPremium) {
        var subItemPath = options.path + "/isPremium";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        var subItemPath = options.path + "/language";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        var subItemPath = options.path + "/mediaLinkUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        var subItemPath = options.path + "/operatingSystemType";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        var subItemPath = options.path + "/privacyUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        var subItemPath = options.path + "/publishedDate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        var subItemPath = options.path + "/recommendedVMSize";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        var subItemPath = options.path + "/showInGui";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        var subItemPath = options.path + "/smallIconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.command('virtual-machine-os-image-create-parameters')
  .description($('Remove catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--is-premium <isPremium>', $('Add the is-premium value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineOSImage Delete
  --image-name
  --delete-from-storage
*/
  var virtualMachineOSImageDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageDelete.command('delete')
  .description($('delete method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.deleteMethod(options.imageName, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Get
  --image-name
*/
  var virtualMachineOSImageGet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageGet.command('get')
  .description($('get method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.get(options.imageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage GetDetails
  --image-name
*/
  var virtualMachineOSImageGetDetails = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageGetDetails.command('get-details')
  .description($('get-details method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.getDetails(options.imageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage List
*/
  var virtualMachineOSImageList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageList.command('list')
  .description($('list method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.list(_);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Replicate
  --image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineOSImageReplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageReplicate.command('replicate')
  .description($('replicate method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.replicate(options.imageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineOSImageReplicatereplicateParameters1 = virtualMachineOSImageReplicate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine os image.'));
  var virtualMachineOSImageReplicatereplicateGenerate1 = virtualMachineOSImageReplicatereplicateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine os image.'));
  virtualMachineOSImageReplicatereplicateGenerate1.command('replicate')
  .description($('Generate virtualMachineOSImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineOSImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineOSImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.command('virtual-machine-os-image-replicate-parameters')
  .description($('Set catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.command('virtual-machine-os-image-replicate-parameters')
  .description($('Remove catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--compute-image-attributes', $('Remove the compute-image-attributes value.'))
  .option('--marketplace-image-attributes', $('Remove the marketplace-image-attributes value.'))
  .option('--target-locations', $('Remove the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.computeImageAttributes || options.marketplaceImageAttributes || options.targetLocations;
    if (anySubItem) {
      if (options.computeImageAttributes) {
        var subItemPath = options.path + "/computeImageAttributes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.marketplaceImageAttributes) {
        var subItemPath = options.path + "/marketplaceImageAttributes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetLocations) {
        var subItemPath = options.path + "/targetLocations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.command('virtual-machine-os-image-replicate-parameters')
  .description($('Remove catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Add the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Add the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Add the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = '' + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = '' + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes0 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersReplicateVirtualMachineOSImageComputeImageAttributes0 = parametersReplicateVirtualMachineOSImageComputeImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersReplicateVirtualMachineOSImageComputeImageAttributes0.command('compute-image-attributes')
  .description($('Set catparametersReplicateVirtualMachineOSImageComputeImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var paramPath = options.path + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes1 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersReplicateVirtualMachineOSImageComputeImageAttributes1 = parametersReplicateVirtualMachineOSImageComputeImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersReplicateVirtualMachineOSImageComputeImageAttributes1.command('compute-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineOSImageComputeImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    var anySubItem = false || options.offer || options.sku || options.version;
    if (anySubItem) {
      if (options.offer) {
        var subItemPath = options.path + "/offer";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        var subItemPath = options.path + "/sku";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes2 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersReplicateVirtualMachineOSImageComputeImageAttributes2 = parametersReplicateVirtualMachineOSImageComputeImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersReplicateVirtualMachineOSImageComputeImageAttributes2.command('compute-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineOSImageComputeImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/computeImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/computeImageAttributes' + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.command('marketplace-image-attributes')
  .description($('Set catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var paramPath = options.path + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.command('marketplace-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--publisher-id', $('Remove the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    var anySubItem = false || options.plan || options.publisherId;
    if (anySubItem) {
      if (options.plan) {
        var subItemPath = options.path + "/plan";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherId) {
        var subItemPath = options.path + "/publisherId";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2.command('marketplace-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Add the plan value.'))
  .option('--publisher-id <publisherId>', $('Add the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes' + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = '/marketplaceImageAttributes' + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set plan
  var catparametersReplicateVirtualMachineOSImagePlan0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImagePlan0 = catparametersReplicateVirtualMachineOSImagePlan0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersReplicateVirtualMachineOSImagePlan0 = parametersReplicateVirtualMachineOSImagePlan0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersReplicateVirtualMachineOSImagePlan0.command('plan')
  .description($('Set catparametersReplicateVirtualMachineOSImagePlan0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove plan
  var catparametersReplicateVirtualMachineOSImagePlan1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImagePlan1 = catparametersReplicateVirtualMachineOSImagePlan1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersReplicateVirtualMachineOSImagePlan1 = parametersReplicateVirtualMachineOSImagePlan1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersReplicateVirtualMachineOSImagePlan1.command('plan')
  .description($('Remove catparametersReplicateVirtualMachineOSImagePlan1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--product', $('Remove the product value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    var anySubItem = false || options.name || options.product || options.publisher;
    if (anySubItem) {
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        var subItemPath = options.path + "/product";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        var subItemPath = options.path + "/publisher";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add plan
  var catparametersReplicateVirtualMachineOSImagePlan2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImagePlan2 = catparametersReplicateVirtualMachineOSImagePlan2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersReplicateVirtualMachineOSImagePlan2 = parametersReplicateVirtualMachineOSImagePlan2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersReplicateVirtualMachineOSImagePlan2.command('plan')
  .description($('Remove catparametersReplicateVirtualMachineOSImagePlan2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--product <product>', $('Add the product value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes/plan' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes/plan' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations0 = catparametersReplicateVirtualMachineOSImageTargetLocations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersReplicateVirtualMachineOSImageTargetLocations0 = parametersReplicateVirtualMachineOSImageTargetLocations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersReplicateVirtualMachineOSImageTargetLocations0.command('target-locations')
  .description($('Set catparametersReplicateVirtualMachineOSImageTargetLocations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations1 = catparametersReplicateVirtualMachineOSImageTargetLocations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersReplicateVirtualMachineOSImageTargetLocations1 = parametersReplicateVirtualMachineOSImageTargetLocations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersReplicateVirtualMachineOSImageTargetLocations1.command('target-locations')
  .description($('Remove catparametersReplicateVirtualMachineOSImageTargetLocations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations2 = catparametersReplicateVirtualMachineOSImageTargetLocations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersReplicateVirtualMachineOSImageTargetLocations2 = parametersReplicateVirtualMachineOSImageTargetLocations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersReplicateVirtualMachineOSImageTargetLocations2.command('target-locations')
  .description($('Remove catparametersReplicateVirtualMachineOSImageTargetLocations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineOSImage Share
  --image-name
  --permission
*/
  var virtualMachineOSImageShare = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageShare.command('share')
  .description($('share method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--permission <permission>', $('permission'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('permission = ' + options.permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.share(options.imageName, options.permission, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Unreplicate
  --image-name
*/
  var virtualMachineOSImageUnreplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageUnreplicate.command('unreplicate')
  .description($('unreplicate method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.unreplicate(options.imageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Update
  --image-name
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":null,
  "label":"",
  "language":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageUpdate.command('update')
  .description($('update method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.update(options.imageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineOSImageUpdateupdateParameters1 = virtualMachineOSImageUpdate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine os image.'));
  var virtualMachineOSImageUpdateupdateGenerate1 = virtualMachineOSImageUpdateupdateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine os image.'));
  virtualMachineOSImageUpdateupdateGenerate1.command('update')
  .description($('Generate virtualMachineOSImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":null,\"label\":\"\",\"language\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":null,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineOSImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.command('virtual-machine-os-image-update-parameters')
  .description($('Set catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.command('virtual-machine-os-image-update-parameters')
  .description($('Remove catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--is-premium', $('Remove the is-premium value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.eula || options.iconUri || options.imageFamily || options.isPremium || options.label || options.language || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        var subItemPath = options.path + "/eula";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        var subItemPath = options.path + "/iconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        var subItemPath = options.path + "/imageFamily";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isPremium) {
        var subItemPath = options.path + "/isPremium";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        var subItemPath = options.path + "/language";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        var subItemPath = options.path + "/privacyUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        var subItemPath = options.path + "/publishedDate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        var subItemPath = options.path + "/recommendedVMSize";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        var subItemPath = options.path + "/showInGui";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        var subItemPath = options.path + "/smallIconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.command('virtual-machine-os-image-update-parameters')
  .description($('Remove catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--is-premium <isPremium>', $('Add the is-premium value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineVMImage Create
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "mediaLink":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "name":"",
  "oSDiskConfiguration":{
    "hostCaching":"",
    "mediaLink":"",
    "oS":"",
    "oSState":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageCreate.command('create')
  .description($('create method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.create(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineVMImageCreatecreateParameters0 = virtualMachineVMImageCreate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine vm image.'));
  var virtualMachineVMImageCreatecreateGenerate0 = virtualMachineVMImageCreatecreateParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine vm image.'));
  virtualMachineVMImageCreatecreateGenerate0.command('create')
  .description($('Generate virtualMachineVMImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"mediaLink\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"name\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\",\"mediaLink\":\"\",\"oS\":\"\",\"oSState\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"name\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\",\r\n\"mediaLink\":\"\",\r\n\"oS\":\"\",\r\n\"oSState\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineVMImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineVMImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.command('virtual-machine-vm-image-create-parameters')
  .description($('Set catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.command('virtual-machine-vm-image-create-parameters')
  .description($('Remove catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--name', $('Remove the name value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.dataDiskConfigurations || options.description || options.eula || options.iconUri || options.imageFamily || options.label || options.language || options.name || options.oSDiskConfiguration || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      if (options.dataDiskConfigurations) {
        var subItemPath = options.path + "/dataDiskConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        var subItemPath = options.path + "/eula";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        var subItemPath = options.path + "/iconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        var subItemPath = options.path + "/imageFamily";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        var subItemPath = options.path + "/language";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        var subItemPath = options.path + "/oSDiskConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        var subItemPath = options.path + "/privacyUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        var subItemPath = options.path + "/publishedDate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        var subItemPath = options.path + "/recommendedVMSize";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        var subItemPath = options.path + "/showInGui";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        var subItemPath = options.path + "/smallIconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.command('virtual-machine-vm-image-create-parameters')
  .description($('Remove catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations0 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersCreateVirtualMachineVMImageDataDiskConfigurations0 = parametersCreateVirtualMachineVMImageDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersCreateVirtualMachineVMImageDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersCreateVirtualMachineVMImageDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations1 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersCreateVirtualMachineVMImageDataDiskConfigurations1 = parametersCreateVirtualMachineVMImageDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersCreateVirtualMachineVMImageDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersCreateVirtualMachineVMImageDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.logicalUnitNumber || options.mediaLink;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        var subItemPath = options.path + "/logicalUnitNumber";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations2 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersCreateVirtualMachineVMImageDataDiskConfigurations2 = parametersCreateVirtualMachineVMImageDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersCreateVirtualMachineVMImageDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersCreateVirtualMachineVMImageDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration0 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersCreateVirtualMachineVMImageOSDiskConfiguration0 = parametersCreateVirtualMachineVMImageOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersCreateVirtualMachineVMImageOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersCreateVirtualMachineVMImageOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--os <oS>', $('Set the os value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'oS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oS) {
      if (options.parse && options.oS) {
        options.oS = JSON.parse(options.oS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oS}]);
    }
    paramPath = options.path + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration1 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersCreateVirtualMachineVMImageOSDiskConfiguration1 = parametersCreateVirtualMachineVMImageOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersCreateVirtualMachineVMImageOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersCreateVirtualMachineVMImageOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--os', $('Remove the os value.'))
  .option('--os-state', $('Remove the os-state value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    var anySubItem = false || options.hostCaching || options.mediaLink || options.oS || options.oSState;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        var subItemPath = options.path + "/mediaLink";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oS) {
        var subItemPath = options.path + "/oS";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSState) {
        var subItemPath = options.path + "/oSState";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration2 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersCreateVirtualMachineVMImageOSDiskConfiguration2 = parametersCreateVirtualMachineVMImageOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersCreateVirtualMachineVMImageOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersCreateVirtualMachineVMImageOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--os <oS>', $('Add the os value.'))
  .option('--os-state <oSState>', $('Add the os-state value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSDiskConfiguration' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'oS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oS) {
      if (options.parse && options.oS) {
        options.oS = JSON.parse(options.oS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oS}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineVMImage Delete
  --vm-image-name
  --delete-from-storage
*/
  var virtualMachineVMImageDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageDelete.command('delete')
  .description($('delete method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.deleteMethod(options.vmImageName, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage GetDetails
  --vm-image-name
*/
  var virtualMachineVMImageGetDetails = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageGetDetails.command('get-details')
  .description($('get-details method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.getDetails(options.vmImageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage List
*/
  var virtualMachineVMImageList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageList.command('list')
  .description($('list method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.list(_);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage Replicate
  --vm-image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineVMImageReplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageReplicate.command('replicate')
  .description($('replicate method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.replicate(options.vmImageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineVMImageReplicatereplicateParameters1 = virtualMachineVMImageReplicate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine vm image.'));
  var virtualMachineVMImageReplicatereplicateGenerate1 = virtualMachineVMImageReplicatereplicateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine vm image.'));
  virtualMachineVMImageReplicatereplicateGenerate1.command('replicate')
  .description($('Generate virtualMachineVMImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineVMImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineVMImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.command('virtual-machine-vm-image-replicate-parameters')
  .description($('Set catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.command('virtual-machine-vm-image-replicate-parameters')
  .description($('Remove catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--compute-image-attributes', $('Remove the compute-image-attributes value.'))
  .option('--marketplace-image-attributes', $('Remove the marketplace-image-attributes value.'))
  .option('--target-locations', $('Remove the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.computeImageAttributes || options.marketplaceImageAttributes || options.targetLocations;
    if (anySubItem) {
      if (options.computeImageAttributes) {
        var subItemPath = options.path + "/computeImageAttributes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.marketplaceImageAttributes) {
        var subItemPath = options.path + "/marketplaceImageAttributes";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetLocations) {
        var subItemPath = options.path + "/targetLocations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.command('virtual-machine-vm-image-replicate-parameters')
  .description($('Remove catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Add the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Add the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Add the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = '' + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = '' + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes0 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersReplicateVirtualMachineVMImageComputeImageAttributes0 = parametersReplicateVirtualMachineVMImageComputeImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersReplicateVirtualMachineVMImageComputeImageAttributes0.command('compute-image-attributes')
  .description($('Set catparametersReplicateVirtualMachineVMImageComputeImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var paramPath = options.path + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes1 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersReplicateVirtualMachineVMImageComputeImageAttributes1 = parametersReplicateVirtualMachineVMImageComputeImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersReplicateVirtualMachineVMImageComputeImageAttributes1.command('compute-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineVMImageComputeImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    var anySubItem = false || options.offer || options.sku || options.version;
    if (anySubItem) {
      if (options.offer) {
        var subItemPath = options.path + "/offer";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        var subItemPath = options.path + "/sku";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        var subItemPath = options.path + "/version";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes2 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersReplicateVirtualMachineVMImageComputeImageAttributes2 = parametersReplicateVirtualMachineVMImageComputeImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersReplicateVirtualMachineVMImageComputeImageAttributes2.command('compute-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineVMImageComputeImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/computeImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/computeImageAttributes' + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.command('marketplace-image-attributes')
  .description($('Set catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var paramPath = options.path + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.command('marketplace-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--publisher-id', $('Remove the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    var anySubItem = false || options.plan || options.publisherId;
    if (anySubItem) {
      if (options.plan) {
        var subItemPath = options.path + "/plan";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherId) {
        var subItemPath = options.path + "/publisherId";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2.command('marketplace-image-attributes')
  .description($('Remove catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Add the plan value.'))
  .option('--publisher-id <publisherId>', $('Add the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes' + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = '/marketplaceImageAttributes' + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set plan
  var catparametersReplicateVirtualMachineVMImagePlan0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImagePlan0 = catparametersReplicateVirtualMachineVMImagePlan0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersReplicateVirtualMachineVMImagePlan0 = parametersReplicateVirtualMachineVMImagePlan0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersReplicateVirtualMachineVMImagePlan0.command('plan')
  .description($('Set catparametersReplicateVirtualMachineVMImagePlan0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove plan
  var catparametersReplicateVirtualMachineVMImagePlan1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImagePlan1 = catparametersReplicateVirtualMachineVMImagePlan1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersReplicateVirtualMachineVMImagePlan1 = parametersReplicateVirtualMachineVMImagePlan1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersReplicateVirtualMachineVMImagePlan1.command('plan')
  .description($('Remove catparametersReplicateVirtualMachineVMImagePlan1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--product', $('Remove the product value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    var anySubItem = false || options.name || options.product || options.publisher;
    if (anySubItem) {
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        var subItemPath = options.path + "/product";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        var subItemPath = options.path + "/publisher";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add plan
  var catparametersReplicateVirtualMachineVMImagePlan2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImagePlan2 = catparametersReplicateVirtualMachineVMImagePlan2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersReplicateVirtualMachineVMImagePlan2 = parametersReplicateVirtualMachineVMImagePlan2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersReplicateVirtualMachineVMImagePlan2.command('plan')
  .description($('Remove catparametersReplicateVirtualMachineVMImagePlan2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--product <product>', $('Add the product value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes/plan' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes/plan' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations0 = catparametersReplicateVirtualMachineVMImageTargetLocations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersReplicateVirtualMachineVMImageTargetLocations0 = parametersReplicateVirtualMachineVMImageTargetLocations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersReplicateVirtualMachineVMImageTargetLocations0.command('target-locations')
  .description($('Set catparametersReplicateVirtualMachineVMImageTargetLocations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations1 = catparametersReplicateVirtualMachineVMImageTargetLocations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersReplicateVirtualMachineVMImageTargetLocations1 = parametersReplicateVirtualMachineVMImageTargetLocations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersReplicateVirtualMachineVMImageTargetLocations1.command('target-locations')
  .description($('Remove catparametersReplicateVirtualMachineVMImageTargetLocations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false;
    if (anySubItem) {
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations2 = catparametersReplicateVirtualMachineVMImageTargetLocations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersReplicateVirtualMachineVMImageTargetLocations2 = parametersReplicateVirtualMachineVMImageTargetLocations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersReplicateVirtualMachineVMImageTargetLocations2.command('target-locations')
  .description($('Remove catparametersReplicateVirtualMachineVMImageTargetLocations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineVMImage Share
  --vm-image-name
  --permission
*/
  var virtualMachineVMImageShare = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageShare.command('share')
  .description($('share method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--permission <permission>', $('permission'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    cli.output.info('permission = ' + options.permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.share(options.vmImageName, options.permission, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage Unreplicate
  --vm-image-name
*/
  var virtualMachineVMImageUnreplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageUnreplicate.command('unreplicate')
  .description($('unreplicate method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.unreplicate(options.vmImageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage Update
  --image-name
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "name":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "oSDiskConfiguration":{
    "hostCaching":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageUpdate.command('update')
  .description($('update method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.update(options.imageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineVMImageUpdateupdateParameters1 = virtualMachineVMImageUpdate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine vm image.'));
  var virtualMachineVMImageUpdateupdateGenerate1 = virtualMachineVMImageUpdateupdateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine vm image.'));
  virtualMachineVMImageUpdateupdateGenerate1.command('update')
  .description($('Generate virtualMachineVMImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"name\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineVMImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.command('virtual-machine-vm-image-update-parameters')
  .description($('Set catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.command('virtual-machine-vm-image-update-parameters')
  .description($('Remove catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.dataDiskConfigurations || options.description || options.eula || options.iconUri || options.imageFamily || options.label || options.language || options.oSDiskConfiguration || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      if (options.dataDiskConfigurations) {
        var subItemPath = options.path + "/dataDiskConfigurations";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        var subItemPath = options.path + "/description";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        var subItemPath = options.path + "/eula";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        var subItemPath = options.path + "/iconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        var subItemPath = options.path + "/imageFamily";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        var subItemPath = options.path + "/label";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        var subItemPath = options.path + "/language";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        var subItemPath = options.path + "/oSDiskConfiguration";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        var subItemPath = options.path + "/privacyUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        var subItemPath = options.path + "/publishedDate";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        var subItemPath = options.path + "/recommendedVMSize";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        var subItemPath = options.path + "/showInGui";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        var subItemPath = options.path + "/smallIconUri";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.command('virtual-machine-vm-image-update-parameters')
  .description($('Remove catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersUpdateVirtualMachineVMImageDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersUpdateVirtualMachineVMImageDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersUpdateVirtualMachineVMImageDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersUpdateVirtualMachineVMImageDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.logicalUnitNumber || options.name;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        var subItemPath = options.path + "/logicalUnitNumber";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        var subItemPath = options.path + "/name";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations2 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersUpdateVirtualMachineVMImageDataDiskConfigurations2 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersUpdateVirtualMachineVMImageDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersUpdateVirtualMachineVMImageDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersUpdateVirtualMachineVMImageOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersUpdateVirtualMachineVMImageOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersUpdateVirtualMachineVMImageOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersUpdateVirtualMachineVMImageOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    var anySubItem = false || options.hostCaching;
    if (anySubItem) {
      if (options.hostCaching) {
        var subItemPath = options.path + "/hostCaching";
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration2 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersUpdateVirtualMachineVMImageOSDiskConfiguration2 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersUpdateVirtualMachineVMImageOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersUpdateVirtualMachineVMImageOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSDiskConfiguration' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });




};
