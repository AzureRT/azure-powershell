// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure;
using Microsoft.WindowsAzure.Commands.Compute.Automation.Models;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.WindowsAzure.Commands.Compute.Automation
{
    public partial class InvokeAzureComputeMethodCmdlet : ComputeAutomationBaseCmdlet
    {
        protected object CreateServiceCertificateDeleteDynamicParameters()
        {
            dynamicParameters = new RuntimeDefinedParameterDictionary();
            var pServiceName = new RuntimeDefinedParameter();
            pServiceName.Name = "ServiceName";
            pServiceName.ParameterType = typeof(string);
            pServiceName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 1,
                Mandatory = false
            });
            pServiceName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ServiceName", pServiceName);

            var pThumbprint = new RuntimeDefinedParameter();
            pThumbprint.Name = "Thumbprint";
            pThumbprint.ParameterType = typeof(string);
            pThumbprint.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 2,
                Mandatory = false
            });
            pThumbprint.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("Thumbprint", pThumbprint);

            var pThumbprintAlgorithm = new RuntimeDefinedParameter();
            pThumbprintAlgorithm.Name = "ThumbprintAlgorithm";
            pThumbprintAlgorithm.ParameterType = typeof(string);
            pThumbprintAlgorithm.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 3,
                Mandatory = false
            });
            pThumbprintAlgorithm.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ThumbprintAlgorithm", pThumbprintAlgorithm);

            var pArgumentList = new RuntimeDefinedParameter();
            pArgumentList.Name = "ArgumentList";
            pArgumentList.ParameterType = typeof(object[]);
            pArgumentList.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByStaticParameters",
                Position = 4,
                Mandatory = true
            });
            pArgumentList.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ArgumentList", pArgumentList);

            return dynamicParameters;
        }

        protected void ExecuteServiceCertificateDeleteMethod(object[] invokeMethodInputParameters)
        {
            var parameters = new ServiceCertificateDeleteParameters();
            var pServiceName = (string) ParseParameter(invokeMethodInputParameters[0]);
            parameters.ServiceName = string.IsNullOrEmpty(pServiceName) ? null : pServiceName;
            var pThumbprint = (string) ParseParameter(invokeMethodInputParameters[1]);
            parameters.Thumbprint = string.IsNullOrEmpty(pThumbprint) ? null : pThumbprint;
            var pThumbprintAlgorithm = (string) ParseParameter(invokeMethodInputParameters[2]);
            parameters.ThumbprintAlgorithm = string.IsNullOrEmpty(pThumbprintAlgorithm) ? null : pThumbprintAlgorithm;

            var result = ServiceCertificateClient.Delete(parameters);
            WriteObject(result);
        }
    }

    public partial class NewAzureComputeArgumentListCmdlet : ComputeAutomationBaseCmdlet
    {
        protected PSArgument[] CreateServiceCertificateDeleteParameters()
        {
            var pServiceName = string.Empty;
            var pThumbprint = string.Empty;
            var pThumbprintAlgorithm = string.Empty;

            return ConvertFromObjectsToArguments(
                 new string[] { "ServiceName", "Thumbprint", "ThumbprintAlgorithm" },
                 new object[] { pServiceName, pThumbprint, pThumbprintAlgorithm });
        }
    }
}
