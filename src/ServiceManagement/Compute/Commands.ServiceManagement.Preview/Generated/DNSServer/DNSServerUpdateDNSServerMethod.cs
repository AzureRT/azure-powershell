// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure;
using Microsoft.WindowsAzure.Commands.Compute.Automation.Models;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.WindowsAzure.Commands.Compute.Automation
{
    public partial class InvokeAzureComputeMethodCmdlet : ComputeAutomationBaseCmdlet
    {
        protected object CreateDNSServerUpdateDNSServerDynamicParameters()
        {
            dynamicParameters = new RuntimeDefinedParameterDictionary();
            var pServiceName = new RuntimeDefinedParameter();
            pServiceName.Name = "ServiceName";
            pServiceName.ParameterType = typeof(string);
            pServiceName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 1,
                Mandatory = false
            });
            pServiceName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ServiceName", pServiceName);

            var pDeploymentName = new RuntimeDefinedParameter();
            pDeploymentName.Name = "DeploymentName";
            pDeploymentName.ParameterType = typeof(string);
            pDeploymentName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 2,
                Mandatory = false
            });
            pDeploymentName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("DeploymentName", pDeploymentName);

            var pDnsServerName = new RuntimeDefinedParameter();
            pDnsServerName.Name = "DnsServerName";
            pDnsServerName.ParameterType = typeof(string);
            pDnsServerName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 3,
                Mandatory = false
            });
            pDnsServerName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("DnsServerName", pDnsServerName);

            var pAddress = new RuntimeDefinedParameter();
            pAddress.Name = "Address";
            pAddress.ParameterType = typeof(string);
            pAddress.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 4,
                Mandatory = false
            });
            pAddress.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("Address", pAddress);

            var pName = new RuntimeDefinedParameter();
            pName.Name = "Name";
            pName.ParameterType = typeof(string);
            pName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 5,
                Mandatory = false
            });
            pName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("Name", pName);

            var pArgumentList = new RuntimeDefinedParameter();
            pArgumentList.Name = "ArgumentList";
            pArgumentList.ParameterType = typeof(object[]);
            pArgumentList.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByStaticParameters",
                Position = 6,
                Mandatory = true
            });
            pArgumentList.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ArgumentList", pArgumentList);

            return dynamicParameters;
        }

        protected void ExecuteDNSServerUpdateDNSServerMethod(object[] invokeMethodInputParameters)
        {
            string serviceName = (string)ParseParameter(invokeMethodInputParameters[0]);
            string deploymentName = (string)ParseParameter(invokeMethodInputParameters[1]);
            string dnsServerName = (string)ParseParameter(invokeMethodInputParameters[2]);
            var parameters = new DNSUpdateParameters();
            var pAddress = (string) ParseParameter(invokeMethodInputParameters[3]);
            parameters.Address = string.IsNullOrEmpty(pAddress) ? null : pAddress;
            var pName = (string) ParseParameter(invokeMethodInputParameters[4]);
            parameters.Name = string.IsNullOrEmpty(pName) ? null : pName;

            var result = DNSServerClient.UpdateDNSServer(serviceName, deploymentName, dnsServerName, parameters);
            WriteObject(result);
        }
    }

    public partial class NewAzureComputeArgumentListCmdlet : ComputeAutomationBaseCmdlet
    {
        protected PSArgument[] CreateDNSServerUpdateDNSServerParameters()
        {
            string serviceName = string.Empty;
            string deploymentName = string.Empty;
            string dnsServerName = string.Empty;
            var pAddress = string.Empty;
            var pName = string.Empty;

            return ConvertFromObjectsToArguments(
                 new string[] { "ServiceName", "DeploymentName", "DnsServerName", "Address", "Name" },
                 new object[] { serviceName, deploymentName, dnsServerName, pAddress, pName });
        }
    }
}
