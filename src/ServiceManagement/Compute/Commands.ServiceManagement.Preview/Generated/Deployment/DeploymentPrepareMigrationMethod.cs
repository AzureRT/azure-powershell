// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure;
using Microsoft.WindowsAzure.Commands.Compute.Automation.Models;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.WindowsAzure.Commands.Compute.Automation
{
    public partial class InvokeAzureComputeMethodCmdlet : ComputeAutomationBaseCmdlet
    {
        protected object CreateDeploymentPrepareMigrationDynamicParameters()
        {
            dynamicParameters = new RuntimeDefinedParameterDictionary();
            var pServiceName = new RuntimeDefinedParameter();
            pServiceName.Name = "ServiceName";
            pServiceName.ParameterType = typeof(string);
            pServiceName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 1,
                Mandatory = true
            });
            pServiceName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ServiceName", pServiceName);

            var pDeploymentName = new RuntimeDefinedParameter();
            pDeploymentName.Name = "DeploymentName";
            pDeploymentName.ParameterType = typeof(string);
            pDeploymentName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 2,
                Mandatory = true
            });
            pDeploymentName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("DeploymentName", pDeploymentName);

            var pDestinationVirtualNetwork = new RuntimeDefinedParameter();
            pDestinationVirtualNetwork.Name = "DestinationVirtualNetwork";
            pDestinationVirtualNetwork.ParameterType = typeof(string);
            pDestinationVirtualNetwork.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 3,
                Mandatory = false
            });
            pDestinationVirtualNetwork.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("DestinationVirtualNetwork", pDestinationVirtualNetwork);

            var pResourceGroupName = new RuntimeDefinedParameter();
            pResourceGroupName.Name = "ResourceGroupName";
            pResourceGroupName.ParameterType = typeof(string);
            pResourceGroupName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 4,
                Mandatory = false
            });
            pResourceGroupName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ResourceGroupName", pResourceGroupName);

            var pSubNetName = new RuntimeDefinedParameter();
            pSubNetName.Name = "SubNetName";
            pSubNetName.ParameterType = typeof(string);
            pSubNetName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 5,
                Mandatory = false
            });
            pSubNetName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("SubNetName", pSubNetName);

            var pVirtualNetworkName = new RuntimeDefinedParameter();
            pVirtualNetworkName.Name = "VirtualNetworkName";
            pVirtualNetworkName.ParameterType = typeof(string);
            pVirtualNetworkName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 6,
                Mandatory = false
            });
            pVirtualNetworkName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("VirtualNetworkName", pVirtualNetworkName);

            var pArgumentList = new RuntimeDefinedParameter();
            pArgumentList.Name = "ArgumentList";
            pArgumentList.ParameterType = typeof(object[]);
            pArgumentList.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByStaticParameters",
                Position = 7,
                Mandatory = true
            });
            pArgumentList.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ArgumentList", pArgumentList);

            return dynamicParameters;
        }

        protected void ExecuteDeploymentPrepareMigrationMethod(object[] invokeMethodInputParameters)
        {
            string serviceName = (string)ParseParameter(invokeMethodInputParameters[0]);
            string deploymentName = (string)ParseParameter(invokeMethodInputParameters[1]);
            var parameters = new PrepareDeploymentMigrationParameters();
            var pDestinationVirtualNetwork = (string) ParseParameter(invokeMethodInputParameters[2]);
            parameters.DestinationVirtualNetwork = string.IsNullOrEmpty(pDestinationVirtualNetwork) ? null : pDestinationVirtualNetwork;
            var pResourceGroupName = (string) ParseParameter(invokeMethodInputParameters[3]);
            parameters.ResourceGroupName = string.IsNullOrEmpty(pResourceGroupName) ? null : pResourceGroupName;
            var pSubNetName = (string) ParseParameter(invokeMethodInputParameters[4]);
            parameters.SubNetName = string.IsNullOrEmpty(pSubNetName) ? null : pSubNetName;
            var pVirtualNetworkName = (string) ParseParameter(invokeMethodInputParameters[5]);
            parameters.VirtualNetworkName = string.IsNullOrEmpty(pVirtualNetworkName) ? null : pVirtualNetworkName;

            var result = DeploymentClient.PrepareMigration(serviceName, deploymentName, parameters);
            WriteObject(result);
        }
    }

    public partial class NewAzureComputeArgumentListCmdlet : ComputeAutomationBaseCmdlet
    {
        protected PSArgument[] CreateDeploymentPrepareMigrationParameters()
        {
            string serviceName = string.Empty;
            string deploymentName = string.Empty;
            var pDestinationVirtualNetwork = string.Empty;
            var pResourceGroupName = string.Empty;
            var pSubNetName = string.Empty;
            var pVirtualNetworkName = string.Empty;

            return ConvertFromObjectsToArguments(
                 new string[] { "ServiceName", "DeploymentName", "DestinationVirtualNetwork", "ResourceGroupName", "SubNetName", "VirtualNetworkName" },
                 new object[] { serviceName, deploymentName, pDestinationVirtualNetwork, pResourceGroupName, pSubNetName, pVirtualNetworkName });
        }
    }
}
